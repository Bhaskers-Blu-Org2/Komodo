procedure foo(inout{:local stack(1)} s1:int, out{:local stack(2)} s2:int, out{:register op_r(1)} tmp:int)
  requires/ensures
    NonEmptyStack(this);
    StackContains(this, 1);
    StackContains(this, 2);
  requires
    ValidState(this);
    ValidDestinationOperand(this, @tmp);
    isUInt32(s1);
{
  MOV(r2, 4);
  STR(r2, s1);

  LDR(tmp, s1);  
  STR(tmp, s2);  
  assert s1 == s2;
}

procedure main(inout{:local stack(1)} s1:int, out{:local stack(2)} s2:int, out{:register op_r(1)} tmp:int)
  requires/ensures
    NonEmptyStack(this);
    StackContains(this, 1);
    StackContains(this, 2);
  requires
    ValidState(this);
    ValidDestinationOperand(this, @tmp);
    isUInt32(s1);
{
  foo(s1, s2, tmp);
}

#verbatim
method Main()
{
  printHeader();
  var n := printCode(sp_code_main(), 0);
  printFooter();
}
#endverbatim

