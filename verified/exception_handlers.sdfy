include {:verbatim} "kom_common.i.dfy"
include {:verbatim} "pagedb.i.dfy"
include {:verbatim} "smcapi.i.dfy"
include {:verbatim} "entry.i.dfy"
include {:verbatim} "exceptions.i.dfy"

include "ARMdecls.sdfy"

#verbatim
function cpsr_of_state(s:state): word
    requires ValidState(s)
{ reveal_ValidSRegState(); s.sregs[cpsr] }
#endverbatim

procedure {:frame false} {:instruction Ins(CPSID_IAF(mod))}
CPSID_IAF(operand mod:word)
    requires/ensures
        ValidState(this) && this.ok;
        SaneStack(this) && SaneMem(this.m);
    requires
        InterruptContinuationInvariantDef();
        @mod is OConst;
        ValidModeEncoding(mod);
        priv_of_state(this) == PL1;
        ValidModeChange'(this, decode_mode(mod));
    modifies
        cpsr;
    ensures
        !interrupts_enabled(this);
        mode_of_state(this) == decode_mode(mod);
        StackPreserving(old(this), this);
        NonStackMemPreserving(old(this), this);
        GlobalsPreservingExcept(old(this), this, set(PendingInterruptOp()));
        this.conf.ttbr0 == old(this).conf.ttbr0;
        this.conf.scr == old(this).conf.scr;
        CoreRegPreservingExcept(old(this), this, set(OSP, OLR)); // banked
        forall m :: m != mode_of_exception(old(this).conf, ExIRQ)
            && m != mode_of_exception(old(this).conf, ExFIQ)
            ==> old(this).regs[LR(m)] == this.regs[LR(m)];
{
    reveal va_eval;
    exists s' :: maybeHandleInterrupt(old(this), s') && evalIns'(CPSID_IAF(@mod), s', this);
    lemma_PrivInterruptInvariants(old(this), s');
    assert mode_of_state(s') == mode_of_state(old(this))
        && world_of_state(s') == world_of_state(old(this));
    assert ValidInstruction(s', CPSID_IAF(@mod)) && evalCPSID_IAF(s', mod, this);
    lemma_update_psr(cpsr_of_state(s'), mod, true, true);
}

procedure {:frame false} switch_to_monitor(inline oldmode:mode)
    modifies
        cpsr; lr; /* spsr_mon; */
    reads
        /* spsr_svc; spsr_abt; spsr_und; */ lr_svc; lr_abt; lr_und;
    requires
        InterruptContinuationInvariantDef();
        SaneConstants() && ValidState(this) && SaneStack(this) && SaneMem(this.m);
        priv_of_state(this) == PL1 && world_of_state(this) == Secure;
        mode_of_state(this) == oldmode;
        oldmode == Supervisor || oldmode == Abort || oldmode == Undefined;
        this.ok;
    ensures
        SaneState(this);
        SaneStack(this);
        StackPreserving(old(this), this);
        NonStackMemPreserving(old(this), this);
        GlobalsPreservingExcept(old(this), this, set(PendingInterruptOp()));
        CoreRegPreservingExcept(old(this), this, set(OSP, OLR)); // banked
        //spsr_of_state(this) == spsr_of_state(old(this));
        lr == OperandContents(old(this), OLR);
        this.conf.ttbr0 == old(this).conf.ttbr0;
        this.conf.scr == old(this).conf.scr;
{
    CPSID_IAF(const(encode_mode(Monitor)));

    // inline if (oldmode == Supervisor) {
    //    MRS(lr, spsr_svc);
    // } else if (oldmode == Abort) {
    //    MRS(lr, spsr_abt);
    // } else if (oldmode == Undefined) {
    //    MRS(lr, spsr_und);
    // }
    // MSR(spsr_mon, lr);

    inline if (oldmode == Supervisor) {
       MRS(lr, lr_svc);
    } else if (oldmode == Abort) {
       MRS(lr, lr_abt);
    } else if (oldmode == Undefined) {
       MRS(lr, lr_und);
    }
}

procedure fault_exit(
    inline ex: exception,
    ghost exstate: state,
    ghost pagedb_in: PageDb,
    ghost dispPg: PageNr) returns (ghost pagedb: PageDb)
    reads
        globals;
    modifies
        mem; r0; r1; r2;
    requires/ensures
        SaneState(this);
    requires
        ValidState(exstate) && mode_of_state(exstate) != User;
        exstate.conf.ex == ex && set(ExSVC, ExAbt, ExUnd) ?[ex];
        r1 == OperandContents(exstate, OReg(R1));
        //this.conf.scr.ns == Secure;
        validPageDb(pagedb_in);
        SaneMem(exstate.m);
        pageDbCorresponds(exstate.m, pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
        nonStoppedDispatcher(pagedb_in, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
    ensures
        tuple(r0, r1, pagedb) == exceptionHandled(exstate, pagedb_in, dispPg);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validExceptionTransition(old(this), pagedb_in, this, pagedb, dispPg);
        MemPreservingExcept(old(this), this, page_monvaddr(dispPg),
                            page_monvaddr(dispPg) + PAGESIZE);
{
    LDRglobaladdr(r2, CurDispatcherOp());
    LDRglobal(r2, CurDispatcherOp(), r2, 0);
    assert r2 == page_monvaddr(dispPg);

    MOV(r0, 0);
    STR(r0, r2, const(DISPATCHER_ENTERED));
    inline if (ex == ExSVC) {
        assert r0 == KOM_ERR_SUCCESS;
    } else {
        MOV(r0, const(KOM_ERR_FAULT));
        MOV(r1, 0);
    }

    ghost var dispEntry := pagedb_in[dispPg].entry.(entered := false);
    ghost var pg := extractPage(this.m, dispPg);
    ghost var oldpg := extractPage(old(this).m, dispPg);
    assert pageDbDispatcherCorresponds(dispPg, dispEntry, pg) by {
        reveal pageDbDispatcherCorresponds;
        assert pageDbDispatcherCorresponds(dispPg, pagedb_in[dispPg].entry, oldpg)
            by { reveal pageContentsCorresponds; }
        assert pg[page_monvaddr(dispPg) + DISPATCHER_ENTERED] == 0;
        assert forall a:addr :: addrInPage(a, dispPg)
            && a != page_monvaddr(dispPg) + DISPATCHER_ENTERED
            ==> pg[a] == oldpg[a];
    }

    pagedb := pagedb_in[dispPg := pagedb_in[dispPg].(entry := dispEntry)];
    assert pagedb == exPageDb(exceptionHandled(exstate, pagedb_in, dispPg));
    //exceptionHandledValidPageDb(user_state, ExSVC, old(this), pagedb_in, dispPg);
    assume validPageDb(pagedb); // TODO!!

    assert GlobalsInvariant(old(this), this);
    assert pageDbCorrespondsOnly(this.m, pagedb, dispPg)
        by { reveal pageContentsCorresponds; reveal pageDbEntryCorresponds; }
    AllButOnePagePreserving(dispPg, old(this), this);
    assert pageDbCorresponds(this.m, pagedb);

    reveal validExceptionTransition;
}

procedure svc_returning(
    ghost exstate: state,
    ghost stack_bytes: int,
    ghost pagedb: PageDb,
    ghost dispPg: PageNr)
    reads
        globals;
    modifies
         r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
         spsr_mon;
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this, stack_bytes);
    requires
        ValidState(exstate) && mode_of_state(exstate) != User;
        isReturningSvc(exstate);
        CoreRegPreservingExcept(exstate, this, set(OSP, OLR));
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
    ensures
        lr == old(lr);
        StackPreserving(old(this), this);
        NonStackMemPreserving(old(this), this);
        preEntryReturn(this, old(lr), svcHandled(exstate, pagedb, dispPg));
{
    assert svcHandled(exstate, pagedb, dispPg) == tuple(KOM_ERR_INVALID,0,0,0,0,0,0,0,0);

    MOV(r0, const(encode_mode(User)));
    MSR(spsr_mon, r0);

    MOV(r0, const(KOM_ERR_INVALID));
    MOV(r1, 0);
    MOV(r2, 0);
    MOV(r3, 0);
    MOV(r4, 0);
    MOV(r5, 0);
    MOV(r6, 0);
    MOV(r7, 0);
    MOV(r8, 0);
}

#verbatim
predicate handler_requires(s: state, stack_bytes: int)
{
    InterruptContinuationInvariantDef()
    && SaneConstants() && ValidState(s)  && SaneStack(s) && SaneMem(s.m) && s.ok
    && StackBytesRemaining(s, stack_bytes)
    && s.conf.scr == SCRT(Secure, true, true)
    && mode_of_state(s) != User
}
#endverbatim

procedure {:frame false} svc_handler(
    ghost user_state: state,
    ghost stack_bytes: int,
    ghost pagedb0: PageDb,
    ghost pagedb1: PageDb,
    ghost dispPg: PageNr) returns (ghost pagedb: PageDb)
    reads
        globals; /* spsr_svc; spsr_abt; spsr_und; */ lr_svc; lr_abt; lr_und;
    modifies
        mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; cpsr; lr; spsr_mon;
    requires
        handler_requires(this, stack_bytes);
        ValidState(user_state) && mode_of_state(user_state) == User;
        evalExceptionTaken(user_state, ExSVC, this);
        validPageDb(pagedb0) && validPageDb(pagedb1);
        nonStoppedDispatcher(pagedb0, dispPg);
        pagedb1 == updateUserPagesFromState(user_state, pagedb0, dispPg);
        pageDbCorresponds(this.m, pagedb1);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
    ensures
        KomExceptionHandlerInvariant(old(this), pagedb1, this, dispPg);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    assert mode_of_state(this) == Supervisor
        by { lemma_evalExceptionTaken_Mode(user_state, ExSVC, this); }
    switch_to_monitor(Supervisor);
    lemma_SameMemAndGlobalsPreservesPageDb'(old(this), this, pagedb1);

    if (r0 == const(KOM_SVC_EXIT)) {
        assert !isReturningSvc(old(this));
        pagedb := fault_exit(ExSVC, old(this), pagedb1, dispPg);
        ORR(sp, sp, 1); // report that we're done
    } else {
        assert isReturningSvc(old(this));
        pagedb := pagedb1;
        svc_returning(old(this), stack_bytes, pagedb, dispPg);
        assert preEntryReturn(this, OperandContents(old(this), OLR),
                              svcHandled(old(this), pagedb, dispPg));
    }

    assert validExceptionTransition(old(this), pagedb1, this, pagedb, dispPg)
        by { reveal validExceptionTransition; }
}

procedure {:frame false} abort_handler(
    inline ex: exception,
    ghost user_state: state,
    ghost stack_bytes: int,
    ghost pagedb0: PageDb,
    ghost pagedb1: PageDb,
    ghost dispPg: PageNr) returns (ghost pagedb: PageDb)
    reads
        globals; /* spsr_svc; spsr_abt; spsr_und; */ lr_svc; lr_abt; lr_und;
    modifies
        mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; cpsr; lr; spsr_mon;
    requires
        handler_requires(this, stack_bytes);
        ValidState(user_state) && mode_of_state(user_state) == User;
        ex == ExAbt || ex == ExUnd;
        evalExceptionTaken(user_state, ex, this);
        validPageDb(pagedb0) && validPageDb(pagedb1);
        nonStoppedDispatcher(pagedb0, dispPg);
        pagedb1 == updateUserPagesFromState(user_state, pagedb0, dispPg);
        pageDbCorresponds(this.m, pagedb1);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
    ensures
        KomExceptionHandlerInvariant(old(this), pagedb1, this, dispPg);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    ghost var m := if ex == ExAbt then Abort else Undefined;
    assert mode_of_state(this) == m
        by { lemma_evalExceptionTaken_Mode(user_state, ex, this); }
    switch_to_monitor(if ex == ExAbt then Abort else Undefined);
    lemma_SameMemAndGlobalsPreservesPageDb'(old(this), this, pagedb1);

    pagedb := fault_exit(ex, old(this), pagedb1, dispPg);
    ORR(sp, sp, 1); // report that we're done

    assert validExceptionTransition(old(this), pagedb1, this, pagedb, dispPg)
        by { reveal_validExceptionTransition(); }
}

procedure {:frame false} interrupt_handler(
    inline ex: exception,
    ghost prior_state: state,
    ghost stack_bytes: int,
    ghost pagedb0: PageDb,
    ghost pagedb1: PageDb,
    ghost dispPg: PageNr) returns (ghost pagedb: PageDb)
    reads
        globals; /* spsr_svc; spsr_abt; spsr_und; */ lr_svc; lr_abt; lr_und;
    modifies
        mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; cpsr; lr; spsr_mon;
    requires
        handler_requires(this, stack_bytes);
        stack_bytes >= 2*WORDSIZE;
        ValidState(prior_state);
        ex == ExFIQ || ex == ExIRQ;
        evalExceptionTaken(prior_state, ex, this);
        validPageDb(pagedb0) && validPageDb(pagedb1);
        nonStoppedDispatcher(pagedb0, dispPg);
        if mode_of_state(prior_state) == User
            then pagedb1 == updateUserPagesFromState(prior_state, pagedb0, dispPg)
            else pagedb1 == pagedb0;
        pageDbCorresponds(this.m, pagedb1);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
    ensures
        KomInterruptHandlerInvariant(old(this), pagedb1, this, dispPg);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    assert mode_of_state(this) == Monitor
        by { lemma_evalExceptionTaken_Mode(prior_state, ex, this); }
    lemma_update_psr(cpsr_of_state(prior_state), encode_mode(Monitor), true, true);
    assert !interrupts_enabled(this);

    // push r0, r1
    SUB(sp, sp, const(2 * WORDSIZE));
    STR(r0, sp, 0);
    STR(r1, sp, const(WORDSIZE));

    // store pending interrupt
    LDRglobaladdr(r0, PendingInterruptOp());
    MOV(r1, 1);
    STRglobal(r1, PendingInterruptOp(), r0, 0);

    // figure out where we came from
    MRS(r0, spsr_mon);
    AND(r0, r0, 0x1f);
    assert r0 == psr_mask_mode(old(spsr_mon));
    if (r0 == const(encode_mode(User))) { // we came from user-mode, and need to save context
        assert spsr_of_state(old(this)).m == User;

        /* // restore r0, r1, sp
        LDR(r0, sp, 0);
        LDR(r1, sp, const(WORDSIZE));
        ADD(sp, sp, const(2 * WORDSIZE));
        assert r0 == old(r0) && r1 == old(r1) && sp == old(sp);
        */

        // TODO: save dispatcher context!
        assume tuple(r0, r1, pagedb) == exceptionHandled(old(this), pagedb1, dispPg);

        ORR(sp, sp, 1);
    } else { // we came from another exception handler
        assert spsr_of_state(old(this)).m != User;

        // restore r0, r1, sp
        LDR(r0, sp, 0);
        LDR(r1, sp, const(WORDSIZE));
        ADD(sp, sp, const(2 * WORDSIZE));
        assert r0 == old(r0) && r1 == old(r1) && sp == old(sp);

        pagedb := pagedb1;
        lemma_SameMemAndGlobalsPreservesPageDb'(old(this), this, pagedb);
    }

    assert validExceptionTransition(old(this), pagedb1, this, pagedb, dispPg)
        by { reveal_validExceptionTransition(); }
}
