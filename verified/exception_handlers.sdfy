include {:verbatim} "kom_common.i.dfy"
include {:verbatim} "pagedb.i.dfy"
include {:verbatim} "smcapi.i.dfy"
include {:verbatim} "entry.i.dfy"
include {:verbatim} "exceptions.i.dfy"

include "ARMdecls.sdfy"
include "kom_utils.sdfy"
include "sha/hmac.sdfy"

#verbatim
function cpsr_of_state(s:state): word
    requires ValidState(s)
    ensures ValidPsrWord(cpsr_of_state(s))
{ reveal_ValidSRegState(); s.sregs[cpsr] }

//const STACKSIZE_ATTEST:int := 8 + 24 + 1 + 2 * SHA_BLOCKSIZE + HMAC_KEYSIZE_WORDS + STACKSIZE_HMAC;
// workaround Dafny const-bug which results in stack overflow
const T1:int := HMAC_KEYSIZE_WORDS + STACKSIZE_HMAC;
const T2:int := 2 * SHA_BLOCKSIZE;
const T3:int := 33;
const T4:int := T1 + T2;
const STACKSIZE_ATTEST:int := T3 + T4;

#endverbatim

procedure {:frame false} {:instruction Ins(CPSID_IAF(mod))}
CPSID_IAF(operand mod:word)
    requires/ensures
        ValidState(this) && this.ok;
        SaneStack(this) && SaneMem(this.m);
    requires
        InterruptContinuationPrecondition(this);
        InterruptContinuationInvariantDef();
        @mod is OConst;
        ValidModeEncoding(mod);
        priv_of_state(this) == PL1;
        ValidModeChange'(this, decode_mode(mod));
    modifies
        cpsr;
    ensures
        !interrupts_enabled(this);
        mode_of_state(this) == decode_mode(mod);
        StackPreserving(old(this), this);
        NonStackMemPreserving(old(this), this);
        GlobalsPreservingExcept(old(this), this, set(PendingInterruptOp()));
        this.conf.ttbr0 == old(this).conf.ttbr0;
        this.conf.scr == old(this).conf.scr;
        CoreRegPreservingExcept(old(this), this, set(OSP, OLR)); // banked
        forall m :: m != mode_of_exception(old(this).conf, ExIRQ)
            && m != mode_of_exception(old(this).conf, ExFIQ)
            ==> old(this).regs[LR(m)] == this.regs[LR(m)]
              && old(this).regs[SP(m)] == this.regs[SP(m)];
{
    reveal va_eval;
    exists s' :: maybeHandleInterrupt(old(this), s') && evalIns'(CPSID_IAF(@mod), s', this);
    lemma_PrivInterruptInvariants(old(this), s');
    assert mode_of_state(s') == mode_of_state(old(this))
        && world_of_state(s') == world_of_state(old(this));
    assert ValidInstruction(s', CPSID_IAF(@mod)) && evalCPSID_IAF(s', mod, this);
    lemma_update_psr(cpsr_of_state(s'), mod, true, true);
}

procedure {:frame false} switch_to_monitor(inline oldmode:mode)
    modifies
        cpsr; lr; /* spsr_mon; */
    reads
        /* spsr_svc; spsr_abt; spsr_und; */ lr_svc; lr_abt; lr_und;
        lr_usr; sp_usr;
    requires
        InterruptContinuationPrecondition(this);
        InterruptContinuationInvariantDef();
        SaneConstants() && ValidState(this) && SaneStack(this) && SaneMem(this.m);
        priv_of_state(this) == PL1 && world_of_state(this) == Secure;
        mode_of_state(this) == oldmode;
        oldmode == Supervisor || oldmode == Abort || oldmode == Undefined;
        this.ok;
    ensures
        SaneState(this);
        SaneStack(this);
        StackPreserving(old(this), this);
        NonStackMemPreserving(old(this), this);
        GlobalsPreservingExcept(old(this), this, set(PendingInterruptOp()));
        CoreRegPreservingExcept(old(this), this, set(OSP, OLR)); // banked
        lr_usr == old(lr_usr) && sp_usr == old(sp_usr);
        //spsr_of_state(this) == spsr_of_state(old(this));
        lr == OperandContents(old(this), OLR);
        this.conf.ttbr0 == old(this).conf.ttbr0;
        this.conf.scr == old(this).conf.scr;
{
    CPSID_IAF(const(encode_mode(Monitor)));

    // inline if (oldmode == Supervisor) {
    //    MRS(lr, spsr_svc);
    // } else if (oldmode == Abort) {
    //    MRS(lr, spsr_abt);
    // } else if (oldmode == Undefined) {
    //    MRS(lr, spsr_und);
    // }
    // MSR(spsr_mon, lr);

    inline if (oldmode == Supervisor) {
       MRS(lr, lr_svc);
    } else if (oldmode == Abort) {
       MRS(lr, lr_abt);
    } else if (oldmode == Undefined) {
       MRS(lr, lr_und);
    }
}

procedure fault_exit(
    inline ex: exception,
    ghost exstate: state,
    ghost pagedb_in: PageDb,
    ghost dispPg: PageNr) returns (ghost pagedb: PageDb)
    reads
        globals;
    modifies
        mem; r0; r1; r2;
    requires/ensures
        SaneState(this);
    requires
        ValidState(exstate);
        mode_of_state(exstate) != User && spsr_of_state(exstate).m == User;
        exstate.conf.ex == ex && set(ExSVC, ExAbt, ExUnd) ?[ex];
        r1 == OperandContents(exstate, OReg(R1));
        //this.conf.scr.ns == Secure;
        validPageDb(pagedb_in);
        SaneMem(exstate.m);
        pageDbCorresponds(exstate.m, pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
        nonStoppedDispatcher(pagedb_in, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
    ensures
        tuple(r0, r1, pagedb) == exceptionHandled(exstate, pagedb_in, dispPg);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validExceptionTransition(old(this), pagedb_in, this, pagedb, dispPg);
        MemPreservingExcept(old(this), this, page_monvaddr(dispPg),
                            page_monvaddr(dispPg) + PAGESIZE);
{
    LDRglobaladdr(r2, CurDispatcherOp());
    LDRglobal(r2, CurDispatcherOp(), r2, 0);
    assert r2 == page_monvaddr(dispPg);

    MOV(r0, 0);
    STR(r0, r2, const(DISPATCHER_ENTERED));
    inline if (ex == ExSVC) {
        assert r0 == KOM_ERR_SUCCESS;
    } else {
        MOV(r0, const(KOM_ERR_FAULT));
        MOV(r1, 0);
    }

    ghost var dispEntry := pagedb_in[dispPg].entry.(entered := false);
    ghost var pg := extractPage(this.m, dispPg);
    ghost var oldpg := extractPage(old(this).m, dispPg);
    assert pageDbDispatcherCorresponds(dispPg, dispEntry, pg) by {
        reveal pageDbDispatcherCorresponds;
        assert pageDbDispatcherCorresponds(dispPg, pagedb_in[dispPg].entry, oldpg)
            by { reveal pageContentsCorresponds; }
        assert pg[page_monvaddr(dispPg) + DISPATCHER_ENTERED] == 0;
        assert forall a:addr :: addrInPage(a, dispPg)
            && a != page_monvaddr(dispPg) + DISPATCHER_ENTERED
            ==> pg[a] == oldpg[a];
    }

    pagedb := pagedb_in[dispPg := pagedb_in[dispPg].(entry := dispEntry)];
    assert pagedb == exPageDb(exceptionHandled(exstate, pagedb_in, dispPg));
    lemma_exceptionHandled_validPageDb(exstate, pagedb_in, dispPg);

    assert GlobalsInvariant(old(this), this);
    assert pageDbCorrespondsOnly(this.m, pagedb, dispPg)
        by { reveal pageContentsCorresponds; reveal pageDbEntryCorresponds; }
    AllButOnePagePreserving(dispPg, old(this), this);
    assert pageDbCorresponds(this.m, pagedb);

    reveal validExceptionTransition;
}

procedure addrspace_va_for_page_va(
    operand page_va: reg,
    out operand as_va: reg,
    out operand tmp: reg,
    ghost pagenr:PageNr,
    ghost pagedb:PageDb)
    reads
        globals;
    requires/ensures
        SaneState(this);
    requires
        @as_va != @tmp; @as_va != OSP; @tmp != OSP;
        page_va == page_monvaddr(pagenr);
        validPageDb(pagedb) && pageDbCorresponds(this.m, pagedb);
        pagedb[pagenr] is PageDbEntryTyped;
    ensures
        as_va == page_monvaddr(pagedb[pagenr].addrspace);
{
    // compute page number
    SUB(as_va, page_va, const(KOM_DIRECTMAP_VBASE));
    LDRglobaladdr(tmp, SecurePhysBaseOp());
    LDRglobal(tmp, SecurePhysBaseOp(), tmp, 0);
    SUB(as_va, as_va, tmp);
    lemma_RightShift12(as_va);
    LSR(as_va, as_va, const(PAGEBITS));
    assert as_va == monvaddr_page(old(page_va)) == pagenr;

    // retrieve addrspace field from pagedb
    // TODO: avoid pointless double-shift
    lemma_LeftShift3(as_va);
    LSL(as_va, as_va, const(PAGEDB_ENTRY_SHIFT));
    ADD(as_va, as_va, const(PAGEDB_ENTRY_ADDRSPACE));
    assert as_va == G_PAGEDB_ENTRY(pagenr) + PAGEDB_ENTRY_ADDRSPACE;
    LDRglobaladdr(tmp, PageDb());
    LDRglobal(as_va, PageDb(), tmp, as_va);

    reveal pageDbEntryCorresponds;
    PageDbCorrespondsImpliesEntryCorresponds(this.m, pagedb, pagenr);
    extractPageDbToAbstractOne(this.m, pagenr, PAGEDB_ENTRY_ADDRSPACE);
}

procedure svc_returning_default(
    ghost exstate: state,
    ghost stack_bytes: int,
    ghost pagedb: PageDb,
    ghost dispPg: PageNr)
    modifies
         r0; r1; r2; r3; r4; r5; r6; r7; r8; spsr_mon;
    requires/ensures
        SaneState(this);
    requires
        ValidState(exstate) && mode_of_state(exstate) != User;
        isReturningSvc(exstate);
        CoreRegPreservingExcept(exstate, this, set(OSP, OLR));
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        r0 > 4;
    ensures
        let tuple := svcHandled(exstate, pagedb, dispPg) in
        let retRegs := firstOf2(tuple) in
        let pagedb' := secondOf2(tuple) in
        preEntryReturn(old(this), this, retRegs);
{
    // Fall back position
    assert firstOf2(svcHandled(exstate, pagedb, dispPg)) == tuple(KOM_ERR_INVALID,0,0,0,0,0,0,0,0);

    MOV(r0, const(encode_mode(User)));
    MSR(spsr_mon, r0);

    MOV(r0, const(KOM_ERR_INVALID));
    MOV(r1, 0);
    MOV(r2, 0);
    MOV(r3, 0);
    MOV(r4, 0);
    MOV(r5, 0);
    MOV(r6, 0);
    MOV(r7, 0);
    MOV(r8, 0);
}

procedure load_attestion_key() returns (ghost key:seq(word))
    reads
        globals;
    modifies 
        mem; r2; r3; r4;
    requires/ensures
        SaneState(this);
        ValidMemRange(r4, r4 + SHA_CTXSIZE * WORDSIZE);
    ensures
        AddrMemPreservingExcept(old(mem), mem, r4, r4 + SHA_CTXSIZE * WORDSIZE);
        AddrMemContentsSeq(mem, r4, SHA_CTXSIZE) == key == AttestKey();
{
    assert ValidGlobal(AttestKeyOp()) by { reveal SaneShaGlobal; }
    LDRglobaladdr(r2, AttestKeyOp());

    LDRglobal(r3, AttestKeyOp(), r2, const(0 * WORDSIZE));
    STR(r3, r4, const(0 * WORDSIZE));
    LDRglobal(r3, AttestKeyOp(), r2, const(1 * WORDSIZE));
    STR(r3, r4, const(1 * WORDSIZE));
    LDRglobal(r3, AttestKeyOp(), r2, const(2 * WORDSIZE));
    STR(r3, r4, const(2 * WORDSIZE));
    LDRglobal(r3, AttestKeyOp(), r2, const(3 * WORDSIZE));
    STR(r3, r4, const(3 * WORDSIZE));
    LDRglobal(r3, AttestKeyOp(), r2, const(4 * WORDSIZE));
    STR(r3, r4, const(4 * WORDSIZE));
    LDRglobal(r3, AttestKeyOp(), r2, const(5 * WORDSIZE));
    STR(r3, r4, const(5 * WORDSIZE));
    LDRglobal(r3, AttestKeyOp(), r2, const(6 * WORDSIZE));
    STR(r3, r4, const(6 * WORDSIZE));
    LDRglobal(r3, AttestKeyOp(), r2, const(7 * WORDSIZE));
    STR(r3, r4, const(7 * WORDSIZE));
    //key := AttestKey();

    assert WordAligned(r4);
    WordAlignedAdd(r4, 1*WORDSIZE);
    WordAlignedAdd(r4, 2*WORDSIZE);
    WordAlignedAdd(r4, 3*WORDSIZE);
    WordAlignedAdd(r4, 4*WORDSIZE);
    WordAlignedAdd(r4, 5*WORDSIZE);
    WordAlignedAdd(r4, 6*WORDSIZE);
    WordAlignedAdd(r4, 7*WORDSIZE);

    key := 
        seq(AddrMemContents(mem, r4 + 0*WORDSIZE),
            AddrMemContents(mem, r4 + 1*WORDSIZE),
            AddrMemContents(mem, r4 + 2*WORDSIZE),
            AddrMemContents(mem, r4 + 3*WORDSIZE),
            AddrMemContents(mem, r4 + 4*WORDSIZE),
            AddrMemContents(mem, r4 + 5*WORDSIZE),
            AddrMemContents(mem, r4 + 6*WORDSIZE),
            AddrMemContents(mem, r4 + 7*WORDSIZE));
    lemma_package_hash_result(mem, r4, key);    // Ensures AddMemContentsSeq(mem, r4, SHA_CTXSIZE) == key
    assert key == GlobalFullContents(this.m, AttestKeyOp());
    assert GlobalFullContents(this.m, AttestKeyOp()) == AttestKey();
}

procedure arrange_user_regs_in_memory() returns (ghost user_words:seq(word))
    reads
        globals; sp; r1; r2; r3; r4; r5; r6; r7; r8;
    modifies 
        mem; 
    requires/ensures
        SaneState(this);
        ValidMemRange(sp + SHA_CTXSIZE * WORDSIZE, sp + (SHA_CTXSIZE + 8) * WORDSIZE);
    ensures
        AddrMemPreservingExcept(old(mem), mem, sp + SHA_CTXSIZE * WORDSIZE, sp + (SHA_CTXSIZE + 8) * WORDSIZE);
        AddrMemContentsSeq(mem, sp + SHA_CTXSIZE * WORDSIZE, SHA_CTXSIZE) == user_words;
        user_words == old(seq(r1, r2, r3, r4, r5, r6, r7, r8));
{
    user_words := seq(r1, r2, r3, r4, r5, r6, r7, r8);

    // Arrange the user words in memory after the gap for the MAC output
    STR(r1, sp, const((SHA_CTXSIZE + 0) * WORDSIZE));
    STR(r2, sp, const((SHA_CTXSIZE + 1) * WORDSIZE));
    STR(r3, sp, const((SHA_CTXSIZE + 2) * WORDSIZE));
    STR(r4, sp, const((SHA_CTXSIZE + 3) * WORDSIZE));
    STR(r5, sp, const((SHA_CTXSIZE + 4) * WORDSIZE));
    STR(r6, sp, const((SHA_CTXSIZE + 5) * WORDSIZE));
    STR(r7, sp, const((SHA_CTXSIZE + 6) * WORDSIZE));
    STR(r8, sp, const((SHA_CTXSIZE + 7) * WORDSIZE));

    assert WordAligned(sp);
    WordAlignedAdd(sp, (SHA_CTXSIZE + 0) * WORDSIZE);
    WordAlignedAdd(sp, (SHA_CTXSIZE + 1) * WORDSIZE);
    WordAlignedAdd(sp, (SHA_CTXSIZE + 2) * WORDSIZE);
    WordAlignedAdd(sp, (SHA_CTXSIZE + 3) * WORDSIZE);
    WordAlignedAdd(sp, (SHA_CTXSIZE + 4) * WORDSIZE);
    WordAlignedAdd(sp, (SHA_CTXSIZE + 5) * WORDSIZE);
    WordAlignedAdd(sp, (SHA_CTXSIZE + 6) * WORDSIZE);
    WordAlignedAdd(sp, (SHA_CTXSIZE + 7) * WORDSIZE);

    lemma_package_hash_result(mem, sp + SHA_CTXSIZE * WORDSIZE, user_words);    
}

procedure arrange_real_measurement_in_memory(
    ghost pagedb: PageDb,
    ghost dispPg: PageNr
    ) returns (ghost measurement:seq(word))
    reads
        globals; sp; r1; r11;
    modifies 
        mem; r2; r3; r4;
    requires/ensures
        SaneState(this);
        ValidMemRange(r1, r1 + SHA_CTXSIZE * WORDSIZE);
    requires
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        nonStoppedDispatcher(pagedb, dispPg);

        r11 == page_monvaddr(pagedb[dispPg].addrspace);
//        sp <= r1 && r1 + SHA_CTXSIZE * WORDSIZE <= StackLimit();           
//        dst + size <= src || src + size <= dst;
        sp <= r1 && r1 + SHA_CTXSIZE * WORDSIZE <= StackBase();           
//        dst >= StackBase() || dst + size <= StackLimit();
        // no writing to insecure mem
        r1 >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() || r1 + SHA_CTXSIZE * WORDSIZE <= KOM_DIRECTMAP_VBASE;

    ensures
        AddrMemPreservingExcept(old(mem), mem, r1, r1 + SHA_CTXSIZE * WORDSIZE);
        AddrMemContentsSeq(mem, r1, SHA_CTXSIZE) == measurement;
        validAddrspacePage(pagedb, pagedb[dispPg].addrspace);
        let addrsp_pg := pagedb[dispPg].addrspace in
        let addrsp := pagedb[addrsp_pg].entry in
            measurement == SHA256(WordSeqToBytes(addrsp.measurement));
{
    assert WordAligned(r11);
    ghost var offset := r11 + ADDRSPACE_HASH;
    WordAlignedAdd(r11, ADDRSPACE_HASH);
    assert WordAligned(offset);
    WordAlignedAdd(offset, 1*WORDSIZE);
    WordAlignedAdd(offset, 2*WORDSIZE);
    WordAlignedAdd(offset, 3*WORDSIZE);
    WordAlignedAdd(offset, 4*WORDSIZE);
    WordAlignedAdd(offset, 5*WORDSIZE);
    WordAlignedAdd(offset, 6*WORDSIZE);
    WordAlignedAdd(offset, 7*WORDSIZE);

    measurement := 
        seq(AddrMemContents(mem, offset + 0*WORDSIZE),
            AddrMemContents(mem, offset + 1*WORDSIZE),
            AddrMemContents(mem, offset + 2*WORDSIZE),
            AddrMemContents(mem, offset + 3*WORDSIZE),
            AddrMemContents(mem, offset + 4*WORDSIZE),
            AddrMemContents(mem, offset + 5*WORDSIZE),
            AddrMemContents(mem, offset + 6*WORDSIZE),
            AddrMemContents(mem, offset + 7*WORDSIZE));
    lemma_package_hash_result(mem, offset, measurement);    
    assert AddrMemContentsSeq(mem, offset, SHA_CTXSIZE) == measurement;

    // Arrange the enclave measurement 
    ADD(r2, r11, const(ADDRSPACE_HASH));  // Construct a pointer to enclave measurement hash 
    MOV(r3, const(SHA_CTXSIZE * WORDSIZE));         // Size arg to memcpy
    memcpy(r1, r2, r3, r4);

    lemma_memset_result(old(this.m), this.m, offset, r1, SHA_CTXSIZE);
    assert AddrMemContentsSeq(mem, r1, SHA_CTXSIZE) == measurement;
    ghost var addrsp_pg := pagedb[dispPg].addrspace;
    assert validAddrspacePage(pagedb, addrsp_pg) by { reveal_validPageDb(); }
    ghost var addrsp := pagedb[addrsp_pg].entry;

    assert measurement == SHA256(WordSeqToBytes(addrsp.measurement)) by {
        assert addrsp.state is FinalState by {
            assume nonStoppedDispatcher(pagedb, dispPg) ==> addrsp.state is FinalState;  // TODO: Remove me!
        }
        assert pageDbCorresponds(this.m, pagedb) by {
           lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb);
        }
        assert validPageNr(addrsp_pg);
        ghost var page := extractPage(this.m, addrsp_pg);
        assert pageContentsCorresponds(addrsp_pg, pagedb[addrsp_pg], page);
        reveal pageContentsCorresponds;
        assert pageDbAddrspaceCorresponds(addrsp_pg, addrsp, page);
        reveal pageDbAddrspaceCorresponds;


        ghost var base := page_monvaddr(addrsp_pg);
        assert base == r11;
        assert memContainsPage(page, addrsp_pg);
        assert page?[base]; 

        calc {
          base;
          page_paddr(addrsp_pg) + KOM_DIRECTMAP_VBASE;
        <
          SecurePhysBase() + KOM_SECURE_RESERVE + KOM_DIRECTMAP_VBASE;
        <=
          KOM_PHYSMEM_LIMIT - KOM_SECURE_RESERVE + KOM_SECURE_RESERVE + KOM_DIRECTMAP_VBASE;
          KOM_PHYSMEM_LIMIT + KOM_DIRECTMAP_VBASE;
          0x4000_0000 + 0x8000_0000;
          0xc000_0000;
        }
        
        assert WordAligned(base + ADDRSPACE_HASH + 0 * WORDSIZE); 
        assert addrInPage(base + ADDRSPACE_HASH + 0*WORDSIZE, addrsp_pg);       // OBSERVE
        assert addrInPage(base + ADDRSPACE_HASH + 1*WORDSIZE, addrsp_pg);       // OBSERVE
        assert addrInPage(base + ADDRSPACE_HASH + 2*WORDSIZE, addrsp_pg);       // OBSERVE
        assert addrInPage(base + ADDRSPACE_HASH + 3*WORDSIZE, addrsp_pg);       // OBSERVE
        assert addrInPage(base + ADDRSPACE_HASH + 4*WORDSIZE, addrsp_pg);       // OBSERVE
        assert addrInPage(base + ADDRSPACE_HASH + 5*WORDSIZE, addrsp_pg);       // OBSERVE
        assert addrInPage(base + ADDRSPACE_HASH + 6*WORDSIZE, addrsp_pg);       // OBSERVE
        assert addrInPage(base + ADDRSPACE_HASH + 7*WORDSIZE, addrsp_pg);       // OBSERVE

        ghost var addr_space_hash := seq(page[base + ADDRSPACE_HASH + 0*WORDSIZE],
                                         page[base + ADDRSPACE_HASH + 1*WORDSIZE],
                                         page[base + ADDRSPACE_HASH + 2*WORDSIZE],
                                         page[base + ADDRSPACE_HASH + 3*WORDSIZE],
                                         page[base + ADDRSPACE_HASH + 4*WORDSIZE],
                                         page[base + ADDRSPACE_HASH + 5*WORDSIZE],
                                         page[base + ADDRSPACE_HASH + 6*WORDSIZE],
                                         page[base + ADDRSPACE_HASH + 7*WORDSIZE]);
        assert addr_space_hash == SHA256(WordSeqToBytes(addrsp.measurement));
        assert addr_space_hash == measurement;
    }
    assert {:split_here} true;
}

procedure svc_returning_attest(
    ghost exstate: state,
    ghost stack_bytes: int,
    ghost pagedb: PageDb,
    ghost dispPg: PageNr)
    reads
        globals;
    modifies
         r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
         spsr_mon; mem;
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this, stack_bytes);
    requires
        ValidState(exstate) && mode_of_state(exstate) != User;
        stack_bytes >= STACKSIZE_ATTEST;
        isReturningSvc(exstate);
        CoreRegPreservingExcept(exstate, this, set(OSP, OLR));
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        nonStoppedDispatcher(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        r0 == KOM_SVC_ATTEST;
        r10 == page_monvaddr(dispPg);
        r11 == page_monvaddr(pagedb[dispPg].addrspace);
    ensures
        lr == old(lr);
        StackPreserving(old(this), this);
        NonStackMemPreserving(old(this), this);
        let tuple := svcHandled(exstate, pagedb, dispPg) in
        let retRegs := firstOf2(tuple) in
        let handled_pagedb := secondOf2(tuple) in
        pagedb == handled_pagedb && preEntryReturn(old(this), this, retRegs);
{
    ghost var addrspace := pagedb[dispPg].addrspace;
    assert validAddrspacePage(pagedb, addrspace) by { reveal_validPageDb(); }

    // Need to fetch this from the addrspace
    ghost var enclave_measurement := SHA256(WordSeqToBytes(pagedb[addrspace].entry.measurement));

    ghost var user_words := seq(r1, r2, r3, r4, r5, r6, r7, r8);

    // produce an attestation
    ghost var message := user_words + enclave_measurement + SeqRepeat(8, 0);
//    var hmac := HMAC_SHA256(AttestKey(), WordSeqToBytes(message));
//    ((KOM_ERR_SUCCESS, hmac[0], hmac[1], hmac[2], hmac[3], hmac[4], hmac[5],
//        hmac[6], hmac[7]), d)

    // Stack layout [size in words]:
    //   sp := mac_output[8] || message [8+16] || gap[1] || tmp_ptr[2*SHA_BLOCKSIZE] || key_ptr[HMAC_KEYSIZE_WORDS]
    // where 
    //   message = user_words[8] || enclave_measurement [8] || 0 [8]
    // Total stack usage == 8 + 24 + 1 + 2 * SHA_BLOCKSIZE + HMAC_KEYSIZE_WORDS
    // Plus STACKSIZE_HMAC
    SUB(sp, sp, const(STACKSIZE_ATTEST * WORDSIZE));
    
    // Arrange the user words in memory after the gap for the MAC output

    // TODO: Call arrange_user_regs_in_memory

//    STR(r1, sp, const(SHA_CTXSIZE + 0 * WORDSIZE));
//    STR(r2, sp, const(SHA_CTXSIZE + 1 * WORDSIZE));
//    STR(r3, sp, const(SHA_CTXSIZE + 2 * WORDSIZE));
//    STR(r4, sp, const(SHA_CTXSIZE + 3 * WORDSIZE));
//    STR(r5, sp, const(SHA_CTXSIZE + 4 * WORDSIZE));
//    STR(r6, sp, const(SHA_CTXSIZE + 5 * WORDSIZE));
//    STR(r7, sp, const(SHA_CTXSIZE + 6 * WORDSIZE));
//    STR(r8, sp, const(SHA_CTXSIZE + 7 * WORDSIZE));

    // Arrange the enclave measurement 
    ADD(r1, sp, const(SHA_CTXSIZE + 8 * WORDSIZE)); // Construct a pointer for the next slot on the stack

    // TODO: Call arrange_real_measurement_in_memory

//    ADD(r2, r11,const(ADDRSPACE_HASH * WORDSIZE));  // Construct a pointer to enclave measurement hash 
//    MOV(r3, const(SHA_CTXSIZE * WORDSIZE));         // Size arg to memcpy
//    memcpy(r1, r2, r3, r4);

    // Fill in some zeroes
    ADD(r1, r1, const(SHA_CTXSIZE * WORDSIZE)); // Construct a pointer for the next slot on the stack
    MOV(r2, 0);
    MOV(r3, const(8 * WORDSIZE));
    memset(r1, r2, r3);

    // Arrange the key in memory
    ghost var key:seq(word);
    // TODO: Call load_attestion_key

    // Call HMAC
    MOV(r0, sp);                                  // ctx
    ADD(r1, r1, const( (8+1) * WORDSIZE));        // tmp_ptr
    MOV(r2, 1);                                   // num_blocks == 1
    ADD(r3, sp, const(SHA_CTXSIZE * WORDSIZE));   // input_ptr
    //ADD(r4, r1, const(2*SHA_BLOCKSIZE*WORDSIZE)); // key_ptr
    ghost var mac;
    mac := hmac(key, message);

    // Load the mac into registers
    LDR(r1, sp, const(0 * WORDSIZE));
    LDR(r2, sp, const(1 * WORDSIZE));
    LDR(r3, sp, const(2 * WORDSIZE));
    LDR(r4, sp, const(3 * WORDSIZE));
    LDR(r5, sp, const(4 * WORDSIZE));
    LDR(r6, sp, const(5 * WORDSIZE));
    LDR(r7, sp, const(6 * WORDSIZE));
    LDR(r8, sp, const(7 * WORDSIZE));


    ADD(sp, sp, const(STACKSIZE_ATTEST * WORDSIZE));
}

procedure svc_returning_verify_step0(
    ghost exstate: state,
    ghost stack_bytes: int,
    ghost pagedb: PageDb,
    ghost dispPg: PageNr)
    returns (
    ghost pagedb': PageDb
    )
    reads
        globals; r10; lr;
    modifies
         r0; r1; r2; r3; r4; r5; r6; r7; r8;
         spsr_mon; mem;
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this, stack_bytes);
    requires
        ValidState(exstate) && mode_of_state(exstate) != User;
        isReturningSvc(exstate);
        CoreRegPreservingExcept(exstate, this, set(OSP, OLR));
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        r0 == KOM_SVC_VERIFY_STEP0;
        r10 == page_monvaddr(dispPg);
    ensures
        StackPreserving(old(this), this);
        MemPreservingExcept(old(this), this, r10, r10 + DISP_CTXT_USER_WORDS + 8 * WORDSIZE);
        let tuple := svcHandled(exstate, pagedb, dispPg) in
        let retRegs := firstOf2(tuple) in
        let handled_pagedb := secondOf2(tuple) in
        pagedb' == handled_pagedb && preEntryReturn(old(this), this, retRegs);
        pageDbCorresponds(this.m, pagedb');
        validDispatcherPage(pagedb', dispPg);
{
    ghost var user_words := seq(r1, r2, r3, r4, r5, r6, r7, r8);
    pagedb' := pagedb[dispPg := pagedb[dispPg].(entry := pagedb[dispPg].entry.(verify_words := user_words))];

    STR(r1, r10, const(DISP_CTXT_USER_WORDS + 0 * WORDSIZE));
    STR(r2, r10, const(DISP_CTXT_USER_WORDS + 1 * WORDSIZE));
    STR(r3, r10, const(DISP_CTXT_USER_WORDS + 2 * WORDSIZE));
    STR(r4, r10, const(DISP_CTXT_USER_WORDS + 3 * WORDSIZE));
    STR(r5, r10, const(DISP_CTXT_USER_WORDS + 4 * WORDSIZE));
    STR(r6, r10, const(DISP_CTXT_USER_WORDS + 5 * WORDSIZE));
    STR(r7, r10, const(DISP_CTXT_USER_WORDS + 6 * WORDSIZE));
    STR(r8, r10, const(DISP_CTXT_USER_WORDS + 7 * WORDSIZE));

    MOV(r0, const(encode_mode(User)));
    MSR(spsr_mon, r0);

    assert firstOf2(svcHandled(exstate, pagedb, dispPg)) == tuple(KOM_ERR_SUCCESS,0,0,0,0,0,0,0,0);
    MOV(r0, const(KOM_ERR_SUCCESS));
    MOV(r1, 0);
    MOV(r2, 0);
    MOV(r3, 0);
    MOV(r4, 0);
    MOV(r5, 0);
    MOV(r6, 0);
    MOV(r7, 0);
    MOV(r8, 0);

    ghost var disp := pagedb'[dispPg].entry;
    ghost var pg := extractPage(this.m, dispPg);
    lemma_svc_returning_verify_step0_helper(old(this), pagedb, dispPg, old(this.m), this.m,
        user_words, pagedb', disp, pg);

    assert pageDbCorresponds(this.m, pagedb') by {
        assert pageDbCorrespondsOnly(this.m, pagedb', dispPg) by {
            assert pageDbEntryCorresponds(pagedb'[dispPg],
                                          extractPageDbEntry(this.m, dispPg))
                by { assert GlobalsInvariant(old(this), this);
                     reveal pageDbEntryCorresponds; }
            assert pageContentsCorresponds(dispPg, pagedb'[dispPg], pg)
                by { reveal pageContentsCorresponds; }
        }
        AllButOnePagePreserving(dispPg, old(this), this);
    }
}


procedure svc_returning_verify_step1(
    ghost exstate: state,
    ghost stack_bytes: int,
    ghost pagedb: PageDb,
    ghost dispPg: PageNr)
    returns (
    ghost pagedb': PageDb
    )
    reads
        globals; r10; lr;
    modifies
         r0; r1; r2; r3; r4; r5; r6; r7; r8;
         spsr_mon; mem;
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this, stack_bytes);
    requires
        ValidState(exstate) && mode_of_state(exstate) != User;
        isReturningSvc(exstate);
        CoreRegPreservingExcept(exstate, this, set(OSP, OLR));
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        r0 == KOM_SVC_VERIFY_STEP1;
        r10 == page_monvaddr(dispPg);
    ensures
        StackPreserving(old(this), this);
        MemPreservingExcept(old(this), this, r10, r10 + DISP_CTXT_VERIFY_MEASUREMENT + 8 * WORDSIZE);
        let tuple := svcHandled(exstate, pagedb, dispPg) in
        let retRegs := firstOf2(tuple) in
        let handled_pagedb := secondOf2(tuple) in
        pagedb' == handled_pagedb && preEntryReturn(old(this), this, retRegs);
        pageDbCorresponds(this.m, pagedb');
        validDispatcherPage(pagedb', dispPg);
{
    ghost var user_words := seq(r1, r2, r3, r4, r5, r6, r7, r8);
    pagedb' := pagedb[dispPg := pagedb[dispPg].(entry := pagedb[dispPg].entry.(verify_measurement := user_words))];

    STR(r1, r10, const(DISP_CTXT_VERIFY_MEASUREMENT + 0 * WORDSIZE));
    STR(r2, r10, const(DISP_CTXT_VERIFY_MEASUREMENT + 1 * WORDSIZE));
    STR(r3, r10, const(DISP_CTXT_VERIFY_MEASUREMENT + 2 * WORDSIZE));
    STR(r4, r10, const(DISP_CTXT_VERIFY_MEASUREMENT + 3 * WORDSIZE));
    STR(r5, r10, const(DISP_CTXT_VERIFY_MEASUREMENT + 4 * WORDSIZE));
    STR(r6, r10, const(DISP_CTXT_VERIFY_MEASUREMENT + 5 * WORDSIZE));
    STR(r7, r10, const(DISP_CTXT_VERIFY_MEASUREMENT + 6 * WORDSIZE));
    STR(r8, r10, const(DISP_CTXT_VERIFY_MEASUREMENT + 7 * WORDSIZE));

    MOV(r0, const(encode_mode(User)));
    MSR(spsr_mon, r0);

    assert firstOf2(svcHandled(exstate, pagedb, dispPg)) == tuple(KOM_ERR_SUCCESS,0,0,0,0,0,0,0,0);
    MOV(r0, const(KOM_ERR_SUCCESS));
    MOV(r1, 0);
    MOV(r2, 0);
    MOV(r3, 0);
    MOV(r4, 0);
    MOV(r5, 0);
    MOV(r6, 0);
    MOV(r7, 0);
    MOV(r8, 0);

    ghost var disp := pagedb'[dispPg].entry;
    ghost var pg := extractPage(this.m, dispPg);
    lemma_svc_returning_verify_step1_helper(old(this), pagedb, dispPg, old(this.m), this.m,
        user_words, pagedb', disp, pg);

    assert pageDbCorresponds(this.m, pagedb') by {
        assert pageDbCorrespondsOnly(this.m, pagedb', dispPg) by {
            assert pageDbEntryCorresponds(pagedb'[dispPg],
                                          extractPageDbEntry(this.m, dispPg))
                by { assert GlobalsInvariant(old(this), this);
                     reveal pageDbEntryCorresponds; }
            assert pageContentsCorresponds(dispPg, pagedb'[dispPg], pg)
                by { reveal pageContentsCorresponds; }
        }
        AllButOnePagePreserving(dispPg, old(this), this);
    }
}


procedure svc_returning(
    ghost exstate: state,
    ghost stack_bytes: int,
    ghost pagedb: PageDb,
    ghost dispPg: PageNr)
    returns (
    ghost pagedb': PageDb
    )
    reads
        globals;
    modifies
         r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
         spsr_mon; mem;
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this, stack_bytes);
    requires
        ValidState(exstate) && mode_of_state(exstate) != User;
        isReturningSvc(exstate);
        CoreRegPreservingExcept(exstate, this, set(OSP, OLR));
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        nonStoppedDispatcher(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
    ensures
        lr == old(lr);
        StackPreserving(old(this), this);
        NonStackMemPreserving(old(this), this);
        let tuple := svcHandled(exstate, pagedb, dispPg) in
        let retRegs := firstOf2(tuple) in
        let handled_pagedb := secondOf2(tuple) in
        pagedb' == handled_pagedb && preEntryReturn(old(this), this, retRegs);
{

    LDRglobaladdr(r10, CurDispatcherOp());
    LDRglobal(r10, CurDispatcherOp(), r10, 0);
    assert r10 == page_monvaddr(dispPg);
    // Use r10 to grab DISP_CTXT_USER_WORDS

    addrspace_va_for_page_va(r10, r11, r12, dispPg, pagedb);
    // Use r11 to grab ADDRSPACE_HASH 
    
    assume false;

/*
...

    MOV(r0, 0);
    STR(r0, r2, const(DISPATCHER_ENTERED));

    TODO: Add more stack space
        - precondition on stack_bytes
        - In entry.i.dfy, increase 
            const EXCEPTION_STACK_BYTES:int := 100*WORDSIZE;
*/
    // Store the user provided words to verify
    pagedb' := svc_returning_verify_step0(exstate, stack_bytes, pagedb, dispPg);

    // Fall back position
    svc_returning_default(exstate, stack_bytes, pagedb, dispPg);
    pagedb' := pagedb;
}

procedure {:frame false} svc_handler(ghost pagedb_in: PageDb, ghost dispPg: PageNr)
                            returns (ghost pagedb: PageDb)
    reads
        globals; /* spsr_svc; spsr_abt; spsr_und; */ lr_svc; lr_abt; lr_und;
    modifies
        mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; cpsr; lr; spsr_mon;
    requires
        KomUserEntryPrecondition(this, pagedb_in, dispPg);
        InterruptContinuationPreconditionDef();
        InterruptContinuationInvariantDef();
        mode_of_state(this) == Supervisor && spsr_of_state(this).m == User;
        this.conf.ex == ExSVC;
    ensures
        KomExceptionHandlerInvariant(old(this), pagedb_in, this, dispPg);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    lemma_Establish_InterruptContinuationPrecondition(this, pagedb_in, dispPg);
    switch_to_monitor(Supervisor);
    lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb_in);

    if (r0 == const(KOM_SVC_EXIT)) {
        assert !isReturningSvc(old(this));
        pagedb := fault_exit(ExSVC, old(this), pagedb_in, dispPg);
        ORR(sp, sp, 1); // report that we're done
    } else {
        assert isReturningSvc(old(this));

        // sigh. trigger OReg(x) to see CoreRegPreservingExcept
        assert r9 == OperandContents(this, OReg(R9)) == old(r9);
        assert r10 == OperandContents(this, OReg(R10)) == old(r10);
        assert r11 == OperandContents(this, OReg(R11)) == old(r11);
        assert r12 == OperandContents(this, OReg(R12)) == old(r12);
        assert lr_usr == old(lr_usr) && sp_usr == old(sp_usr);

        pagedb := svc_returning(old(this), EXCEPTION_STACK_BYTES, pagedb_in, dispPg);
        ghost var tuple;
        tuple := svcHandled(old(this), pagedb, dispPg);
        assert pagedb == secondOf2(tuple);
        assert preEntryReturn(old(this), this, firstOf2(tuple));
    }

    assert validExceptionTransition(old(this), pagedb_in, this, pagedb, dispPg)
        by { reveal validExceptionTransition; }
}

procedure {:frame false} abort_handler(
    inline ex: exception,
    ghost pagedb_in: PageDb,
    ghost dispPg: PageNr) returns (ghost pagedb: PageDb)
    reads
        globals; /* spsr_svc; spsr_abt; spsr_und; */ lr_svc; lr_abt; lr_und;
    modifies
        mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; cpsr; lr; spsr_mon;
    requires
        KomUserEntryPrecondition(this, pagedb_in, dispPg);
        InterruptContinuationPreconditionDef();
        InterruptContinuationInvariantDef();
        this.conf.ex == ex && (ex == ExAbt || ex == ExUnd);
        mode_of_state(this) == (if ex == ExAbt then Abort else Undefined);
        spsr_of_state(this).m == User;
    ensures
        KomExceptionHandlerInvariant(old(this), pagedb_in, this, dispPg);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    lemma_Establish_InterruptContinuationPrecondition(this, pagedb_in, dispPg);
    switch_to_monitor(if ex == ExAbt then Abort else Undefined);
    lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb_in);

    pagedb := fault_exit(ex, old(this), pagedb_in, dispPg);
    ORR(sp, sp, 1); // report that we're done

    assert validExceptionTransition(old(this), pagedb_in, this, pagedb, dispPg)
        by { reveal_validExceptionTransition(); }
}

procedure save_disp_context_helper(operand base:reg, ghost dispPg:PageNr)
    requires/ensures
        SaneState(this);
    requires
        @base == OReg(R0);
        base == page_monvaddr(dispPg);
    reads
        globals;
        r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; lr_usr; sp_usr; lr; spsr_mon;
    modifies
        mem; r1;
    ensures
        MemPreservingExcept(old(this), this, old(base) + DISP_CTXT_R1,
                            old(base) + DISP_CTXT_PSR + WORDSIZE);
        let pg := extractPage(this.m, dispPg) in
            pg[old(base) + DISP_CTXT_R1] == old(r1)
            && pg[old(base) + DISP_CTXT_R2] == old(r2)
            && pg[old(base) + DISP_CTXT_R3] == old(r3)
            && pg[old(base) + DISP_CTXT_R4] == old(r4)
            && pg[old(base) + DISP_CTXT_R5] == old(r5)
            && pg[old(base) + DISP_CTXT_R6] == old(r6)
            && pg[old(base) + DISP_CTXT_R7] == old(r7)
            && pg[old(base) + DISP_CTXT_R8] == old(r8)
            && pg[old(base) + DISP_CTXT_R9] == old(r9)
            && pg[old(base) + DISP_CTXT_R10] == old(r10)
            && pg[old(base) + DISP_CTXT_R11] == old(r11)
            && pg[old(base) + DISP_CTXT_R12] == old(r12)
            && pg[old(base) + DISP_CTXT_LR] == old(lr_usr)
            && pg[old(base) + DISP_CTXT_SP] == old(sp_usr)
            && pg[old(base) + DISP_CTXT_PC] == old(lr)
            && pg[old(base) + DISP_CTXT_PSR] == old(spsr_mon);
{
    STR(r1, base, const(DISP_CTXT_R1));
    STR(r2, base, const(DISP_CTXT_R2));
    STR(r3, base, const(DISP_CTXT_R3));
    STR(r4, base, const(DISP_CTXT_R4));
    STR(r5, base, const(DISP_CTXT_R5));
    STR(r6, base, const(DISP_CTXT_R6));
    STR(r7, base, const(DISP_CTXT_R7));
    STR(r8, base, const(DISP_CTXT_R8));
    STR(r9, base, const(DISP_CTXT_R9));
    STR(r10, base, const(DISP_CTXT_R10));
    STR(r11, base, const(DISP_CTXT_R11));
    STR(r12, base, const(DISP_CTXT_R12));
    MRS_STR(lr_usr, base, const(DISP_CTXT_LR), r1);
    MRS_STR(sp_usr, base, const(DISP_CTXT_SP), r1);
    STR(lr, base, const(DISP_CTXT_PC));
    MRS_STR(spsr_mon, base, const(DISP_CTXT_PSR), r1);
}

procedure save_disp_context(inout operand base: reg,
                            ghost ex:exception, ghost exstate:state,
                            ghost dispPg:PageNr, ghost pagedb_in:PageDb)
                        returns  (ghost pagedb:PageDb)
    requires/ensures
        SaneState(this);
    requires
        @base == OReg(R0);
        base == page_monvaddr(dispPg);
        validPageDb(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
        validDispatcherPage(pagedb_in, dispPg);
        ex == exstate.conf.ex && (ex == ExFIQ || ex == ExIRQ);
        ValidState(exstate) && mode_of_state(exstate) == Monitor
            && spsr_of_state(exstate).m == User;
        va_get_sreg(spsr(Monitor), exstate) == spsr_mon;
        forall r :: USER_REGS() ?[r] && r != R0
            ==> va_get_reg(r, exstate) == va_get_reg(r, this);
        ValidMem(sp) && va_get_reg(R0, exstate) == MemContents(this.m, sp);
        lr == TruncateWord(OperandContents(exstate, OLR) - 4);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
    reads
        globals;
        r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; lr_usr; sp_usr; lr; sp; spsr_mon;
    modifies
        mem; r0; r1;
    ensures
        validPageDb(pagedb);
        pagedb == exPageDb(exceptionHandled(exstate, pagedb_in, dispPg));
        pageDbCorresponds(this.m, pagedb);
        MemPreservingExcept(old(this), this, old(base), old(base) + PAGESIZE);
        StackPreserving(old(this), this);
{
    ghost var gr0 := va_get_reg(R0, exstate);
    ghost var orig_disp := pagedb_in[dispPg].entry;
    ghost var orig_pg := extractPage(old(this.m), dispPg);
    assert orig_disp.entrypoint == orig_pg[base + DISPATCHER_ENTRYPOINT]
    by {
        assert pageDbDispatcherCorresponds(dispPg, orig_disp, orig_pg)
            by { reveal pageContentsCorresponds; }
        reveal pageDbDispatcherCorresponds;
    }

    save_disp_context_helper(base, dispPg);
    LDR(r1,sp,0);
    assert r1 == gr0;
    STR(r1, base, const(DISP_CTXT_R0));
    MOV(r1, 1);
    STR(r1, base, const(DISPATCHER_ENTERED));

    assert MemPreservingExcept(old(this), this, old(base), old(base) + DISP_SIZE);

    pagedb := exPageDb(exceptionHandled(exstate, pagedb_in, dispPg));
    lemma_exceptionHandled_validPageDb(exstate, pagedb_in, dispPg);

    ghost var disp := pagedb[dispPg].entry;
    ghost var pg := extractPage(this.m, dispPg);
    assert pageDbDispatcherCorresponds(dispPg, disp, pg) by {
        ghost var ctxt := disp.ctxt;
        ghost var pgbase := page_monvaddr(dispPg);
        assert ctxt == DispatcherContext(user_regs(exstate.regs), old(lr),
                                         old(spsr_mon));
        /*assert orig_disp.entrypoint == disp.entrypoint
            == pg[pgbase + DISPATCHER_ENTRYPOINT];
        assert pg[pgbase + DISP_CTXT_PC] == old(lr)
            == TruncateWord(OperandContents(exstate, OLR) - 4);
        // oh for a calc statement...
        assert pg[pgbase + DISP_CTXT_PSR] == old(spsr_mon)
            == exstate.sregs[spsr(mode_of_state(exstate))];
        assert pg[pgbase + DISP_CTXT_R0] == gr0 == ctxt.regs[R0];
        assert pg[pgbase + DISP_CTXT_LR] == old(lr_usr) == ctxt.regs[LR(User)];
        assert pg[pgbase + DISP_CTXT_SP] == old(sp_usr) == ctxt.regs[SP(User)];
        assert forall r :: USER_REGS() ?[r] && r != R0
            ==> va_get_reg(r, exstate) == va_get_reg(r, old(this)) == ctxt.regs[r];*/
        reveal pageDbDispatcherCorresponds;
    }

    assert pageDbCorresponds(this.m, pagedb) by {
        assert pageDbCorrespondsOnly(this.m, pagedb, dispPg) by {
            assert pageDbEntryCorresponds(pagedb[dispPg],
                                          extractPageDbEntry(this.m, dispPg))
                by { assert GlobalsInvariant(old(this), this);
                     reveal pageDbEntryCorresponds; }
            assert pageContentsCorresponds(dispPg, pagedb[dispPg], pg)
                by { reveal pageContentsCorresponds; }
        }
        AllButOnePagePreserving(dispPg, old(this), this);
    }
}

procedure {:frame false} interrupt_handler(
    inline ex: exception,
    ghost pagedb_in: PageDb,
    ghost dispPg: PageNr) returns (ghost pagedb: PageDb)
    reads
        globals; /* spsr_svc; spsr_abt; spsr_und; */ lr_svc; lr_abt; lr_und;
    modifies
        mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; cpsr; lr; spsr_mon;
    requires
        KomUserEntryPrecondition(this, pagedb_in, dispPg);
        InterruptContinuationInvariantDef();
        this.conf.ex == ex && (ex == ExFIQ || ex == ExIRQ);
        mode_of_state(this) == Monitor;
        !interrupts_enabled(this);
    ensures
        KomInterruptHandlerInvariant(old(this), pagedb_in, this, dispPg);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    // adjust LR for interrupt offset
    SUBWrap(lr, lr, 4);

    // push r0, r1
    SUB(sp, sp, const(2 * WORDSIZE));
    STR(r0, sp, 0);
    STR(r1, sp, const(WORDSIZE));

    assert ParentStackPreserving(old(this), this);

    // store pending interrupt
    inline if (ex == ExFIQ) {
        MOV(r1, const(7*WORDSIZE)); // exception table FIQ vector offset
    } else {
        MOV(r1, const(6*WORDSIZE)); // exception table IRQ vector offset
    }
    LDRglobaladdr(r0, PendingInterruptOp());
    STRglobal(r1, PendingInterruptOp(), r0, 0);

    // figure out where we came from
    MRS(r0, spsr_mon);
    AND(r0, r0, const(ARM_PSR_MODE_MASK));
    assert r0 == psr_mask_mode(old(spsr_mon));

    assert GlobalsPreservingExcept(old(this), this, set(PendingInterruptOp()));
    assert MemPreservingExcept(old(this), this, sp, sp + 2 * WORDSIZE);
    assert forall r :: r != R0 && r != R1 && r != LR(Monitor) && r != SP(Monitor)
        ==> va_get_reg(r, old(this)) == va_get_reg(r, this);

    if (r0 == const(encode_mode(User))) { // we came from user-mode
        assert spsr_of_state(old(this)).m == User;

        // save dispatcher context
        LDRglobaladdr(r0, CurDispatcherOp());
        LDRglobal(r0, CurDispatcherOp(), r0, 0);
        LDR(r1, sp, const(WORDSIZE));
        assert r1 == old(r1);
        lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb_in);
        pagedb := save_disp_context(r0, ex, old(this), dispPg, pagedb_in);

        MOV(r0, const(KOM_ERR_INTERRUPTED));
        MOV(r1, 0);
        assert tuple(r0, r1, pagedb) == exceptionHandled(old(this), pagedb_in, dispPg);

        ADD(sp, sp, const(2 * WORDSIZE));
        assert sp == old(sp);
        assert StackPreserving(old(this), this);
        ORR(sp, sp, 1);

        assert validExceptionTransition(old(this), pagedb_in, this, pagedb, dispPg)
            by { reveal_validExceptionTransition(); }
        assert KomExceptionHandlerInvariant(old(this), pagedb_in, this, dispPg);
    } else { // we came from another exception handler
        assert spsr_of_state(old(this)).m != User;
        assert priv_of_mode(spsr_of_state(old(this)).m) == PL1;

        // restore r0, r1, sp
        LDR(r0, sp, 0);
        LDR(r1, sp, const(WORDSIZE));
        ADD(sp, sp, const(2 * WORDSIZE));
        assert r0 == old(r0) && r1 == old(r1) && sp == old(sp);

        pagedb := pagedb_in;
        lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb);
        assert KomInterruptHandlerInvariant(old(this), pagedb_in, this, dispPg);
    }
}
