include {:verbatim} "kom_common.i.dfy"
include {:verbatim} "bitvectors.i.dfy"
include {:verbatim} "pagedb.i.dfy"
include {:verbatim} "smcapi.i.dfy"
include "ARMdecls.sdfy"
include "kom_utils.sdfy"
include "sha/sha256-api.sdfy"

procedure fetch_l1pte(
    operand l1pt_va:addr,
    operand l1index:reg,
    out operand tmp:reg,
    out operand res:reg,
    ghost pagedb:PageDb,
    ghost l1pg:PageNr)
    requires/ensures
        SaneState(this);
    requires
        DistinctRegOperands(set(@l1pt_va, @l1index, @tmp, @res), 4);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validPageNr(l1pg) && pagedb[l1pg] is PageDbEntryTyped
            && pagedb[l1pg].entry is L1PTable;
        l1pt_va == page_monvaddr(l1pg);
        0 <= l1index < NR_L1PTES;
    reads
        mem;
    ensures
        SmcProcedureInvariant(old(this),this);
        res == 0 <==> pagedb[l1pg].entry.l1pt[old(l1index)] == Nothing;
        res == mkL1Pte(pagedb[l1pg].entry.l1pt[old(l1index)], 0);
{
    reveal pageDbL1PTableCorresponds;
    reveal pageContentsCorresponds;
    lemma_LeftShift4(l1index);
    LSL(tmp, l1index, 4);
    LDR(res, l1pt_va, tmp);
    assert res == MemContents(this.m, l1pteoffset(l1pt_va, l1index, 0));
    assert res == mkL1Pte(pagedb[l1pg].entry.l1pt[l1index], 0);
    reveal BitOr;
}

#verbatim
const MEASURE_STACK_BYTES:int := SHA_BLOCKSIZE * WORDSIZE;
#endverbatim

procedure kom_smc_map_measure_zero(ghost input:seq(int))
    requires/ensures
        SaneState(this);
    reads
        globals;
        sp;
    modifies
        mem; r12;
    requires
        SeqLength(input) == 16;
        forall i :: 2 <= i < 16 ==> input[i] == 0;
        ValidMemRange(sp + 2 * WORDSIZE, sp + 16 * WORDSIZE);
    ensures
        forall i :: ValidMem(i) && !(sp + 2 * WORDSIZE <= i <= sp + 15 * WORDSIZE) ==>
            MemContents(this.m, i) == MemContents(old(this).m, i);
        forall i :: 2 <= i < 16 ==>
            ValidMem(sp + i * WORDSIZE) && AddrMemContents(mem, sp + i * WORDSIZE) == input[i];
{
    MOV(r12, 0);
    STR(r12, sp, const(2 * WORDSIZE));
    STR(r12, sp, const(3 * WORDSIZE));
    STR(r12, sp, const(4 * WORDSIZE));
    STR(r12, sp, const(5 * WORDSIZE));
    STR(r12, sp, const(6 * WORDSIZE));
    STR(r12, sp, const(7 * WORDSIZE));
    STR(r12, sp, const(8 * WORDSIZE));
    STR(r12, sp, const(9 * WORDSIZE));
    STR(r12, sp, const(10 * WORDSIZE));
    STR(r12, sp, const(11 * WORDSIZE));
    STR(r12, sp, const(12 * WORDSIZE));
    STR(r12, sp, const(13 * WORDSIZE));
    STR(r12, sp, const(14 * WORDSIZE));
    STR(r12, sp, const(15 * WORDSIZE));
}

#verbatim
// XXX: cleanmeup: copy-and-paste from exception_handlers.sdfy
lemma lemma_SaneState_implies_SaneShaGlobal(s:state)
    requires SaneState(s);
    ensures  SaneShaGlobal(va_get_globals(s));
{
    var globals := va_get_globals(s);
    reveal_SaneShaGlobal(); 
    assert ValidGlobalStateOpaque(globals) by {
        reveal_ValidGlobalStateOpaque(); 
        assert ValidGlobalState(globals) by {
            reveal_ValidMemState();   // Which we get from ValidState
        }
    }
}
#endverbatim

procedure{:timeLimitMultiplier 2} kom_smc_map_measure(
    operand as_page:reg,
    inout operand metadata0:reg,
    inout operand metadata1:reg,
    ghost pagedb_in:PageDb
    )
    returns (ghost pagedb:PageDb)
    requires/ensures
        SaneState(this);
    requires
        StackBytesRemaining(this, MEASURE_STACK_BYTES + STACKSIZE_SHA_UPDATE * WORDSIZE);
        @as_page == OReg(R1);
        @metadata0 == OReg(R2);
        @metadata1 == OReg(R3);
        wellFormedPageDb(pagedb_in);
        validAddrspacePage(pagedb_in, as_page);
        validPageDb(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
        pagedb_in[as_page].entry.state is InitState;
    reads
        globals;
    modifies
        mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
    ensures
        SmcProcedureInvariant(old(this), this);
        pagedb == updateMeasurement(pagedb_in, old(as_page), seq(old(metadata0), old(metadata1)), seq());
        wellFormedPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    lemma_SaneState_implies_SaneShaGlobal(this);

    SUB(sp, sp, const(MEASURE_STACK_BYTES));

    ghost var metadata := seq(old(metadata0), old(metadata1));
    (ghost var base), (ghost var ctx), (ghost var input), (ghost var trace_in), (ghost var e), pagedb :=
        kom_smc_map_measure_helper1(this, as_page, metadata, pagedb_in);

    page_monvaddr_impl(r0, as_page, r12);
    assert r0 == base;
    LDR(r12, r0, const(ADDRSPACE_HASHED_BLOCK_COUNT));
    ADD(r12, r12, 1);
    STR(r12, r0, const(ADDRSPACE_HASHED_BLOCK_COUNT));

    ADD(r0, r0, const(ADDRSPACE_HASH));
    assert r0 == ctx;

    ghost var input_ptr := sp;
    MOV(r1, sp);

    STR(metadata0, sp, const(0 * WORDSIZE));
    STR(metadata1, sp, const(1 * WORDSIZE));
    kom_smc_map_measure_zero(input);

    ghost var num_blocks := 1; // Number of 64-byte blocks to process
    MOV(r2, 1);

    LDRglobaladdr(lr, K_SHA256s());

    assert (forall j :: 0 <= j < num_blocks*SHA_BLOCKSIZE ==> AddrMemContents(mem, input_ptr + j*WORDSIZE) == input[j]);

    sha256_incremental(trace_in, input);
    exists trace_out ::
    (
        IsCompleteSHA256Trace(trace_out)
     && SHA256TraceIsCorrect(trace_out)
     && SeqLength(trace_out.M) == SeqLength(trace_in.M) + 1
     && trace_in.M == SeqSlice(trace_out.M, 0, SeqLength(trace_in.M))  // trace_in.M is a prefix of trace_out.M
     && (forall i {TStep(i)} :: 0 <= i < 1 
          ==> trace_out.M[SeqLength(trace_in.M) + i] == SeqSlice(input, i*SHA_BLOCKSIZE, (i+1)*SHA_BLOCKSIZE))
     && last(trace_out.H)[0] == AddrMemContents(mem, ctx + 0*WORDSIZE)
     && last(trace_out.H)[1] == AddrMemContents(mem, ctx + 1*WORDSIZE)
     && last(trace_out.H)[2] == AddrMemContents(mem, ctx + 2*WORDSIZE)
     && last(trace_out.H)[3] == AddrMemContents(mem, ctx + 3*WORDSIZE)
     && last(trace_out.H)[4] == AddrMemContents(mem, ctx + 4*WORDSIZE)
     && last(trace_out.H)[5] == AddrMemContents(mem, ctx + 5*WORDSIZE)
     && last(trace_out.H)[6] == AddrMemContents(mem, ctx + 6*WORDSIZE)
     && last(trace_out.H)[7] == AddrMemContents(mem, ctx + 7*WORDSIZE)
    );
    assert trace_out.M[SeqLength(trace_in.M)] == SeqSlice(input, 0, SHA_BLOCKSIZE) by { assert TStep(0); }

    ghost var p := old(as_page);
    kom_smc_map_measure_helper2(pagedb_in, pagedb, e, e.measurement, p, metadata, input, trace_in, trace_out);

    AllButOnePageOrStackPreserving(p, old(this), this);

    ADD(sp, sp, const(MEASURE_STACK_BYTES));

    assert pageDbEntryCorresponds(pagedb[p], extractPageDbEntry(this.m, p)) by
    {
        reveal pageDbEntryCorresponds;
    }

    assert pageContentsCorresponds(p, pagedb[p], extractPage(this.m, p)) by
    {
        reveal pageContentsCorresponds;
        reveal pageDbAddrspaceCorresponds;
    }
}
