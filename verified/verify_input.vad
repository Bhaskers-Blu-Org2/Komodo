include "attest_helpers.vad"

#verbatim

lemma{:fuel AddrMemContentsSeq, 0} lemma_grab_user_words(
    pagedb: PageDb,
    dispPg: PageNr,
    base:word,
    s:state)
    requires SaneState(s);
    requires ValidAddrMemStateOpaque(s.m.addresses);
    requires wellFormedPageDb(pagedb);
    requires validPageDb(pagedb);
    requires pageDbCorresponds(s.m, pagedb);
    requires memContainsPage(extractPage(s.m, dispPg), dispPg);
    requires validDispatcherPage(pagedb, dispPg);
    requires GlobalFullContents(s.m, CurDispatcherOp()) == [page_monvaddr(dispPg)];
    requires ValidMemRange(base, base + SHA_CTXSIZE * WORDSIZE);

    requires AddrMemContentsSeq(s.m.addresses, base, SHA_CTXSIZE) 
          == AddrMemContentsSeq(s.m.addresses, page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS, SHA_CTXSIZE);

//    requires MemContents(s.m, base + 0 * WORDSIZE) 
//          == MemContents(s.m, page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS + 0 * WORDSIZE);
//    requires MemContents(s.m, base + 1 * WORDSIZE) 
//          == MemContents(s.m, page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS + 1 * WORDSIZE);
//    requires MemContents(s.m, base + 2 * WORDSIZE) 
//          == MemContents(s.m, page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS + 2 * WORDSIZE);
//    requires MemContents(s.m, base + 3 * WORDSIZE) 
//          == MemContents(s.m, page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS + 3 * WORDSIZE);
//    requires MemContents(s.m, base + 4 * WORDSIZE) 
//          == MemContents(s.m, page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS + 4 * WORDSIZE);
//    requires MemContents(s.m, base + 5 * WORDSIZE) 
//          == MemContents(s.m, page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS + 5 * WORDSIZE);
//    requires MemContents(s.m, base + 6 * WORDSIZE) 
//          == MemContents(s.m, page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS + 6 * WORDSIZE);
//    requires MemContents(s.m, base + 7 * WORDSIZE) 
//          == MemContents(s.m, page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS + 7 * WORDSIZE);

    ensures AddrMemContentsSeq(s.m.addresses, base, SHA_CTXSIZE) == pagedb[dispPg].entry.verify_words;
{
    assert validPageNr(dispPg);     // OBSERVE: Trigger pageDbCorresponds
    assert pageContentsCorresponds(dispPg, pagedb[dispPg], extractPage(s.m, dispPg));
    assert pageDbDispatcherCorresponds(dispPg, pagedb[dispPg].entry, extractPage(s.m, dispPg)) by
        { reveal pageContentsCorresponds(); }

    var dp := page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS;
    var page := extractPage(s.m, dispPg);
    lemma_WordAlignedAdd(page_monvaddr(dispPg), DISP_CTXT_USER_WORDS);
    forall i | 0 <= i < SHA_CTXSIZE
        ensures AddrMemContentsSeq(s.m.addresses, base, SHA_CTXSIZE)[i] == pagedb[dispPg].entry.verify_words[i];
    {
        lemma_MulModZero(i, WORDSIZE); // Prove: assert WordAligned(i * WORDSIZE);
        lemma_WordAlignedAdd(dp, WordsToBytes(i));
        calc {
            AddrMemContentsSeq(s.m.addresses, base, SHA_CTXSIZE)[i];
            AddrMemContentsSeq(s.m.addresses, dp, SHA_CTXSIZE)[i];
            AddrMemContents(s.m.addresses, dp + i * WORDSIZE);
            page[dp + i*WORDSIZE]; 
            { reveal pageContentsCorresponds(); reveal pageDbDispatcherCorresponds(); reveal pageDbDispatcherVerifyStateCorresponds(); }
            pagedb[dispPg].entry.verify_words[i];
        }
    }
}

lemma{:fuel AddrMemContentsSeq, 0} lemma_grab_measurement(
    pagedb: PageDb,
    dispPg: PageNr,
    base:word,
    s:state)
    requires SaneState(s);
    requires ValidAddrMemStateOpaque(s.m.addresses);
    requires wellFormedPageDb(pagedb);
    requires validPageDb(pagedb);
    requires pageDbCorresponds(s.m, pagedb);
    requires memContainsPage(extractPage(s.m, dispPg), dispPg);
    requires validDispatcherPage(pagedb, dispPg);
    requires GlobalFullContents(s.m, CurDispatcherOp()) == [page_monvaddr(dispPg)];
    requires ValidMemRange(base, base + SHA_CTXSIZE * WORDSIZE);

    requires AddrMemContentsSeq(s.m.addresses, base, SHA_CTXSIZE) 
          == AddrMemContentsSeq(s.m.addresses, page_monvaddr(dispPg) + DISP_CTXT_VERIFY_MEASUREMENT, SHA_CTXSIZE);

    ensures AddrMemContentsSeq(s.m.addresses, base, SHA_CTXSIZE) == pagedb[dispPg].entry.verify_measurement;
{
    assert validPageNr(dispPg);     // OBSERVE: Trigger pageDbCorresponds
    assert pageContentsCorresponds(dispPg, pagedb[dispPg], extractPage(s.m, dispPg));
    assert pageDbDispatcherCorresponds(dispPg, pagedb[dispPg].entry, extractPage(s.m, dispPg)) by
        { reveal pageContentsCorresponds(); }

    var dp := page_monvaddr(dispPg) + DISP_CTXT_VERIFY_MEASUREMENT;
    var page := extractPage(s.m, dispPg);
    lemma_WordAlignedAdd(page_monvaddr(dispPg), DISP_CTXT_VERIFY_MEASUREMENT);
    forall i | 0 <= i < SHA_CTXSIZE
        ensures AddrMemContentsSeq(s.m.addresses, base, SHA_CTXSIZE)[i] == pagedb[dispPg].entry.verify_measurement[i];
    {
        lemma_MulModZero(i, WORDSIZE); // Prove: assert WordAligned(i * WORDSIZE);
        lemma_WordAlignedAdd(dp, WordsToBytes(i));
        calc {
            AddrMemContentsSeq(s.m.addresses, base, SHA_CTXSIZE)[i];
            AddrMemContentsSeq(s.m.addresses, dp, SHA_CTXSIZE)[i];
            AddrMemContents(s.m.addresses, WordOffset(dp, i));
            page[WordOffset(dp, i)]; 
            { reveal pageContentsCorresponds(); reveal pageDbDispatcherCorresponds(); reveal pageDbDispatcherVerifyStateCorresponds(); }
            pagedb[dispPg].entry.verify_measurement[i];
        }
    }
}
#endverbatim

procedure arrange_user_words_in_memory(
    ghost pagedb: PageDb,
    ghost dispPg: PageNr)
    reads
        sp; globals;
    modifies 
        mem; r1; r2; r3; r4; r10;
    requires/ensures
        SaneState(this);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        ValidMemRange(sp + SHA_CTXSIZE * WORDSIZE, sp + 2 * SHA_CTXSIZE * WORDSIZE);
        sp + 2 * SHA_CTXSIZE * WORDSIZE <= StackBase();           
    requires
        validDispatcherPage(pagedb, dispPg);
    ensures
        AddrMemPreservingExcept(old(mem), mem, sp + SHA_CTXSIZE * WORDSIZE, sp + (SHA_CTXSIZE + 8) * WORDSIZE);
        AddrMemContentsSeq(mem, sp + SHA_CTXSIZE * WORDSIZE, SHA_CTXSIZE) == pagedb[dispPg].entry.verify_words;
        r1 == sp + SHA_CTXSIZE * WORDSIZE;
{
    assert ValidAddrMemStateOpaque(mem);
    ghost var base := page_monvaddr(dispPg);
    ghost var page := extractPage(this.m, dispPg);

    LDRglobaladdr(r10, CurDispatcherOp());
    LDRglobal(r10, CurDispatcherOp(), r10, 0);
    assert r10 == page_monvaddr(dispPg);
    // Use r10 to grab DISP_CTXT_USER_WORDS

    ghost var offset := r10 + DISP_CTXT_USER_WORDS;

    // Arrange the user_words on the stack
    lemma_WordAlignedAdd(sp, WordsToBytes(SHA_CTXSIZE));
    ADD(r1, sp, const(WordsToBytes(SHA_CTXSIZE)));
    ADD(r2, r10, const(DISP_CTXT_USER_WORDS));  // Construct a pointer to user_words
    MOV(r3, const(WordsToBytes(SHA_CTXSIZE)));         // Size arg to memcpy
    ghost var pre_memcpy_state := this;
    memcpy_bare(r1, r2, r3, r4);
    lemma_memset_result(old(this.m), this.m, offset, r1, SHA_CTXSIZE);

    assert AddrMemContentsSeq(mem, r1, SHA_CTXSIZE) 
          == AddrMemContentsSeq(old(mem), page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS, SHA_CTXSIZE);
    assert AddrMemContentsSeq(old(mem), page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS, SHA_CTXSIZE)
        == AddrMemContentsSeq(mem, page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS, SHA_CTXSIZE) by {
            lemma_MemPreservingExcept_implies_AddrMemPreservingExcept(pre_memcpy_state, this, r1, r1 + SHA_CTXSIZE * WORDSIZE);
            lemma_AddrMemContentsSeq_framing1(pre_memcpy_state.m.addresses, mem,
                                              page_monvaddr(dispPg) + DISP_CTXT_USER_WORDS, SHA_CTXSIZE, 
                                              r1, r1 + SHA_CTXSIZE * WORDSIZE);
           }

    lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb);

    assert r10 == page_monvaddr(dispPg);
    lemma_grab_user_words(pagedb, dispPg, r1, this);

    assert {:split_here} true;
}


procedure arrange_verify_measurement_in_memory(
    ghost pagedb: PageDb,
    ghost dispPg: PageNr)
    reads
        sp; globals;
    modifies 
        mem; r1; r2; r3; r4; r10;
    requires/ensures
        SaneState(this);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        ValidMemRange(sp + 2*SHA_CTXSIZE * WORDSIZE, sp + 3 * SHA_CTXSIZE * WORDSIZE);
        sp + 3 * SHA_CTXSIZE * WORDSIZE <= StackBase();           
    requires
        validDispatcherPage(pagedb, dispPg);
    ensures
        AddrMemPreservingExcept(old(mem), mem, sp + 2 * SHA_CTXSIZE * WORDSIZE, sp + 3 * SHA_CTXSIZE * WORDSIZE);
        AddrMemContentsSeq(mem, sp + 2 * SHA_CTXSIZE * WORDSIZE, SHA_CTXSIZE) == pagedb[dispPg].entry.verify_measurement;
        r1 == sp + 2 * SHA_CTXSIZE * WORDSIZE;
{
    assert ValidAddrMemStateOpaque(mem);
    ghost var base := page_monvaddr(dispPg);
    ghost var page := extractPage(this.m, dispPg);

    LDRglobaladdr(r10, CurDispatcherOp());
    LDRglobal(r10, CurDispatcherOp(), r10, 0);
    assert r10 == page_monvaddr(dispPg);
    // Use r10 to grab DISP_CTXT_USER_WORDS

    ghost var offset := r10 + DISP_CTXT_VERIFY_MEASUREMENT;

    // Arrange the measurement on the stack
    lemma_WordAlignedAdd(sp, WordsToBytes(2 * SHA_CTXSIZE));
    ADD(r1, sp, const(WordsToBytes(2 * SHA_CTXSIZE)));
    ADD(r2, r10, const(DISP_CTXT_VERIFY_MEASUREMENT));  // Construct a pointer to measurement 
    MOV(r3, const(WordsToBytes(SHA_CTXSIZE)));         // Size arg to memcpy
    ghost var pre_memcpy_state := this;
    memcpy_bare(r1, r2, r3, r4);
    lemma_memset_result(old(this.m), this.m, offset, r1, SHA_CTXSIZE);

    assert AddrMemContentsSeq(mem, r1, SHA_CTXSIZE) 
          == AddrMemContentsSeq(old(mem), page_monvaddr(dispPg) + DISP_CTXT_VERIFY_MEASUREMENT, SHA_CTXSIZE);
    assert AddrMemContentsSeq(old(mem), page_monvaddr(dispPg) + DISP_CTXT_VERIFY_MEASUREMENT, SHA_CTXSIZE)
        == AddrMemContentsSeq(mem, page_monvaddr(dispPg) + DISP_CTXT_VERIFY_MEASUREMENT, SHA_CTXSIZE) by {
            lemma_MemPreservingExcept_implies_AddrMemPreservingExcept(pre_memcpy_state, this, r1, r1 + SHA_CTXSIZE * WORDSIZE);
            lemma_AddrMemContentsSeq_framing1(pre_memcpy_state.m.addresses, mem,
                                              page_monvaddr(dispPg) + DISP_CTXT_VERIFY_MEASUREMENT, SHA_CTXSIZE, 
                                              r1, r1 + SHA_CTXSIZE * WORDSIZE);
           }

    lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb);

    assert r10 == page_monvaddr(dispPg);
    lemma_grab_measurement(pagedb, dispPg, r1, this);

    assert {:split_here} true;
}


procedure{:timeLimitMultiplier 2} arrange_verification_input(
    ghost pagedb: PageDb,
    ghost dispPg: PageNr
    ) 
    reads
        globals; sp; r5; r6; r7; r8;
    modifies
        mem; r1; r2; r3; r4; r10; r11; r12;
    requires/ensures
        SaneState(this);
        ValidMemRange(sp + SHA_CTXSIZE * WORDSIZE, sp + (SHA_CTXSIZE + 3 * SHA_CTXSIZE) * WORDSIZE);
    requires
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        nonStoppedDispatcher(pagedb, dispPg);

        //r11 == page_monvaddr(pagedb[dispPg].addrspace);
        StackLimit() <= sp && sp + (SHA_CTXSIZE + 3 * SHA_CTXSIZE) * WORDSIZE <= StackBase();           
    ensures
        AddrMemPreservingExcept(old(mem), mem, sp + SHA_CTXSIZE * WORDSIZE, sp + (SHA_CTXSIZE + 3 * SHA_CTXSIZE) * WORDSIZE);
        AddrMemContentsSeq(mem, sp + SHA_CTXSIZE * WORDSIZE, 3 * SHA_CTXSIZE) == 
            pagedb[dispPg].entry.verify_words
          + pagedb[dispPg].entry.verify_measurement
          + SeqRepeat(8, 0);
        r1 == sp + 3*SHA_CTXSIZE * WORDSIZE; 
{
    ghost var offset_sp := sp + SHA_CTXSIZE * WORDSIZE;

    // Arrange the user words in memory after the gap for the MAC output
    arrange_user_words_in_memory(pagedb, dispPg);
    ghost var user_words_mem;
    user_words_mem := mem;
    lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb);

    // Arrange the enclave measurement 
    arrange_verify_measurement_in_memory(pagedb, dispPg);
    ghost var measurement_mem;
    measurement_mem := mem;

    // Fill in some zeroes
    ADD(r1, r1, const(SHA_CTXSIZE * WORDSIZE)); // Construct a pointer for the next slot on the stack
    assert r1 == sp + 3 * SHA_CTXSIZE * WORDSIZE;
    calc {
        true;
        ValidMemRange(sp + SHA_CTXSIZE * WORDSIZE, sp + (SHA_CTXSIZE + 3 * SHA_CTXSIZE) * WORDSIZE);
            { lemma_ValidMemRange_offset(sp + SHA_CTXSIZE * WORDSIZE, 3 * SHA_CTXSIZE, 2 * SHA_CTXSIZE); }
        ValidMemRange(sp + 3 * SHA_CTXSIZE * WORDSIZE, sp + 4 * SHA_CTXSIZE * WORDSIZE);
        ValidMemRange(r1, r1 + SHA_CTXSIZE * WORDSIZE);
    }
    zero_pad_memory();
    
    calc {
        AddrMemContentsSeq(mem, offset_sp, 3 * SHA_CTXSIZE);
            { lemma_arrange_attestation_input_helper(user_words_mem, measurement_mem, mem, offset_sp,
                                                      pagedb[dispPg].entry.verify_words,
                                                      pagedb[dispPg].entry.verify_measurement); }
        pagedb[dispPg].entry.verify_words
      + pagedb[dispPg].entry.verify_measurement
      + SeqRepeat(8, 0);
    }
    assert {:split_here} true;
}
