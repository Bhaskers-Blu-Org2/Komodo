procedure foo(inout{:register op_r(0)} s1:int, out{:register op_r(1)} s2:int, out{:register op_r(2)} tmp:int)
  requires/ensures
    ValidState(this);
    ValidMem(this, Address(s1));
    ValidMem(this, Address(s2));
    ValidDestinationOperand(this, @tmp);
    isUInt32(s1);
    isUInt32(s2);
    isUInt32(tmp);
    1 <= s1;
  ensures
    addrval(this, s1) == addrval(this, s2);
{
  LDR(tmp, s1, 0); 
  assert eval_mem(this, Address(s1)) == tmp;
  STR(tmp, s2, 0);  
  assert eval_mem(this, Address(s2)) == tmp;
  assert eval_mem(this, Address(s2)) == eval_mem(this, Address(s1));
  assert addrval(this, s1) == addrval(this, s2);
}

procedure main(inout{:register op_r(0)} s1:int, out{:register op_r(1)} s2:int,
    out{:register op_r(2)} tmp:int)
  requires/ensures
    ValidState(this);
    ValidMem(this, Address(s1));
    ValidMem(this, Address(s2));
    ValidDestinationOperand(this, @tmp);
    isUInt32(s1);
    isUInt32(s2);
    isUInt32(tmp);
    1 <= s1;
{
  foo(s1, s2, tmp);
}

#verbatim
method Main()
{
  printHeader();
  var n := printCode(sp_code_main(), 0);
  printFooter();
}
#endverbatim

