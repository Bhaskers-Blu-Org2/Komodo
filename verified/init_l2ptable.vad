include {:verbatim} "kom_common.i.dfy"
include {:verbatim} "pagedb.i.dfy"
include {:verbatim} "smcapi.i.dfy"
include {:verbatim} "bitvectors.i.dfy"
include {:verbatim} "ptebits.i.dfy"

include "valedecls.vad"
include "kom_utils.vad"
include "allocate_page.vad"
include "memset.vad"
include "map_utils.vad"

#verbatim
lemma pa_implies_modl2p(p:word)
    requires PageAligned(p)
    ensures  p % ARM_L2PTABLE_BYTES == 0
{
    assert p % PAGESIZE == 0 by { reveal PageAligned(); }
    lemma_PageAlignedImplies1KAligned(p);
}

lemma SameEntriesImpliesPageDbCorresponds(s:memstate, p: PageNr,
                                          db1: PageDb, db2: PageDb)
    requires SaneMem(s)
    requires validPageNr(p)
    requires wellFormedPageDb(db1) && wellFormedPageDb(db2)
    requires pageDbCorresponds(s, db1) || pageDbCorrespondsOnly(s, db1, p)
    requires db1[p] == db2[p]
    ensures pageDbCorrespondsOnly(s, db2, p)
{
}

lemma lemma_SecurePage(pagebase:word)
    requires SaneConstants()
    requires PageAligned(pagebase) && address_is_secure(pagebase)
    ensures ValidMemRange(pagebase, pagebase + PAGESIZE)
{
    var lower := KOM_DIRECTMAP_VBASE + SecurePhysBase();
    var upper := lower + KOM_SECURE_RESERVE;
    reveal PageAligned();
    assert PageAligned(lower);
    assert PageAligned(upper);
    assert lower <= pagebase < upper;
    assert pagebase + PAGESIZE <= upper;
}
#endverbatim

// updates portion of install_l1ptes
procedure install_l1ptes'(
    operand l1base:addr,
    inout operand l2base:addr,
    inout operand l1index:reg,
    ghost l2pg:PageNr)
    requires/ensures
        SaneState(this);
    requires
        @l1base == OReg(R7) && @l2base == OReg(R4) && @l1index == OReg(R5);
        PageAligned(l1base) && address_is_secure(l1base);
        validPageNr(l2pg) && l2base == page_paddr(l2pg);
        0 <= l1index < NR_L1PTES;
    modifies
        mem;
    ensures
        SmcProcedureInvariant(old(this),this);
        MemPreservingExcept(old(this),this, l1base + old(l1index) * 16,
                            l1base + (old(l1index) + 1) * 16);
        ValidMemRange(old(l1base) + old(l1index) * 16, old(l1base) + old(l1index + 1) * 16);
        forall i :: 0 <= i < 4 ==>
            MemContents(this.m, old(l1base) + old(l1index) * 16 + i*4)
                == mkL1Pte(Just(l2pg), i);
{
    lemma_SecurePage(l1base);

    lemma_LeftShift4(l1index);
    LSL(l1index, l1index, 4);
    assert l1index == old(l1index) * 16;

    pa_implies_modl2p(old(l2base));
    lemma_ARM_L1PTE_Dual(old(l2base));
    ORR(l2base, l2base, 1);
    assert l2base == mkL1Pte(Just(l2pg), 0);
    lemma_WordAlignedAdd(l1base, l1index);
    STR(l2base, l1base, l1index);

    assert RegPreservingExcept(old(this),this,set(@l1index, @l2base));

    ADD(l1index, l1index, 4);
    assert l1index == old(l1index) * 16 + WordsToBytes(1);
    lemma_ARM_L1PTE_Dual(old(l2base) + 1 * ARM_L2PTABLE_BYTES);
    ADD(l2base, l2base, const(ARM_L2PTABLE_BYTES));
    assert l2base == mkL1Pte(Just(l2pg), 1);
    STR(l2base, l1base, l1index);

    assert RegPreservingExcept(old(this),this,set(@l1index, @l2base));

    ADD(l1index, l1index, 4);
    assert l1index == old(l1index) * 16 + WordsToBytes(2);
    lemma_ARM_L1PTE_Dual(old(l2base) + 2 * ARM_L2PTABLE_BYTES);
    ADD(l2base, l2base, const(ARM_L2PTABLE_BYTES));
    assert l2base == mkL1Pte(Just(l2pg), 2);
    STR(l2base, l1base, l1index);

    assert RegPreservingExcept(old(this),this,set(@l1index, @l2base));

    ADD(l1index, l1index, 4);
    assert l1index == old(l1index) * 16 + WordsToBytes(3);
    lemma_ARM_L1PTE_Dual(old(l2base) + 3 * ARM_L2PTABLE_BYTES);
    ADD(l2base, l2base, const(ARM_L2PTABLE_BYTES));
    assert l2base == mkL1Pte(Just(l2pg), 3);
    STR(l2base, l1base, l1index);
}

procedure install_l1ptes(
    operand l1pt_va:addr,
    inout operand l2_pg:reg,
    inout operand l1index:reg,
    out operand tmp:reg,
    ghost pagedb_in:PageDb,
    ghost as_pg:PageNr,
    ghost l1pg:PageNr) returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
    requires
        @l1pt_va == OReg(R7) && @l2_pg == OReg(R4) && @l1index == OReg(R5)
            && @tmp == OReg(R8);
        validPageDb(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
        validAddrspacePage(pagedb_in, as_pg) && !stoppedAddrspace(pagedb_in[as_pg]);
        l1pg == pagedb_in[as_pg].entry.l1ptnr;
        pagedb_in[l1pg] is PageDbEntryTyped && pagedb_in[l1pg].entry is L1PTable;
        l1pt_va == page_monvaddr(l1pg);
        validPageNr(l2_pg);
        0 <= l1index < NR_L1PTES;
    reads
        globals;
    modifies
        mem;
    ensures
        SmcProcedureInvariant(old(this),this);
        MemPreservingExcept(old(this),this, l1pt_va + old(l1index) * 16,
                            l1pt_va + (old(l1index) + 1) * 16);
        pagedb == installL1PTEInPageDb(pagedb_in, l1pg, old(l2_pg), old(l1index));
        pageDbCorresponds(this.m, pagedb);
{
    pagedb := pagedb_in;

    ghost var oldpg := extractPage(old(this).m, l1pg);
    forall :: pageDbL1PTableCorresponds(l1pg, pagedb[l1pg].entry, oldpg)
    {
        reveal pageContentsCorresponds;
    }

    ghost var oldl1pt := pagedb[l1pg].entry;
    ghost var newl1pt := installL1PTE(oldl1pt, l2_pg, l1index);
    assert forall i :: 0 <= i < NR_L1PTES && i != l1index
        ==> newl1pt.l1pt[i] == oldl1pt.l1pt[i];

    ghost var l2base := page_paddr(l2_pg);
    page_paddr_impl(l2_pg, l2_pg, tmp);
    assert l2_pg == l2base;
    install_l1ptes'(l1pt_va, l2_pg, l1index, old(l2_pg));

    ghost var pg := extractPage(this.m, l1pg);
    forall :: pageDbL1PTableCorresponds(l1pg, newl1pt, pg)
    {
        assert forall i :: 0 <= i < 4
            ==> pg[l1pteoffset(l1pt_va, old(l1index), i)]
                    == mkL1Pte(Just(old(l2_pg)), i);
        assert forall i, j :: 0 <= i < NR_L1PTES && 0 <= j < 4 && i != old(l1index)
            ==> (let o := l1pteoffset(l1pt_va, i, j) in pg[o] == oldpg[o]);
        reveal pageDbL1PTableCorresponds;
    }

    pagedb := installL1PTEInPageDb(pagedb, l1pg, old(l2_pg), old(l1index));

    forall :: pageDbCorrespondsOnly(this.m, pagedb, l1pg)
    {
        assert pageContentsCorresponds(l1pg, pagedb_in[l1pg], oldpg);
        assert pagedb[l1pg] == pagedb_in[l1pg].(entry := newl1pt);
        reveal pageContentsCorresponds;
        assert pageContentsCorresponds(l1pg, pagedb[l1pg], pg);
        reveal pageDbEntryCorresponds;
    }

    forall p :| validPageNr(p) && p != l1pg :: pageDbCorrespondsOnly(this.m, pagedb, p)
    {
        AllButOnePagePreserving(l1pg, old(this), this);
        assert pageDbCorrespondsOnly(this.m, pagedb_in, p);
        SameEntriesImpliesPageDbCorresponds(this.m, p, pagedb_in, pagedb);
    }
}

procedure init_l2ptable_success(
    inout operand l2_pg:reg, // trashed
    operand as_pg:reg,
    inout operand l1index:reg, // trashed
    out operand tmp1:reg,
    out operand tmp2:reg,
    out operand tmp3:reg,
    ghost pagedb_in: PageDb,
    ghost l1pg: PageNr) returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
    requires
        @l2_pg == OReg(R4) && @as_pg == OReg(R2) && @l1index == OReg(R5);
        @tmp1 == OReg(R6) && @tmp2 == OReg(R7) && @tmp3 == OReg(R8);
        validPageNr(l2_pg);
        0 <= l1index < NR_L1PTES;
        validPageDb(pagedb_in);
        validAddrspacePage(pagedb_in, as_pg) && !stoppedAddrspace(pagedb_in[as_pg]);
        l1pg == pagedb_in[as_pg].entry.l1ptnr;
        pagedb_in[l1pg] is PageDbEntryTyped && pagedb_in[l1pg].entry is L1PTable;
        pagedb_in[l2_pg] == PageDbEntryTyped(as_pg, L2PTable(SeqRepeat(NR_L2PTES, NoMapping)));
        pageDbCorrespondsExcluding(this.m, pagedb_in, l2_pg);
        pageDbEntryCorresponds(pagedb_in[l2_pg], extractPageDbEntry(this.m, l2_pg));
    reads
        globals;
    modifies
        mem;
    ensures
        SmcProcedureInvariant(old(this),this);
        //PagePreservingExcept(old(this),this, set(l1pg, l2_pg));
        pagedb == installL1PTEInPageDb(pagedb_in, l1pg, old(l2_pg), old(l1index));
        pageDbCorresponds(this.m, pagedb);
{
    pagedb := pagedb_in;

    // update L2 page contents
    page_monvaddr_impl(tmp1, l2_pg, tmp2);
    tmp2 := 0;
    tmp3 := const(PAGESIZE);
    memset(tmp1, tmp2, tmp3);

    ghost var pg := extractPage(this.m, l2_pg);
    ghost var newl2pt := L2PTable(SeqRepeat(NR_L2PTES, NoMapping));
    assert pageDbCorrespondsOnly(this.m, pagedb, l2_pg)
    by {
        assert pageDbL2PTableCorresponds(l2_pg, newl2pt, pg)
        by {
            assert forall m:addr :: addrInPage(m, l2_pg) ==> pg[m] == 0;
            reveal pageDbL2PTableCorresponds;
        }
        reveal pageContentsCorresponds;
    }
    AllButOnePagePreserving(l2_pg, old(this), this);
    assert pageDbCorresponds(this.m, pagedb);
    ghost var tmpstate := this;

    // update L1 PTE
    page_monvaddr_impl(tmp1, as_pg, tmp2);
    LDR(tmp2, tmp1, const(ADDRSPACE_L1PT));

    assert as_pg == old(as_pg);
    assert tmp2 == page_monvaddr(pagedb[as_pg].entry.l1ptnr)
    by {
        assert AllMemInvariant(tmpstate, this);
        assert pageDbCorrespondsOnly(this.m, pagedb, as_pg);
        assert validAddrspacePage(pagedb, as_pg);
        reveal pageContentsCorresponds;
        assert pageContentsCorresponds(as_pg, pagedb[as_pg],
                                       extractPage(this.m, as_pg));
        reveal pageDbAddrspaceCorresponds;
    }

    pagedb := install_l1ptes(tmp2, l2_pg, l1index, tmp3, pagedb, old(as_pg), l1pg);
    AllButOnePagePreserving(l1pg, tmpstate, this);
}

procedure kom_smc_init_l2ptable(
    operand pagenr:reg,
    operand as_page:reg,
    operand l1index:reg,
    operand pagedb_base:reg,
    out operand err:reg,
    ghost pagedb_in: PageDb) returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
    requires
        @err == OReg(R0);
        @pagenr == OReg(R1) && @as_page == OReg(R2) && @l1index == OReg(R3);
        @pagedb_base == OReg(R12);
        pagedb_base == AddressOfGlobal(PageDb());
        validPageDb(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
    modifies
        globals; mem; r4; r5; r6; r7; r8;
    ensures
        SmcProcedureInvariant(old(this),this);
        tuple(pagedb, err)
            == old(smc_initL2PTable_premium(pagedb_in, pagenr, as_page, l1index));
        pageDbCorresponds(this.m, pagedb);
{
    ghost var specResult := smc_initL2PTable(pagedb_in, pagenr, as_page, l1index);
    pagedb := pagedb_in;

    if (l1index >= const(NR_L1PTES)) {
        err := const(KOM_ERR_INVALID_MAPPING);
        assert err == specErr(specResult);
    } else if (as_page >= const(KOM_SECURE_NPAGES)) {
        err := const(KOM_ERR_INVALID_ADDRSPACE);
        assert err == specErr(specResult);
    } else {
        load_page_type(as_page, pagedb_base, r4, r4, pagedb);

        if (r4 != const(KOM_PAGE_ADDRSPACE)) {
            err := const(KOM_ERR_INVALID_ADDRSPACE);
            assert err == specErr(specResult);
        } else {
            assert validAddrspacePage(pagedb, old(as_page)) by {
                assert isAddrspace(pagedb, old(as_page));
            }

            ghost var l1pg := pagedb[old(as_page)].entry.l1ptnr;

            // check for stopped addrspace
            page_monvaddr_impl(r4, as_page, r5);
            LDR(r5, r4, const(ADDRSPACE_STATE));
            assert r5 == pageDbAddrspaceStateVal(pagedb[as_page].entry.state)
            by {
                reveal pageContentsCorresponds;
                reveal pageDbAddrspaceCorresponds;
            }
            if (r5 != const(KOM_ADDRSPACE_INIT)) {
                err := const(KOM_ERR_ALREADY_FINAL);
                assert err == specErr(specResult);
            } else {
                // check for L1 index in use
                LDR(r4, r4, const(ADDRSPACE_L1PT));

                assert r4 == page_monvaddr(l1pg)
                by {
                    assert pageDbCorrespondsOnly(this.m, pagedb, old(as_page));
                    assert validAddrspacePage(pagedb, old(as_page));
                    reveal pageContentsCorresponds;
                    assert pageContentsCorresponds(old(as_page),
                            pagedb[old(as_page)], extractPage(this.m, old(as_page)));
                    reveal pageDbAddrspaceCorresponds;
                }

                assert pagedb[l1pg] is PageDbEntryTyped
                    && pagedb[l1pg].entry is L1PTable
                    && wellFormedPageDbEntryTyped(pagedb[l1pg].entry)
                by {
                    assert isAddrspace(pagedb, old(as_page));
                    assert !stoppedAddrspace(pagedb[old(as_page)]);
                    reveal validPageDb;
                }

                fetch_l1pte(r4, l1index, r5, r6, pagedb, l1pg);
                if (r6 != 0) {
                    assert l1indexInUse(pagedb, old(as_page), old(l1index));
                    err := const(KOM_ERR_ADDRINUSE);
                    assert err == specErr(specResult);
                } else {
                    ghost var emptyptes := SeqRepeat(NR_L2PTES, NoMapping);
                    ghost var entry := PageDbEntryTyped(old(as_page), L2PTable(emptyptes));

                    pagedb := allocate_page(pagenr, as_page,
                                        const(KOM_PAGE_L2PTABLE),
                                        pagedb_base, r4, r5, err, pagedb, entry);

                    assert err == specErr(specResult);
                    if (err == const(KOM_ERR_SUCCESS)) {
                        r4 := pagenr;
                        r5 := l1index;
                        pagedb := init_l2ptable_success(r4, as_page, r5, r6, r7, r8,
                                                        pagedb, l1pg);
                        assert pagedb == specPageDb(specResult);
                    }
                }
            }
        }
    }

    assert err == specErr(specResult);
    assert err != KOM_ERR_SUCCESS ==> pagedb == pagedb_in;
    reveal smc_initL2PTable_premium;
}
