include {:verbatim} "kom_common.i.dfy"
include {:verbatim} "pagedb.i.dfy"
include {:verbatim} "smcapi.i.dfy"

include "valedecls.vad"
include "kom_utils.vad"
include "allocate_page.vad"
include "map_common.vad"

#verbatim
lemma lemma_preserve_contentsOfPhysPage(s1:state, s2:state, p:word)
    requires SaneConstants()
    requires ValidState(s1) && ValidState(s2)
    requires InsecureMemInvariant(s1, s2)
    requires physPageIsInsecureRam(p)
    ensures contentsOfPhysPage(s1, p) == contentsOfPhysPage(s2, p)
{
    // REVIEW: having this as a separate lemma seemed to speed up map_secure_success,
    // and this lemma by itself has timed out before.  We might consider hiding
    // one or more of the definitions above.
    assert |contentsOfPhysPage(s1, p)| == |contentsOfPhysPage(s2, p)|
        == PAGESIZE/WORDSIZE;
    var base := p * PAGESIZE + KOM_DIRECTMAP_VBASE;
    assert PageAligned(base) by { reveal_PageAligned(); }
    forall i | 0 <= i < PAGESIZE/WORDSIZE
        ensures contentsOfPhysPage(s1, p)[i] == contentsOfPhysPage(s2, p)[i]
    {
        calc {
             contentsOfPhysPage(s1, p)[i];
             MemContents(s1.m, WordOffset(base, i));
             {
                // help trigger InsecureMemInvariant
                assert base - KOM_DIRECTMAP_VBASE < MonitorPhysBase();
                assert WordOffset(base, i) - KOM_DIRECTMAP_VBASE < MonitorPhysBase()
                    by { reveal PageAligned(); }
             }
             MemContents(s2.m, WordOffset(base, i));
             contentsOfPhysPage(s2, p)[i];
         }
    }
}
#endverbatim

procedure map_secure_update(
    inout operand page:reg,
    operand as_page:reg,
    operand mapping:reg,
    operand l1pte:reg,
    out operand err:reg,
    ghost phys_page:word,
    ghost pagedb_in:PageDb,
    ghost pagedb_in2:PageDb,
    ghost abs_mapping:Mapping,
    ghost ap_ret:tuple(PageDb, word),
    ghost l2pte:L2PTE,
    ghost contents:seq(word))
    returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
    requires
        @page == OReg(R1) && @as_page == OReg(R2) && @mapping == OReg(R3);
        @l1pte == OReg(R10) && @err == OReg(R0);
        StackBytesRemaining(this, MEASURE_STACK_BYTES + STACKSIZE_SHA_UPDATE * WORDSIZE);
        validPageDb(pagedb_in);
        validPageDb(pagedb_in2);
        pageDbCorresponds(this.m, pagedb_in2);
        isAddrspace(pagedb_in, as_page);
        isValidMappingTarget(pagedb_in, as_page, mapping) == KOM_ERR_SUCCESS;
        phys_page == 0 || physPageIsInsecureRam(phys_page);
        l1pte == page_monvaddr(pagedb_in[pagedb_in[as_page].entry.l1ptnr].entry
                            .l1pt[wordToMapping(mapping).l1index].v);
        abs_mapping == wordToMapping(mapping);
        allocatePageEntryValid(DataPage(contents));
        ap_ret == allocatePage(pagedb_in, page, as_page, DataPage(contents));
        firstOf2(ap_ret) == pagedb_in2;
        secondOf2(ap_ret) == KOM_ERR_SUCCESS;
        validPageNr(page);
        l2pte == SecureMapping(page, abs_mapping.perm.w, abs_mapping.perm.x);
        dataPageRefs(pagedb_in2, as_page, page) == set();
        validL2PTE(pagedb_in2, as_page, l2pte);
        SeqLength(contents) == PAGESIZE / WORDSIZE;
        pageDbDataCorresponds(page, DataPage(contents), extractPage(this.m, page));
    modifies
        globals; mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
    ensures
        SmcProcedureInvariant(old(this), this);
        GlobalsPreservingExcept(old(this), this, set(PageDb()));
        tuple(pagedb, err) == old(smc_mapSecure(pagedb_in, page, as_page,
            mapping, phys_page, Just(contents)));
        validPageDb(pagedb) && pageDbCorresponds(this.m, pagedb);
{
    ghost var specResult := smc_mapSecure(pagedb_in, page, as_page,
                                          mapping, phys_page, Just(contents));
    mapSecurePreservesPageDBValidity(pagedb_in, page, as_page, mapping, phys_page, Just(contents));

    pagedb := pagedb_in2;
    MOV(r5, page);

    lemma_isValidMappingTarget_validAndEmptyMapping(pagedb_in, as_page, mapping);

    reveal wordToMapping;
    mkL2Pte_secure(mapping, page, r0, abs_mapping, l2pte);

    ghost var l1 := old(pagedb[pagedb[as_page].entry.l1ptnr].entry);
    ghost var l1pte_abs := fromJust(l1.l1pt[abs_mapping.l1index]);
    ghost var tmpst := this;
    assert l1pte_abs != old(page);
    pagedb := update_l2pte(as_page, mapping, page, l1pte, r8,
                          pagedb, abs_mapping, l2pte);
    AllButOnePagePreserving(l1pte_abs, tmpst, this);
    assert pageDbCorresponds(this.m, pagedb);

    assert r5 == old(page);
    page_monvaddr_impl(r5, r5, r11);
    MOV(r1, as_page);
    MOV(r2, const(KOM_SMC_MAP_SECURE));
    assert r1 == old(as_page);
    assert r3 == old(mapping);
    assert r5 == page_monvaddr(old(page));
    pagedb := kom_smc_map_measure(true, r1, r2, r3, contents, old(page), r5, pagedb);

    assert pagedb == specPageDb(specResult);
    MOV(err, const(KOM_ERR_SUCCESS));
}

procedure map_secure_success(
    inout operand page:reg,
    operand as_page:reg,
    operand mapping:reg,
    inout operand insecure_vaddr:reg,
    operand l1pte:reg,
    operand pagedb_base:reg,
    out operand err:reg,
    ghost phys_page: word,
    ghost pagedb_in: PageDb)
    returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
    requires
        @page == OReg(R1) && @as_page == OReg(R2) && @mapping == OReg(R3)
            && @insecure_vaddr == OReg(R4) && @l1pte == OReg(R10) && @err == OReg(R0);
        @pagedb_base == OReg(R12);
        StackBytesRemaining(this, MEASURE_STACK_BYTES + STACKSIZE_SHA_UPDATE * WORDSIZE);
        pagedb_base == AddressOfGlobal(PageDb());
        validPageDb(pagedb_in) && pageDbCorresponds(this.m, pagedb_in);
        // errors already checked
        isAddrspace(pagedb_in, as_page)
            && isValidMappingTarget(pagedb_in, as_page, mapping) == KOM_ERR_SUCCESS
            && (phys_page == 0 || physPageIsInsecureRam(phys_page));
        insecure_vaddr == (if phys_page == 0 then 0
                else phys_page * PAGESIZE + KOM_DIRECTMAP_VBASE);
        l1pte == page_monvaddr(pagedb_in[pagedb_in[as_page].entry.l1ptnr].entry
                            .l1pt[wordToMapping(mapping).l1index].v);
    modifies
        globals; mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
    ensures
        SmcProcedureInvariant(old(this), this);
        GlobalsPreservingExcept(old(this), this, set(PageDb()));
        tuple(pagedb, err) == old(smc_mapSecure(pagedb_in, page, as_page,
            mapping, phys_page, maybeContentsOfPhysPage(this, phys_page)));
        validPageDb(pagedb) && pageDbCorresponds(this.m, pagedb);
{
    ghost var contents := maybeContentsOfPhysPage(this, phys_page);
    ghost var specResult := smc_mapSecure(pagedb_in, page, as_page,
            mapping, phys_page, contents);
    mapSecurePreservesPageDBValidity(pagedb_in, page, as_page,
            mapping, phys_page, contents);
    ghost var entry := PageDbEntryTyped(as_page, DataPage(fromJust(contents)));

    pagedb := allocate_page(page, as_page, const(KOM_PAGE_DATA),
                            pagedb_base, r11, r9, err, pagedb_in, entry, false);
    ghost var ap_ret := tuple(pagedb, err);
    if (err == const(KOM_ERR_SUCCESS)) {
        ghost var tmpst := this;
        assert err == specErr(specResult);
        assert page == old(page) && as_page == old(as_page);
        allocatePagePreservesPageDBValidity(pagedb_in, page, as_page, entry.entry);
        assert pageDbCorrespondsExcluding(this.m, pagedb, page)
          && pageDbEntryCorresponds(pagedb[page], extractPageDbEntry(this.m, page));
        lemma_preserve_contentsOfPhysPage(old(this), this, old(phys_page));
        assert isValidMappingTarget(pagedb, as_page, mapping) == KOM_ERR_SUCCESS
        by {
            assert isValidMappingTarget(pagedb_in, as_page, mapping)
                == KOM_ERR_SUCCESS;
            lemma_allocatePage_preservesMappingGoodness(
                pagedb_in,old(page),as_page,entry.entry,
                pagedb,err,mapping);
        }
        lemma_isValidMappingTarget_validAndEmptyMapping(pagedb, as_page, mapping);

        init_secure_page(page, insecure_vaddr, phys_page, entry.entry);
        AllButOnePagePreserving(old(page), tmpst, this);

        assert pageContentsCorresponds(old(page), entry,
                                       extractPage(this.m, old(page)))
            by { reveal pageContentsCorresponds; }
        assert page == old(page) && as_page == old(as_page);
        assert pageDbCorrespondsExcluding(this.m,pagedb,page);
        assert pageDbEntryCorresponds(pagedb[page],
                extractPageDbEntry(this.m,page));

        ghost var abs_mapping := wordToMapping(mapping);
        ghost var l2pte := SecureMapping(page, abs_mapping.perm.w, abs_mapping.perm.x);
        lemma_freePageRefs(pagedb_in, page);

        pagedb := map_secure_update(page, as_page, mapping, l1pte,
            err, old(phys_page), pagedb_in, pagedb, abs_mapping, ap_ret, l2pte, fromJust(contents));
    }
}

procedure kom_smc_map_secure(
    inout operand page:reg,
    operand as_page:reg,
    operand mapping:reg,
    inout operand phys_page:reg,
    operand pagedb_base:reg,
    out operand err:reg,
    ghost pagedb_in: PageDb)
    returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
    requires
        @page == OReg(R1) && @as_page == OReg(R2) && @mapping == OReg(R3)
            && @phys_page == OReg(R4) && @err == OReg(R0);
        @pagedb_base == OReg(R12);
        StackBytesRemaining(this, MEASURE_STACK_BYTES + STACKSIZE_SHA_UPDATE * WORDSIZE);
        pagedb_base == AddressOfGlobal(PageDb());
        validPageDb(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
    modifies
        globals; mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
    ensures
        SmcProcedureInvariant(old(this), this);
        GlobalsPreservingExcept(old(this), this, set(PageDb()));
        tuple(pagedb, err) == old(smc_mapSecure(pagedb_in, page, as_page,
            mapping, phys_page, maybeContentsOfPhysPage(this, phys_page)));
        validPageDb(pagedb) && pageDbCorresponds(this.m, pagedb);
{
    pagedb := pagedb_in;
    ghost var specResult := smc_mapSecure(pagedb, page, as_page,
            mapping, phys_page, maybeContentsOfPhysPage(this, phys_page));
    mapSecurePreservesPageDBValidity(pagedb, page, as_page,
            mapping, phys_page, maybeContentsOfPhysPage(this, phys_page));

    if (as_page >= const(KOM_SECURE_NPAGES)) {
        MOV(err, const(KOM_ERR_INVALID_ADDRSPACE));
        assert err == specErr(specResult);
    } else {
        assert validPageNr(as_page);
        load_page_type(as_page, pagedb_base, err, err, pagedb);
        if (err != const(KOM_PAGE_ADDRSPACE)) {
            assert !isAddrspace(pagedb, as_page);
            MOV(err, const(KOM_ERR_INVALID_ADDRSPACE));
            assert err == specErr(specResult);
        } else {
            assert as_page == old(as_page);
            assert isAddrspace(pagedb, as_page);
            is_valid_mapping_target(as_page,mapping,r10,err,pagedb);
            // NB: r10 := l1pte
            if( err != const(KOM_ERR_SUCCESS) ) {
                assert err == specErr(specResult);
            } else {
                insecure_phys_to_virt(phys_page, err);
                if (err == 0) {
                    MOV(err, const(KOM_ERR_INVALID_PAGENO));
                    assert err == specErr(specResult);
                } else {
                    ghost var contents := maybeContentsOfPhysPage(old(this), old(phys_page));
                    assert contents is Just;
                    ghost var entry := PageDbEntryTyped(old(as_page), DataPage(fromJust(contents)));
                    assert entry.addrspace == as_page;
                    assert validAddrspacePage(pagedb, entry.addrspace);
                    assert page == old(page);
                    pagedb := map_secure_success(page, as_page, mapping,
                                                 phys_page, r10, pagedb_base, err,
                                                 old(phys_page), pagedb);
                    assert err == specErr(specResult);
                    assert pagedb == specPageDb(specResult);
                }
            }
        }
    }
}
