var{:register op_r(0)}  r0:int;
var{:register op_r(1)}  r1:int;
var{:register op_r(2)}  r2:int;
var{:register op_r(3)}  r3:int;
var{:register op_r(4)}  r4:int;
var{:register op_r(5)}  r5:int;
var{:register op_r(6)}  r6:int;
var{:register op_r(7)}  r7:int;
var{:register op_r(8)}  r8:int;
var{:register op_r(9)}  r9:int;
var{:register op_r(10)} r10:int;
var{:register op_r(11)} r11:int;
var{:register op_r(12)} r12:int;

var{:register op_sp(User)}      spUser:int;
var{:register op_sp(System)}    spSystem:int;
var{:register op_sp(Monitor)}   spMonitor:int;
var{:register op_sp(Abort)}     spAbort:int;
var{:register op_sp(Undefined)} spUndefined:int;
var{:register op_sp(FIQ)}       spFIQ:int;

var{:register op_lr(User)}      lrUser:int;
var{:register op_lr(System)}    lrSystem:int;
var{:register op_lr(Monitor)}   lrMonitor:int;
var{:register op_lr(Abort)}     lrAbort:int;
var{:register op_lr(Undefined)} lrUndefined:int;
var{:register op_lr(FIQ)}       lrFIQ:int;

function{:operand} stack(slot:int):oprnd
function{:operand} fromOperand(o:oprnd):oprnd

procedure ADD(out{:operand} dst:int, {:operand} src1:int, {:operand} src2:int)
    requires/ensures
        ValidOperand(this, @src1);
        ValidOperand(this, @src2);
        ValidDestinationOperand(this, @dst);
    requires
        isUInt32(src1);
        isUInt32(src2);
    ensures
        isUInt32(dst);
        evalUpdate(old(this), @dst, old(src1 + src2) % MaxVal(), this, true);

procedure SUB(out{:operand} dst:int, {:operand} src1:int, {:operand} src2:int)
    requires/ensures
        ValidOperand(this, @src1);
        ValidOperand(this, @src2);
        ValidDestinationOperand(this, @dst);
    requires
        isUInt32(src1);
        isUInt32(src2);
    ensures
        isUInt32(dst);
        evalUpdate(old(this), @dst, old(src1 - src2) % MaxVal(), this, true);

procedure MOV(out{:operand} dst:int, {:operand} src:int)
    requires/ensures
        ValidOperand(this, @src);
        ValidDestinationOperand(this, @dst);
        isUInt32(src);
    ensures
        evalUpdate(old(this), @dst, old(src), this, true);
        isUInt32(dst);

// procedure LDR(out{:operand} rd:int, {:operand} addr:int)
//     requires/ensures
//         ValidDestinationOperand(this, @rd);
//         ValidMemOperand(this, @addr);
//     ensures
//         evalUpdate(old(this), @rd, old(addr), this, true);
// 
// procedure STR({:operand} rd:int, out{:operand} addr:int)
//     requires/ensures
//         ValidOperand(this, @addr);
//     ensures
//         evalMemUpdate(old(this), @addr, old(rd), this, true);
// 

procedure incr(inout{:operand} o:int)
  requires
    ValidDestinationOperand(this, @o);
    isUInt32(o);
    0 <= o < MaxVal();
  ensures
    evalUpdate(old(this), @o, (old(o) + 1) % MaxVal(), this, true);

procedure plusEquals(inout{:operand} o1:int, {:operand} o2:int)
    requires
        ValidDestinationOperand(this, @o1);
        ValidOperand(this, @o2);
        isUInt32(o1);
        isUInt32(o2);
        0 <= o1 < MaxVal();
    ensures
        evalUpdate(old(this), @o1, old(o1 + o2) % MaxVal(), this, true);
