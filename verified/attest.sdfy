include "attest_input.sdfy"

#verbatim

lemma lemma_SaneState_implies_SaneShaGlobal(s:state)
    requires SaneState(s);
    ensures  SaneShaGlobal(va_get_globals(s));
{
    var globals := va_get_globals(s);
    reveal_SaneShaGlobal(); 
    assert ValidGlobalStateOpaque(globals) by {
        reveal_ValidGlobalStateOpaque(); 
        assert ValidGlobalState(globals) by {
            reveal_ValidMemState();   // Which we get from ValidState
        }
    }
    // TODO: ab
assume false;
    assert  ValidGlobalStateOpaque(globals)
 && ValidGlobal(K_SHA256s())
 && SizeOfGlobal(K_SHA256s()) == K_SHA256_BYTES
 && isUInt32(AddressOfGlobal(K_SHA256s()) + K_SHA256_BYTES) // We won't wrap around while accessing K_SHA256s
 && (forall j :: 0 <= j < K_SHA256_WORDS ==> GlobalContents(globals, K_SHA256s(), AddressOfGlobal(K_SHA256s()) + j * WORDSIZE) == K_SHA256(j));

}

#endverbatim

procedure {:timeLimitMultiplier 2} compute_hmac(
    ghost stack_bytes: int,
    ghost pagedb: PageDb,
    ghost dispPg: PageNr,
    ghost input:seq(word),
    ghost old_sp:word
    ) returns (
    ghost mac:seq(word)
    )

    reads
        globals;
    modifies
         r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
         mem;
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this, stack_bytes);
        ValidMemRange(old_sp - STACKSIZE_ATTEST * WORDSIZE, old_sp);
    requires
        stack_bytes >= STACKSIZE_HMAC * WORDSIZE;
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        nonStoppedDispatcher(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        r0 == KOM_SVC_ATTEST;
//        r10 == page_monvaddr(dispPg);
//        r11 == page_monvaddr(pagedb[dispPg].addrspace);

        ValidMemRange(sp + SHA_CTXSIZE * WORDSIZE, sp + 4 * SHA_CTXSIZE * WORDSIZE);
        input == AddrMemContentsSeq(mem, sp + SHA_CTXSIZE * WORDSIZE, 3 * SHA_CTXSIZE);
        r1 == sp + 3*SHA_CTXSIZE * WORDSIZE; 
        sp == old_sp - (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE;
     
        sp + (4 * SHA_CTXSIZE + 1) * WORDSIZE >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() 
     || sp + (4 * SHA_CTXSIZE + 1) * WORDSIZE + 2*SHA_BLOCKSIZE*WORDSIZE <= KOM_DIRECTMAP_VBASE;

    ensures
        //AddrMemPreservingExcept(old(mem), mem, old_sp - STACKSIZE_ATTEST * WORDSIZE, old_sp);
        sp == old(sp);

        AddrMemPreservingExcept(old(mem), mem, StackLimit(), old_sp);
        ValidMemRange(sp, sp + SHA_CTXSIZE * WORDSIZE);
        mac == AddrMemContentsSeq(mem, sp, SHA_CTXSIZE);
        mac == HMAC_SHA256(AttestKey(), WordSeqToBytes(input));
{
    ghost var addrspace := pagedb[dispPg].addrspace;
    assert validAddrspacePage(pagedb, addrspace) by { reveal_validPageDb(); }

    // Stack layout [size in words]:
    //   sp := mac_output[8] || message [8+16] || gap[1] || tmp_ptr[2*SHA_BLOCKSIZE] || key_ptr[HMAC_KEYSIZE_WORDS]
    // where 
    //   message = user_words[8] || enclave_measurement [8] || 0 [8]
    // Total stack usage == 8 + 24 + 1 + 2 * SHA_BLOCKSIZE + HMAC_KEYSIZE_WORDS

    // Prove that this procedure's local stack region is valid
    ghost var STACKSIZE_LOCAL := 4 * SHA_CTXSIZE + 1 + 2 * SHA_BLOCKSIZE + HMAC_KEYSIZE_WORDS;
    calc {
        true; 
        ValidMemRange(old_sp - STACKSIZE_ATTEST * WORDSIZE, old_sp);
            { lemma_ValidMemRange_offset(old_sp - STACKSIZE_ATTEST * WORDSIZE, STACKSIZE_ATTEST, STACKSIZE_ATTEST - STACKSIZE_HMAC); }
        ValidMemRange(old_sp - (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE, old_sp);
        ValidMemRange(sp, sp + STACKSIZE_LOCAL * WORDSIZE);
    }

    // Arrange the key in memory
    ghost var key:seq(word);
    lemma_ValidMemRange_offset(sp, STACKSIZE_LOCAL, 4 * SHA_CTXSIZE + 1 + 2 * SHA_BLOCKSIZE);
    ADD(r4, sp, const((4 * SHA_CTXSIZE + 1 + 2 * SHA_BLOCKSIZE) * WORDSIZE)); 
    assert ValidMemRange(r4, r4 + HMAC_KEYSIZE_WORDS * WORDSIZE);
    key := load_attestion_key();
    ghost var key_mem;
    key_mem := mem;

    assert AddrMemContentsSeq(mem, sp + SHA_CTXSIZE * WORDSIZE, 3 * SHA_CTXSIZE)
        == input by {
        lemma_AddrMemContentsSeq_framing1(old(mem), mem, sp + SHA_CTXSIZE * WORDSIZE, 3 * SHA_CTXSIZE,
                                          r4, r4 + SHA_CTXSIZE * WORDSIZE);
    }

    // Call HMAC
    MOV(r0, sp);                                  // ctx
    ADD(r1, r1, const( (SHA_CTXSIZE + 1) * WORDSIZE));        // tmp_ptr
    MOV(r2, 1);                                   // num_blocks == 1
    ADD(r3, sp, const(SHA_CTXSIZE * WORDSIZE));   // input_ptr
    //ADD(r4, r1, const(2*SHA_BLOCKSIZE*WORDSIZE)); // key_ptr
    LDRglobaladdr(lr, K_SHA256s());

    ghost var pre_hmac_r1;
    pre_hmac_r1 := r1;

    assert SaneShaGlobal(globals) by { lemma_SaneState_implies_SaneShaGlobal(this); }

    // Prove that r1 == tmp_ptr points at a valid range of memory
    assert r1 == sp + (4 * SHA_CTXSIZE + 1) * WORDSIZE;
    calc {
        true;
        ValidMemRange(sp, sp + STACKSIZE_LOCAL * WORDSIZE);
            { lemma_ValidMemRange_offset(sp, STACKSIZE_LOCAL,
                                         4 * SHA_CTXSIZE + 1); }
        ValidMemRange(sp + (4 * SHA_CTXSIZE + 1) * WORDSIZE, sp + STACKSIZE_LOCAL * WORDSIZE);
        ValidMemRange(r1, sp + STACKSIZE_LOCAL * WORDSIZE);
            { lemma_ValidMemRange_reduced(r1,
                                          STACKSIZE_LOCAL - (4 * SHA_CTXSIZE + 1),
                                          HMAC_KEYSIZE_WORDS); }
        ValidMemRange(r1, r1 + 2 * SHA_BLOCKSIZE * WORDSIZE);
    }

    // Prove that there is still a valid range of memory below the stack pointer, for use by HMAC
    calc {
        true;
        ValidMemRange(old_sp - STACKSIZE_ATTEST * WORDSIZE, old_sp);
        ValidMemRange(sp + (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE - STACKSIZE_ATTEST * WORDSIZE, 
                      sp + (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE);
        ValidMemRange(sp - STACKSIZE_HMAC * WORDSIZE, sp + (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE);
            { lemma_ValidMemRange_reduced(sp - STACKSIZE_HMAC * WORDSIZE, 
                                          STACKSIZE_ATTEST,
                                          (STACKSIZE_ATTEST - STACKSIZE_HMAC)); }
        ValidMemRange(sp - STACKSIZE_HMAC * WORDSIZE, sp);
    }

    mac := hmac(key, input);
    assert mac == AddrMemContentsSeq(mem, sp, SHA_CTXSIZE);
    assert mac == HMAC_SHA256(AttestKey(), WordSeqToBytes(input));

    // Prove memory preservation
    calc {
        true;
        AddrMemPreservingExcept3(key_mem, mem,
                                 StackLimit(), sp,
                                 sp, sp + SHA_CTXSIZE * WORDSIZE,
                                 pre_hmac_r1, pre_hmac_r1 + 2 * SHA_BLOCKSIZE * WORDSIZE);
            { assert pre_hmac_r1 == sp + (4*SHA_CTXSIZE + 1) * WORDSIZE; }
        AddrMemPreservingExcept3(key_mem, mem,
                                 StackLimit(), sp,
                                 sp, sp + SHA_CTXSIZE * WORDSIZE,
                                 sp + (4*SHA_CTXSIZE + 1) * WORDSIZE, 
                                 sp + (4*SHA_CTXSIZE + 1 + 2 * SHA_BLOCKSIZE) * WORDSIZE); 
            { 
                lemma_AddrMemPreservingExcept3_condensed(key_mem, mem,
                                 StackLimit(), sp,
                                 sp, sp + SHA_CTXSIZE * WORDSIZE,
                                 sp + (4*SHA_CTXSIZE + 1) * WORDSIZE, 
                                 sp + (4*SHA_CTXSIZE + 1 + 2 * SHA_BLOCKSIZE) * WORDSIZE); 
            }
        AddrMemPreservingExcept(key_mem, mem, StackLimit(), sp + (4*SHA_CTXSIZE + 1 + 2 * SHA_BLOCKSIZE) * WORDSIZE);
        AddrMemPreservingExcept(key_mem, mem, StackLimit(), old_sp);
    }
    assert {:split_here} true;
}

//#verbatim
//function to_word(i:int) : word
//    requires 0 <= i < 0x1_0000_0000
//{
//    i as word
//}
//#endverbatim

procedure {:timeLimitMultiplier 2} svc_returning_attest_inner(
    ghost exstate: state,
    ghost stack_bytes: int,
    ghost pagedb: PageDb,
    ghost dispPg: PageNr)
    returns (
    ghost mac_ptr:word,
    ghost mac:seq(word)
    )

    reads
        globals;
    modifies
         r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
         mem;
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this, stack_bytes);
    requires
        ValidState(exstate) && mode_of_state(exstate) != User;
        stack_bytes >= STACKSIZE_ATTEST * WORDSIZE;
        isReturningSvc(exstate);
        CoreRegPreservingExcept(exstate, this, set(OSP, OLR));
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        nonStoppedDispatcher(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        r0 == KOM_SVC_ATTEST;
//        r10 == page_monvaddr(dispPg);
//        r11 == page_monvaddr(pagedb[dispPg].addrspace);
        ValidMemRange(sp - STACKSIZE_ATTEST * WORDSIZE, sp);
    ensures
        // Framing
        StackPreserving(old(this), this);
        NonStackMemPreserving(old(this), this);
        sp == old(sp);

        // Results
        mac_ptr == sp - (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE;
        ValidMemRange(mac_ptr, mac_ptr + SHA_CTXSIZE * WORDSIZE);
        mac == AddrMemContentsSeq(mem, mac_ptr, SHA_CTXSIZE);
        mac == svcHmac(exstate, pagedb, dispPg);
{
    ghost var addrspace := pagedb[dispPg].addrspace;
    assert validAddrspacePage(pagedb, addrspace) by { reveal_validPageDb(); }
    ghost var spec_enclave_measurement := SHA256(WordSeqToBytes(pagedb[addrspace].entry.measurement));
    ghost var real_user_words := seq(r1, r2, r3, r4, r5, r6, r7, r8);
    // Giant OBSERVE to trigger CoreRegPreservingExcept
    ghost var helper_user_words := seq(OperandContents(this, OReg(R1)), 
                                       OperandContents(this, OReg(R2)), 
                                       OperandContents(this, OReg(R3)), 
                                       OperandContents(this, OReg(R4)), 
                                       OperandContents(this, OReg(R5)), 
                                       OperandContents(this, OReg(R6)), 
                                       OperandContents(this, OReg(R7)), 
                                       OperandContents(this, OReg(R8)));
    ghost var spec_user_words := seq(exstate.regs[R1], exstate.regs[R2], exstate.regs[R3], exstate.regs[R4],
                                     exstate.regs[R5], exstate.regs[R6], exstate.regs[R7], exstate.regs[R8]);
    assert real_user_words == helper_user_words == spec_user_words;

    // Stack layout [size in words]:
    //   sp := mac_output[8] || message [8+16] || gap[1] || tmp_ptr[2*SHA_BLOCKSIZE] || key_ptr[HMAC_KEYSIZE_WORDS]
    // where 
    //   message = user_words[8] || enclave_measurement [8] || 0 [8]
    // Total stack usage == 8 + 24 + 1 + 2 * SHA_BLOCKSIZE + HMAC_KEYSIZE_WORDS
    // Plus STACKSIZE_HMAC
    SUB(sp, sp, const((STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE));
    assert StackBytesRemaining(this, STACKSIZE_HMAC * WORDSIZE);
    //WordAlignedAdd(sp, (0 - 1) * (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE);
    
    // Arrange the user words in memory after the gap for the MAC output
    ghost var user_words;
    ghost var measurement;
    ghost var pre_input_sp;
    pre_input_sp := sp;
    user_words, measurement := arrange_attestation_input(pagedb, dispPg);

    assert spec_user_words == user_words;
    assert spec_enclave_measurement == measurement;
    
    assert pageDbCorresponds(this.m, pagedb) by {
        lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb);
    }

    ghost var input;
    input := user_words + measurement + SeqRepeat(8, 0);

    ghost var spec_message;
    spec_message := spec_user_words + spec_enclave_measurement + SeqRepeat(8, 0);
    assert spec_message == input;

    ghost var spec_hmac;
    spec_hmac := HMAC_SHA256(AttestKey(), WordSeqToBytes(spec_message));


    calc {
        old(sp) - (sp + SHA_CTXSIZE * WORDSIZE);
        old(sp) - (old(sp) - (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE  + SHA_CTXSIZE * WORDSIZE);
        (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE - SHA_CTXSIZE * WORDSIZE;
        (STACKSIZE_ATTEST - STACKSIZE_HMAC - SHA_CTXSIZE) * WORDSIZE;
    }

    // Prove stack memory is valid
    ghost var STACKSIZE_LOCAL := STACKSIZE_ATTEST - STACKSIZE_HMAC;
    ghost var size := STACKSIZE_ATTEST - STACKSIZE_HMAC - SHA_CTXSIZE;
    calc {
        true;
        ValidMemRange(old(sp) - STACKSIZE_ATTEST * WORDSIZE, old(sp));
            { lemma_ValidMemRange_offset(old(sp) - STACKSIZE_ATTEST * WORDSIZE, STACKSIZE_ATTEST, STACKSIZE_ATTEST - STACKSIZE_HMAC); }
        ValidMemRange(old(sp) - (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE, old(sp));
        ValidMemRange(sp, old(sp));
            { lemma_ValidMemRange_reduced(sp, STACKSIZE_LOCAL, STACKSIZE_LOCAL - SHA_CTXSIZE); }
        ValidMemRange(sp + SHA_CTXSIZE * WORDSIZE, old(sp));
            { lemma_ValidMemRange_reduced(sp + SHA_CTXSIZE * WORDSIZE, size, size - 4 * SHA_CTXSIZE); }
        ValidMemRange(sp + SHA_CTXSIZE * WORDSIZE, sp + 4 * SHA_CTXSIZE * WORDSIZE);
    }

    mac := compute_hmac(STACKSIZE_HMAC * WORDSIZE, pagedb, dispPg, input, old(sp));
    assert spec_hmac == mac;
    assert mac == svcHmac(exstate, pagedb, dispPg);
    mac_ptr := sp;

    calc {
        sp + (STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE;
        sp + STACKSIZE_LOCAL * WORDSIZE;
        (old(sp) - STACKSIZE_LOCAL * WORDSIZE) + STACKSIZE_LOCAL * WORDSIZE;  
        old(sp);
    }
    assert isUInt32(old(sp));
    ADD(sp, sp, const((STACKSIZE_ATTEST - STACKSIZE_HMAC) * WORDSIZE));
    assert sp == old(sp);
}


procedure svc_returning_attest(
    ghost exstate: state,
    ghost stack_bytes: int,
    ghost pagedb: PageDb,
    ghost dispPg: PageNr)
    reads
        globals;
    modifies
         r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
         spsr_mon; mem;
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this, stack_bytes);
    requires
        ValidState(exstate) && mode_of_state(exstate) != User;
        stack_bytes >= (STACKSIZE_ATTEST + 10) * WORDSIZE;  // +10 to store volatile reigsters
        isReturningSvc(exstate);
        CoreRegPreservingExcept(exstate, this, set(OSP, OLR));
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
        validDispatcherPage(pagedb, dispPg);
        nonStoppedDispatcher(pagedb, dispPg);
        GlobalFullContents(this.m, CurDispatcherOp()) == seq(page_monvaddr(dispPg));
        r0 == KOM_SVC_ATTEST;
//        r10 == page_monvaddr(dispPg);
//        r11 == page_monvaddr(pagedb[dispPg].addrspace);
        ValidMemRange(sp - (STACKSIZE_ATTEST + 10) * WORDSIZE, sp);
        //sp - STACKSIZE_ATTEST * WORDSIZE >= KOM_DIRECTMAP_VBASE + MonitorPhysBase();
    ensures
        StackPreserving(old(this), this);
        NonStackMemPreserving(old(this), this);
        let tuple := svcHandled(exstate, pagedb, dispPg) in
        let retRegs := firstOf2(tuple) in
        let handled_pagedb := secondOf2(tuple) in
        pagedb == handled_pagedb && preEntryReturn(old(this), this, retRegs);
{
    ghost var addrspace := pagedb[dispPg].addrspace;
    assert validAddrspacePage(pagedb, addrspace) by { reveal_validPageDb(); }

    ghost var remaining_stack_bytes;
    remaining_stack_bytes := stack_nonvolatiles(stack_bytes);
    lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb);
    
    // Prove we still have a valid stack region after pushing registers onto the stack
    assert sp == old(sp) - 40;
    calc {
        true;
        ValidMemRange(old(sp) - (STACKSIZE_ATTEST + 10) * WORDSIZE, old(sp));
        ValidMemRange(sp + 40 - (STACKSIZE_ATTEST + 10) * WORDSIZE, sp + 40);
        ValidMemRange(sp - STACKSIZE_ATTEST * WORDSIZE, sp + 40);
            { lemma_ValidMemRange_reduced(sp - STACKSIZE_ATTEST * WORDSIZE, 10 + STACKSIZE_ATTEST, 10); }
        ValidMemRange(sp - STACKSIZE_ATTEST * WORDSIZE, sp);
    }

    ghost var mac_ptr:word;
    ghost var mac:seq(word);
    mac_ptr, mac := svc_returning_attest_inner(exstate, remaining_stack_bytes, pagedb, dispPg);

    assert WordAligned(sp);
    WordAlignedAdd(sp, 36);
    WordAlignedAdd(sp, 32);
    WordAlignedAdd(sp, 28);
    WordAlignedAdd(sp, 24);
    WordAlignedAdd(sp, 20);
    WordAlignedAdd(sp, 16);
    WordAlignedAdd(sp, 12);
    WordAlignedAdd(sp,  8);
    WordAlignedAdd(sp,  4);

    remaining_stack_bytes := unstack_nonvolatiles(remaining_stack_bytes);

    assert mac_ptr == sp - (STACKSIZE_ATTEST - STACKSIZE_HMAC + 10) * WORDSIZE;
    // Load the mac into registers
    SUB(r0, sp, const((STACKSIZE_ATTEST - STACKSIZE_HMAC + 10) * WORDSIZE));
    load_memory_into_regs(mac);
    
    MOV(r0, const(encode_mode(User)));
    MSR(spsr_mon, r0);

    MOV(r0, const(KOM_ERR_SUCCESS));
    assert old(lr) == lr;
    assert OperandContents(this, OLR) == OperandContents(old(this), OLR);
    assert {:split_here} true;
}
