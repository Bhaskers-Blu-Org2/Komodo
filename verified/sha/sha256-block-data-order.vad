///////////////////////////////////////////////////
//
//  Based on sha256-armv4.pl form OpenSSL 1.0.2j
//
///////////////////////////////////////////////////


include {:verbatim} "sha256.i.dfy"
include {:verbatim} "sha256-helpers.i.dfy"
include {:verbatim} "sha256-invariants.i.dfy"
include {:verbatim} "../kom_common.i.dfy"

include "../valedecls.vad"
include "sha256-one-block.vad"

procedure {:refined} sha256_loop(
    ghost old_trace:SHA256Trace,
    ghost ctx_ptr:word,
    ghost input_ptr:word,
    ghost input:seq(word),
    ghost num_blocks:nat,
    ghost old_M_length:nat,
    ghost old_mem:memmap
    )
requires {:refined false}
    !interrupts_enabled(this);
requires exists trace_in ::
         BlockInvariant(trace_in, old_trace, input, globals, old_M_length, old_mem, mem, sp, lr, r1, r12,
                        r4, r5, r6, r7, r8, r9, r10, r11,
                        input_ptr, ctx_ptr, num_blocks, 0);
reads
    sp; globals;
modifies
    mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; lr;
ensures exists trace_out ::
        BlockInvariant(trace_out, old_trace, input, globals, old_M_length, old_mem, mem, sp, lr, r1, r12,
                        r4, r5, r6, r7, r8, r9, r10, r11,
                        input_ptr, ctx_ptr, num_blocks, num_blocks);
{
    ghost var block:nat := 0;
    while (r1 < r12)
        invariant
            exists trace :: 
                BlockInvariant(trace, old_trace, input, globals, old_M_length, old_mem, mem, sp, lr, r1, r12,
                               r4, r5, r6, r7, r8, r9, r10, r11,
                               input_ptr, ctx_ptr, num_blocks, block);
         decreases r12 - r1;
    {
        sha256_loop_body(old_trace, ctx_ptr, input_ptr, input, num_blocks, old_M_length, old_mem, block);
        block := block + 1;
    }
}

// Core implementation that does the real work
procedure {:refined} {:timeLimitMultiplier 2} sha256_block_data_order_inner(
    ghost trace_in:SHA256Trace,
    ghost input:seq(word)
    ) returns (
    ghost trace_out:SHA256Trace
    )

requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneStackPointer(sp);
requires {:refined false}
    !interrupts_enabled(this);
requires
    // Stack is accessible
    ValidMemRange(sp, WordOffset(sp, SHA_STACKSIZE));

    IsCompleteSHA256Trace(trace_in);
    SHA256TraceIsCorrect(trace_in);

    // K table is valid
    SaneShaGlobal(globals);
    lr == AddressOfGlobal(K_SHA256s());
    //ValidGlobalAddr(K_SHA256s(), lr);

    let ctx := r0 in
    let input_ptr := r1 in
    let num_blocks := r2 in // Number of 64-byte blocks to process

     // Old H values are laid out in memory pointed at by ctx
        WordAligned(ctx) && isUInt32(ctx + WordsToBytes(SHA_CTXSIZE))
     && ValidMemRange(ctx, WordOffset(ctx, SHA_CTXSIZE))
     && last(trace_in.H)[0] == AddrMemContents(mem, WordOffset(ctx, 0))
     && last(trace_in.H)[1] == AddrMemContents(mem, WordOffset(ctx, 1))
     && last(trace_in.H)[2] == AddrMemContents(mem, WordOffset(ctx, 2))
     && last(trace_in.H)[3] == AddrMemContents(mem, WordOffset(ctx, 3))
     && last(trace_in.H)[4] == AddrMemContents(mem, WordOffset(ctx, 4))
     && last(trace_in.H)[5] == AddrMemContents(mem, WordOffset(ctx, 5))
     && last(trace_in.H)[6] == AddrMemContents(mem, WordOffset(ctx, 6))
     && last(trace_in.H)[7] == AddrMemContents(mem, WordOffset(ctx, 7))

     // Ghost input matches in-memory input
     && SeqLength(input) == num_blocks * SHA_BLOCKSIZE
     && WordAligned(input_ptr) && isUInt32(input_ptr + WordsToBytes(num_blocks * SHA_BLOCKSIZE))
     && ValidMemRange(input_ptr, WordOffset(input_ptr, num_blocks * SHA_BLOCKSIZE))
     && (forall j :: 0 <= j < num_blocks * SHA_BLOCKSIZE ==> AddrMemContents(mem, WordOffset(input_ptr, j)) == input[j]
         )

     // Anti-aliasing
     && (WordOffset(ctx, SHA_CTXSIZE) < input_ptr || ctx > WordOffset(input_ptr, num_blocks*SHA_BLOCKSIZE))    // input_ptr != ctx
     && (WordOffset(ctx, SHA_CTXSIZE) < sp || ctx > WordOffset(sp, SHA_STACKSIZE))                             // ctx != sp
     && (WordOffset(input_ptr, num_blocks*SHA_BLOCKSIZE) < sp || input_ptr >= WordOffset(sp, SHA_STACKSIZE));  // input_ptr != sp

reads
    sp; globals;
modifies
    mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; lr;
ensures
    // Memory framing:  We only touch the stack and 8 bytes pointed to by ctx_ptr
    AddrMemPreservingExcept2(old(mem), mem, sp, WordOffset(sp, SHA_STACKSIZE),
                             old(r0), WordOffset(old(r0), SHA_CTXSIZE));

    IsCompleteSHA256Trace(trace_out);
    SHA256TraceIsCorrect(trace_out);
    SeqLength(trace_out.M) == SeqLength(trace_in.M) + old(r2);
    trace_in.M == SeqSlice(trace_out.M, 0, SeqLength(trace_in.M));  // trace_in.M is a prefix of trace_out.M
    (forall i :: 0 <= i < old(r2)
      ==> trace_out.M[SeqLength(trace_in.M) + i] == SeqSlice(input, i*16, (i+1)*16)) ;
    last(trace_out.H)[0] == AddrMemContents(mem, WordOffset(old(r0), 0));
    last(trace_out.H)[1] == AddrMemContents(mem, WordOffset(old(r0), 1));
    last(trace_out.H)[2] == AddrMemContents(mem, WordOffset(old(r0), 2));
    last(trace_out.H)[3] == AddrMemContents(mem, WordOffset(old(r0), 3));
    last(trace_out.H)[4] == AddrMemContents(mem, WordOffset(old(r0), 4));
    last(trace_out.H)[5] == AddrMemContents(mem, WordOffset(old(r0), 5));
    last(trace_out.H)[6] == AddrMemContents(mem, WordOffset(old(r0), 6));
    last(trace_out.H)[7] == AddrMemContents(mem, WordOffset(old(r0), 7));

{
    assert ValidGlobal(K_SHA256s()) by { reveal SaneShaGlobal; }
    LDRglobaladdr(lr, K_SHA256s());

    ghost var ctx_ptr := r0;
    ghost var input_ptr := r1;
    ghost var num_blocks := r2;

    ADDWrapShift(r2, r1, r2, LSLShift(6)); // r2 <- input_ptr + 64 * num_blocks
    assert r2 == r1 + 64 * num_blocks by {
        reveal TruncateWord;
        lemma_ShiftsAdd(num_blocks, 2, 4);
        lemma_LeftShift2(num_blocks);
        lemma_LeftShift4(num_blocks*4);
    }

    // Save some of the initial state away.  We'll need it later.
    STR(r0, sp, const(16*WORDSIZE));
    STR(r2, sp, const(18*WORDSIZE));
    // Move end_ptr into r12 to satisfy the BlockInvariant. 
    // Note: OpenSSL appears to avoid this by assuming num_blocks > 0
    MOV(r12, r2);  

    // Load a - h values into registers
    LDR(r4, r0, 0);
    LDR(r5, r0, const(WORDSIZE));
    LDR(r6, r0, const(2*WORDSIZE));
    LDR(r7, r0, const(3*WORDSIZE));
    LDR(r8, r0, const(4*WORDSIZE));
    LDR(r9, r0, const(5*WORDSIZE));
    LDR(r10, r0, const(6*WORDSIZE));
    LDR(r11, r0, const(7*WORDSIZE));

    // forall j :| 0 <= j < 19 :: ValidMem(sp + j*4)
    // {
    //     assert ValidMem(sp + j*4);
    // }

    forall addr :| input_ptr <= addr < WordOffset(input_ptr, num_blocks*SHA_BLOCKSIZE) && WordAligned(addr)
        :: ValidMem(addr)
    {
        assert ValidMem(addr);
    }
    assert ValidMemRange(input_ptr, WordOffset(input_ptr, num_blocks * SHA_BLOCKSIZE));



    forall j :| 0 <= j < num_blocks * SHA_BLOCKSIZE :: AddrMemContents(mem, WordOffset(input_ptr, j)) == input[j]
    {
        assert ValidMem(WordOffset(input_ptr, j));
    }

    // OBSERVE
    ghost var prev_mem := mem;  // Avoid Spartan mis-capture
    ghost var len_M := SeqLength(trace_in.M);   
    assert BlockInvariant(trace_in, trace_in, input, globals, len_M, prev_mem, mem, sp, lr, r1, r12,
                          r4, r5, r6, r7, r8, r9, r10, r11,
                          input_ptr, ctx_ptr, num_blocks, 0);
    sha256_loop(trace_in, ctx_ptr, input_ptr, input, num_blocks, len_M, prev_mem);
    exists trace_ret ::
        BlockInvariant(trace_ret, trace_in, input, globals, len_M, prev_mem, mem, sp, lr, r1, r12,
                        r4, r5, r6, r7, r8, r9, r10, r11,
                        input_ptr, ctx_ptr, num_blocks, num_blocks);
    //assert IsCompleteSHA256Trace(trace_ret);
    trace_out := trace_ret;
    assert {:split_here}{:refined} true;
}

#verbatim

const STACKSIZE_SHA_UPDATE:int := 10 + SHA_STACKSIZE;

#endverbatim


// Wrapper around the inner version that conforms to the calling convention
procedure {:refined} {:timeLimitMultiplier 3} sha256_block_data_order(
    ghost trace_in:SHA256Trace,
    ghost input:seq(word)
    ) returns (
    ghost trace_out:SHA256Trace
    )
requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneStackPointer(sp);
requires {:refined false}
    !interrupts_enabled(this);
requires
    IsCompleteSHA256Trace(trace_in);
    SHA256TraceIsCorrect(trace_in);

    // Stack is accessible
    sp >= WordsToBytes(STACKSIZE_SHA_UPDATE);
    ValidMemRange(sp-WordsToBytes(STACKSIZE_SHA_UPDATE), sp);
    StackPointerBytesRemaining(sp, WordsToBytes(STACKSIZE_SHA_UPDATE));

    // K table is valid
    SaneShaGlobal(globals);
    lr == AddressOfGlobal(K_SHA256s());
    //ValidGlobalAddr(K_SHA256s(), lr);

    let ctx := r0 in
    let input_ptr := r1 in
    let num_blocks := r2 in // Number of 64-byte blocks to process

     // Old H values are laid out in memory pointed at by ctx
        WordAligned(ctx) && isUInt32(ctx + WordsToBytes(SHA_CTXSIZE))
     && ValidMemRange(ctx, ctx + SHA_CTXSIZE * WORDSIZE)
     && last(trace_in.H)[0] == AddrMemContents(mem, WordOffset(ctx, 0))
     && last(trace_in.H)[1] == AddrMemContents(mem, WordOffset(ctx, 1))
     && last(trace_in.H)[2] == AddrMemContents(mem, WordOffset(ctx, 2))
     && last(trace_in.H)[3] == AddrMemContents(mem, WordOffset(ctx, 3))
     && last(trace_in.H)[4] == AddrMemContents(mem, WordOffset(ctx, 4))
     && last(trace_in.H)[5] == AddrMemContents(mem, WordOffset(ctx, 5))
     && last(trace_in.H)[6] == AddrMemContents(mem, WordOffset(ctx, 6))
     && last(trace_in.H)[7] == AddrMemContents(mem, WordOffset(ctx, 7))

     // Ghost input matches in-memory input
     && SeqLength(input) == num_blocks * SHA_BLOCKSIZE
     && WordAligned(input_ptr) && isUInt32(input_ptr + WordsToBytes(num_blocks * SHA_BLOCKSIZE))
     && ValidMemRange(input_ptr, WordOffset(input_ptr, num_blocks * SHA_BLOCKSIZE))
     && (forall j :: 0 <= j < num_blocks*SHA_BLOCKSIZE ==> AddrMemContents(mem, WordOffset(input_ptr, j)) == input[j])

     // Anti-aliasing
     && (WordOffset(ctx, SHA_CTXSIZE) < input_ptr || ctx > WordOffset(input_ptr, num_blocks*SHA_BLOCKSIZE))    // input_ptr != ctx
     && (WordOffset(ctx, SHA_CTXSIZE) < sp - WordsToBytes(STACKSIZE_SHA_UPDATE) || ctx >= sp)                              // ctx != sp
     && (WordOffset(input_ptr, num_blocks*SHA_BLOCKSIZE) < sp - WordsToBytes(STACKSIZE_SHA_UPDATE) || input_ptr >= sp);   // input_ptr != sp

reads
    globals;
modifies
    mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
ensures
    // Calling convention
    r4 == old(r4);
    r5 == old(r5);
    r6 == old(r6);
    r7 == old(r7);
    r8 == old(r8);
    r9 == old(r9);
    r10== old(r10);
    r11== old(r11);
    sp == old(sp);  
    lr == old(lr);

    // Memory framing:  We only touch the stack and 8 bytes pointed to by ctx_ptr
    AddrMemPreservingExcept2(old(mem), mem, sp - WordsToBytes(STACKSIZE_SHA_UPDATE), sp, old(r0),
                            old(r0) + WordsToBytes(SHA_CTXSIZE));

    // SHA results
    IsCompleteSHA256Trace(trace_out);
    SHA256TraceIsCorrect(trace_out);
    SeqLength(trace_out.M) == SeqLength(trace_in.M) + old(r2);
    trace_in.M == SeqSlice(trace_out.M, 0, SeqLength(trace_in.M));  // trace_in.M is a prefix of trace_out.M
    (forall i :: 0 <= i < old(r2) 
      ==> trace_out.M[SeqLength(trace_in.M) + i] == SeqSlice(input, i*SHA_BLOCKSIZE, (i+1)*SHA_BLOCKSIZE));
    last(trace_out.H)[0] == AddrMemContents(mem, WordOffset(old(r0), 0));
    last(trace_out.H)[1] == AddrMemContents(mem, WordOffset(old(r0), 1));
    last(trace_out.H)[2] == AddrMemContents(mem, WordOffset(old(r0), 2));
    last(trace_out.H)[3] == AddrMemContents(mem, WordOffset(old(r0), 3));
    last(trace_out.H)[4] == AddrMemContents(mem, WordOffset(old(r0), 4));
    last(trace_out.H)[5] == AddrMemContents(mem, WordOffset(old(r0), 5));
    last(trace_out.H)[6] == AddrMemContents(mem, WordOffset(old(r0), 6));
    last(trace_out.H)[7] == AddrMemContents(mem, WordOffset(old(r0), 7));
{
    // We need 10 slots to save/restore registers, and then the inner routine needs 19 slots for scratch space
    SUB(sp, sp, const(WordsToBytes(SHA_STACKSIZE+10)));
    assert SaneStackPointer(sp);

    // Save nonvolatile registers
    STR(lr,  sp, const(WordsToBytes(SHA_STACKSIZE+9)));
    STR(r4,  sp, const(WordsToBytes(SHA_STACKSIZE+8)));
    STR(r5,  sp, const(WordsToBytes(SHA_STACKSIZE+7)));
    STR(r6,  sp, const(WordsToBytes(SHA_STACKSIZE+6)));
    STR(r7,  sp, const(WordsToBytes(SHA_STACKSIZE+5)));
    STR(r8,  sp, const(WordsToBytes(SHA_STACKSIZE+4)));
    STR(r9,  sp, const(WordsToBytes(SHA_STACKSIZE+3)));
    STR(r10, sp, const(WordsToBytes(SHA_STACKSIZE+2)));
    STR(r11, sp, const(WordsToBytes(SHA_STACKSIZE+1)));
    STR(r12, sp, const(WordsToBytes(SHA_STACKSIZE)));

    ghost var old_mem := mem;
    assert forall j :: 0 <= j < r2*16 ==> AddrMemContents(mem, r1 + j*WORDSIZE)
            == AddrMemContents(old(mem), r1 + j*WORDSIZE) == input[j];
    trace_out := sha256_block_data_order_inner(trace_in, input);

    assert AddrMemPreservingExcept2(old_mem, mem, sp, WordOffset(sp, SHA_STACKSIZE),
                                    old(r0), WordOffset(old(r0), SHA_CTXSIZE));

    // Restore the nonvolatile registers
    LDR(lr,  sp, const(WordsToBytes(SHA_STACKSIZE+9)));
    LDR(r4,  sp, const(WordsToBytes(SHA_STACKSIZE+8)));
    LDR(r5,  sp, const(WordsToBytes(SHA_STACKSIZE+7)));
    LDR(r6,  sp, const(WordsToBytes(SHA_STACKSIZE+6)));
    LDR(r7,  sp, const(WordsToBytes(SHA_STACKSIZE+5)));
    LDR(r8,  sp, const(WordsToBytes(SHA_STACKSIZE+4)));
    LDR(r9,  sp, const(WordsToBytes(SHA_STACKSIZE+3)));
    LDR(r10, sp, const(WordsToBytes(SHA_STACKSIZE+2)));
    LDR(r11, sp, const(WordsToBytes(SHA_STACKSIZE+1)));
    LDR(r12, sp, const(WordsToBytes(SHA_STACKSIZE)));

    // Restore the stack pointer
    ADD(sp, sp, const(WordsToBytes(SHA_STACKSIZE+10)));

    assert {:split_here} {:refined} true;
}
