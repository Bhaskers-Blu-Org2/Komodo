
include "sha256-api.sdfy"
include {:verbatim} "hmac-helpers.i.dfy"
include "../memset.sdfy"
include "../kom_utils.sdfy"

#verbatim

predicate disjoint(base:int, limit:int, base':int, limit':int)
{
    limit' < base || base > limit'
}

const HMAC_KEYSIZE_BYTES:int := 32;
const HMAC_KEYSIZE_WORDS:int := 8;

const STACKSIZE_HMAC:int := 10 + STACKSIZE_SHA_ONE_SHOT;   // Make space to preserve registers

#endverbatim

procedure apply_one_opad(inline offset:word)
requires/ensures
    ValidAddrMemStateOpaque(mem);
    ValidMem(r1 + offset);
requires {:refined false}
    !interrupts_enabled(this);
reads 
    r1;
modifies
    mem; r10;
ensures
    AddrMemPreservingExcept(old(mem), mem, r1 + offset, r1 + offset + 4);
    AddrMemContents(mem, r1 + offset) == BitwiseXor(old(AddrMemContents(mem, r1 + offset)) , 0x5c5c5c5c);
{
    LDR(r10, r1, offset);
    EOR(r10, r10, 0x5c5c5c5c);
    STR(r10, r1, offset);
}

procedure apply_opad()
requires/ensures
    ValidAddrMemStateOpaque(mem);
    ValidMemRange(r1, r1 + HMAC_KEYSIZE_BYTES);
requires {:refined false}
    !interrupts_enabled(this);
reads 
    r1;
modifies
    mem; r10;
ensures
    AddrMemPreservingExcept(old(mem), mem, r1, r1 + HMAC_KEYSIZE_BYTES);
//    forall a :: r1 <= a < r1 + HMAC_KEYSIZE_BYTES && WordAligned(a) 
//        ==> AddrMemContents(mem, a) == BitwiseXor(old(AddrMemContents(mem, a)) , 0x5c5c5c5c);
    AddrMemContentsSeq(mem, r1, HMAC_KEYSIZE_WORDS) == 
      SeqXor(AddrMemContentsSeq(old(mem), r1, HMAC_KEYSIZE_WORDS), Opad(HMAC_KEYSIZE_WORDS));
{
    apply_one_opad(0);
    apply_one_opad(4);
    apply_one_opad(8);
    apply_one_opad(12);
    apply_one_opad(16);
    apply_one_opad(20);
    apply_one_opad(24);
    apply_one_opad(28);

    lemma_apply_opad_complete(old(mem), mem, r1, HMAC_KEYSIZE_WORDS);
}

procedure apply_one_ipad(inline offset:word)
requires/ensures
    ValidAddrMemStateOpaque(mem);
    ValidMem(r1 + offset);
requires {:refined false}
    !interrupts_enabled(this);
reads 
    r1;
modifies
    mem; r10;
ensures
    AddrMemPreservingExcept(old(mem), mem, r1 + offset, r1 + offset + 4);
    AddrMemContents(mem, r1 + offset) == BitwiseXor(old(AddrMemContents(mem, r1 + offset)) , 0x36363636);
{
    LDR(r10, r1, offset);
    EOR(r10, r10, 0x36363636);
    STR(r10, r1, offset);
}

procedure apply_ipad()
requires/ensures
    ValidAddrMemStateOpaque(mem);
    ValidMemRange(r1, r1 + HMAC_KEYSIZE_BYTES);
requires {:refined false}
    !interrupts_enabled(this);
reads 
    r1;
modifies
    mem; r10;
ensures
    AddrMemPreservingExcept(old(mem), mem, r1, r1 + HMAC_KEYSIZE_BYTES);
//    forall a :: r1 <= a < r1 + HMAC_KEYSIZE_BYTES && WordAligned(a) 
//        ==> AddrMemContents(mem, a) == BitwiseXor(old(AddrMemContents(mem, a)) , 0x36363636);
    AddrMemContentsSeq(mem, r1, HMAC_KEYSIZE_WORDS) == 
      SeqXor(AddrMemContentsSeq(old(mem), r1, HMAC_KEYSIZE_WORDS), Ipad(HMAC_KEYSIZE_WORDS));
{
    apply_one_ipad(0);
    apply_one_ipad(4);
    apply_one_ipad(8);
    apply_one_ipad(12);
    apply_one_ipad(16);
    apply_one_ipad(20);
    apply_one_ipad(24);
    apply_one_ipad(28);

    lemma_apply_ipad_complete(old(mem), mem, r1, HMAC_KEYSIZE_WORDS);
}

procedure hmac_inner_prep_key(ghost key:seq(word))
requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneState(this);
requires 
    !interrupts_enabled(this);
    mode_of_state(this) == Monitor;
requires
    let tmp_ptr := r1 in
    let key_ptr := r4 in

     // key points to reasonable memory location
        ValidMemRange(key_ptr, key_ptr + HMAC_KEYSIZE_BYTES)
     && key == AddrMemContentsSeq(mem, key_ptr, HMAC_KEYSIZE_WORDS)
     
     // tmp_ptr points to reasonable memory location with at least num_blocks+1 space
     && ValidMemRange(tmp_ptr, tmp_ptr + SHA_BLOCKSIZE * WORDSIZE)

     // Non-refined requirements
     && tmp_ptr >= StackBase() // || tmp_ptr + HMAC_KEYSIZE_BYTES <= StackLimit())
     && tmp_ptr >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() //|| tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE <= KOM_DIRECTMAP_VBASE )

     // Anti-aliasing via direct layout of  sp, ctx, input, tmp, key
     && tmp_ptr + SHA_BLOCKSIZE*WORDSIZE <= key_ptr
     ;
reads 
    r1; r4;
modifies
    mem; r5; r6; r10; 
ensures
    // Framing
    ValidAddrMemStateOpaque(old(mem)); 
    ValidAddrMemStateOpaque(mem); 

    // Memory framing:  We only touch one block in the tmp buffer
    AddrMemPreservingExcept(old(mem), mem, r1, r1 + HMAC_KEYSIZE_BYTES);
    ValidMemRange(r1, r1 + SHA_BLOCKSIZE * WORDSIZE);

    AddrMemContentsSeq(mem, r1, HMAC_KEYSIZE_WORDS) == SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS));

{
    ghost var tmp_ptr := r1;
    ghost var key_ptr := r4;

    // Copy key to the beginning of the tmp buffer
    MOV(r5, const(HMAC_KEYSIZE_BYTES)); 
    memcpy(r1 /* tmp_ptr */, r4 /* key_ptr */, r5, r6);
    lemma_memset_result(old(this.m), this.m, key_ptr, tmp_ptr, HMAC_KEYSIZE_WORDS);
    assert key == AddrMemContentsSeq(mem, tmp_ptr, HMAC_KEYSIZE_WORDS);

    apply_ipad();
}


procedure hmac_inner_prep_input(
    ghost input:seq(word)
    ) 
requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneState(this);
requires 
    !interrupts_enabled(this);
    mode_of_state(this) == Monitor;
requires
    let num_blocks := r2 in // Number of 64-byte blocks to process
    let input_ptr := r3 in
    let tmp_ptr := r7 in

     // In-memory input is reasonable
        isUInt32(input_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE)
     && ValidMemRange(input_ptr, input_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE)
     && input == AddrMemContentsSeq(mem, input_ptr, (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE))

     // tmp_ptr points to reasonable memory location with at least num_blocks space
     && isUInt32(tmp_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE)
     && ValidMemRange(tmp_ptr, tmp_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE)

     // Non-refined requirements
     && tmp_ptr >= StackBase() // || tmp_ptr + HMAC_KEYSIZE_BYTES <= StackLimit())
     && tmp_ptr >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() //|| tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE <= KOM_DIRECTMAP_VBASE )

     // Anti-aliasing via direct layout of  sp, ctx, input, tmp, key
     && input_ptr + (num_blocks*SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE <= tmp_ptr
      ;
reads
    r2; r3; r7;
modifies
    mem; r5; r6;
ensures
    // Framing
    ValidAddrMemStateOpaque(old(mem)); 
    ValidAddrMemStateOpaque(mem); 

    // Memory framing:  We only touch the tmp buffer
    AddrMemPreservingExcept(old(mem), mem, r7, r7 + (r2 * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE);
    ValidMemRange(r7, r7 + (r2 * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE);

    AddrMemContentsSeq(mem, r7, r2 * SHA_BLOCKSIZE + SHA_CTXSIZE) == input;

{
    ghost var num_blocks := r2; 
    ghost var input_ptr := r3; 
    ghost var tmp_ptr := r7;

    MOV(r5, const(SHA_BLOCKSIZE * WORDSIZE));
    MUL(r6, r2, r5);  // num_blocks * SHA_BLOCKSIZE * WORDSIZE
    MOV(r5, const(SHA_CTXSIZE * WORDSIZE));
    ADD(r6, r6, r5);  // num_blocks * SHA_BLOCKSIZE * WORDSIZE + SHA_CTXSIZE * WORDSIZE 
    assert r6 == (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE;

    memcpy(r7, r3, r6, r5);
    lemma_memset_result(old(this.m), this.m, input_ptr, tmp_ptr, (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE));
}

procedure hmac_inner_prep_hash(
    ghost key:seq(word),
    ghost input:seq(word)
    ) 
requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneState(this);
requires 
    !interrupts_enabled(this);
    mode_of_state(this) == Monitor;
requires
    let tmp_ptr := r1 in
    let num_blocks := r2 in // Number of 64-byte blocks to process
    let input_ptr := r3 in
    let key_ptr := r4 in

     // key points to reasonable memory location
        ValidMemRange(key_ptr, key_ptr + HMAC_KEYSIZE_BYTES)
     && key == AddrMemContentsSeq(mem, key_ptr, HMAC_KEYSIZE_WORDS)
     
     // In-memory input is reasonable
     && isUInt32(input_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE)
     && ValidMemRange(input_ptr, input_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE)
     && input == AddrMemContentsSeq(mem, input_ptr, (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE))

     // tmp_ptr points to reasonable memory location with at least num_blocks+1 space
     && isUInt32(tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE)
     && ValidMemRange(tmp_ptr, tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE)

     // We aren't hashing too many bits
     && isUInt32((num_blocks + 1) * (SHA_BLOCKSIZE * WORDSIZE * SHA_CTXSIZE))

     // Non-refined requirements
//     && disjoint(tmp_ptr, tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE, StackBase(), StackLimit())
     && tmp_ptr >= StackBase() // || tmp_ptr + HMAC_KEYSIZE_BYTES <= StackLimit())
     && tmp_ptr >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() //|| tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE <= KOM_DIRECTMAP_VBASE )

     // Anti-aliasing via direct layout of input, tmp, key
     && input_ptr + (num_blocks*SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE <= tmp_ptr
     && tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE <= key_ptr
      ;
reads
    globals; r1; r3; r4; 
modifies
    mem; r2; r5; r6; r7; r10; 
ensures
    // Framing
    ValidAddrMemStateOpaque(old(mem)); 
    ValidAddrMemStateOpaque(mem); 

    // Memory framing:  We only touch one block in the tmp buffer
    AddrMemPreservingExcept(old(mem), mem, r1, r1 + r2 * SHA_BLOCKSIZE * WORDSIZE);
    ValidMemRange(r1, r1 + r2 * SHA_BLOCKSIZE * WORDSIZE);

    r2 == old(r2) + 1;

    AddrMemContentsSeq(mem, r1, r2 * SHA_BLOCKSIZE) == SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)) + input;
{
    ghost var tmp_ptr := r1;
    ghost var num_blocks := r2; 
    ghost var input_ptr := r3; 
    ghost var key_ptr := r4;

    // Copy key to the beginning of the tmp buffer
    lemma_ValidMemRange_reduced(tmp_ptr, (num_blocks + 1) * SHA_BLOCKSIZE, num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE);
    hmac_inner_prep_key(key);

    ghost var key_mem;    // Snapshot of memory after we prep the key
    key_mem := mem;

    // Copy the input to the rest of the tmp buffer
    ADD(r7, r1, const(HMAC_KEYSIZE_BYTES));      // Skip the tmp_ptr past the key

    lemma_SHA_inequality_helper(num_blocks);
    assert (num_blocks+1) * SHA_BLOCKSIZE > SHA_BLOCKSIZE;
    calc {
        ValidMemRange(tmp_ptr, tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE);
          { lemma_ValidMemRange_offset(tmp_ptr, (num_blocks + 1) * SHA_BLOCKSIZE, SHA_CTXSIZE); }
        ValidMemRange(tmp_ptr + SHA_CTXSIZE * WORDSIZE, tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE);
        ValidMemRange(tmp_ptr + SHA_CTXSIZE * WORDSIZE, 
                      tmp_ptr + SHA_BLOCKSIZE * WORDSIZE + num_blocks * SHA_BLOCKSIZE * WORDSIZE);
        ValidMemRange(tmp_ptr + SHA_CTXSIZE * WORDSIZE, 
                      tmp_ptr + SHA_CTXSIZE * WORDSIZE + SHA_CTXSIZE * WORDSIZE + num_blocks * SHA_BLOCKSIZE * WORDSIZE);
          { assert r7 == tmp_ptr + SHA_CTXSIZE*WORDSIZE; }
        ValidMemRange(r7, r7 + SHA_CTXSIZE * WORDSIZE + r2 * SHA_BLOCKSIZE * WORDSIZE);
        ValidMemRange(r7, r7 + (SHA_CTXSIZE + r2 * SHA_BLOCKSIZE) * WORDSIZE);
    }
    lemma_AddrMemContentsSeq_framing1(old(mem), mem, input_ptr, (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE), tmp_ptr, tmp_ptr + HMAC_KEYSIZE_BYTES);
    hmac_inner_prep_input(input);

    
    ADD(r2, r2, 1);   // Need to account for the key block at the beginning

    calc {
        AddrMemContentsSeq(mem, r1, r2 * SHA_BLOCKSIZE);
        AddrMemContentsSeq(mem, tmp_ptr, (num_blocks + 1) * SHA_BLOCKSIZE);
          { lemma_AddrMemContentsSeq_adds(mem, tmp_ptr, (num_blocks + 1) * SHA_BLOCKSIZE, SHA_CTXSIZE); }
        AddrMemContentsSeq(mem, tmp_ptr, SHA_CTXSIZE) + AddrMemContentsSeq(mem, tmp_ptr + SHA_CTXSIZE * WORDSIZE, num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE);
          { 
            assert AddrMemContentsSeq(mem, tmp_ptr, SHA_CTXSIZE) == SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)) by {
              lemma_AddrMemContentsSeq_framing1(key_mem, mem, tmp_ptr, SHA_CTXSIZE, 
                                                tmp_ptr + HMAC_KEYSIZE_BYTES, 
                                                tmp_ptr + HMAC_KEYSIZE_BYTES + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE);
            }
            assert AddrMemContentsSeq(mem, tmp_ptr + SHA_CTXSIZE * WORDSIZE, num_blocks * SHA_BLOCKSIZE + HMAC_KEYSIZE_WORDS) == input; 
          }
        SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)) + input;
    }
}


procedure hmac_inner(
    ghost key:seq(word),
    ghost input:seq(word)
    ) returns (
    ghost inner_hash:seq(word)
    )
requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneState(this);
requires 
    !interrupts_enabled(this);
    mode_of_state(this) == Monitor;
requires
    // Stack is accessible
    sp >= STACKSIZE_SHA_ONE_SHOT * WORDSIZE; 
    ValidMemRange(sp - STACKSIZE_SHA_ONE_SHOT * WORDSIZE, sp);

    // K table is valid
    SaneShaGlobal(globals);
    lr == AddressOfGlobal(K_SHA256s());

    let ctx := r0 in
    let tmp_ptr := r1 in
    let num_blocks := r2 in // Number of 64-byte blocks to process
    let input_ptr := r3 in
    let key_ptr := r4 in

     // ctx points to a reasonable memory location
        ValidMemRange(ctx, ctx + SHA_CTXSIZE * WORDSIZE)

     // key points to reasonable memory location
     && ValidMemRange(key_ptr, key_ptr + HMAC_KEYSIZE_BYTES)
     && key == AddrMemContentsSeq(mem, key_ptr, HMAC_KEYSIZE_WORDS)
     
     // In-memory input is reasonable
     && isUInt32(input_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE)
     && ValidMemRange(input_ptr, input_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE)
     && input == AddrMemContentsSeq(mem, input_ptr, num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE)

     // tmp_ptr points to reasonable memory location with at least num_blocks+1 space
     && isUInt32(tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE)
     && ValidMemRange(tmp_ptr, tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE)

     // We aren't hashing too many bits
     && isUInt32((num_blocks + 1) * (SHA_BLOCKSIZE * WORDSIZE * HMAC_KEYSIZE_WORDS))

     // Non-refined requirements
//     && disjoint(tmp_ptr, tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE, StackBase(), StackLimit())
     && tmp_ptr >= StackBase() // || tmp_ptr + HMAC_KEYSIZE_BYTES <= StackLimit())
     && tmp_ptr >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() //|| tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE <= KOM_DIRECTMAP_VBASE )

     // Anti-aliasing via direct layout of  sp, ctx, input, tmp, key
     && sp <= ctx
     && ctx + SHA_CTXSIZE*WORDSIZE <= input_ptr
     && input_ptr + (num_blocks*SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE < tmp_ptr
     && tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE <= key_ptr
      ;
reads
    globals;
modifies
    mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
ensures
    // Framing
    ValidAddrMemStateOpaque(old(mem)); 
    ValidAddrMemStateOpaque(mem); 

    // Memory framing:  We only touch the stack and 8 words pointed to by ctx_ptr
    AddrMemPreservingExcept3(old(mem), mem, 
                             sp - STACKSIZE_SHA_ONE_SHOT * WORDSIZE, sp, 
                             old(r0), old(r0) + SHA_CTXSIZE * WORDSIZE,
                             old(r1), old(r1) + (old(r2) + 1) * SHA_BLOCKSIZE * WORDSIZE);
    ValidMemRange(r0, r0 + SHA_CTXSIZE * WORDSIZE);

    // Register framing
    r0 == old(r0);
    r1 == old(r1);
    r4 == old(r4);
    r8 == old(r8);
    r9 == old(r9);
    r11== old(r11);
    sp == old(sp);  
    lr == old(lr);
    
    // HMAC results
    inner_hash == AddrMemContentsSeq(mem, r0, SHA_CTXSIZE);
    SeqLength(WordSeqToBytes(SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)) + input)) <= MaxBytesForSHA();
    inner_hash == SHA256(WordSeqToBytes(SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)) + input));
{
    ghost var ctx := r0;
    ghost var tmp_ptr := r1;
    ghost var num_blocks := r2; 
    ghost var input_ptr := r3; 
    ghost var key_ptr := r4;
    
    hmac_inner_prep_hash(key, input);
    ghost var prepped_mem;
    prepped_mem := mem;

//    assert r0 == ctx;
//    assert r1 == tmp_ptr;
//    assert r2 == num_blocks + 1;
    sha256_one_shot();
    assert WordAligned(r0);
    WordAlignedAdd(r0, 1*WORDSIZE);
    WordAlignedAdd(r0, 2*WORDSIZE);
    WordAlignedAdd(r0, 3*WORDSIZE);
    WordAlignedAdd(r0, 4*WORDSIZE);
    WordAlignedAdd(r0, 5*WORDSIZE);
    WordAlignedAdd(r0, 6*WORDSIZE);
    WordAlignedAdd(r0, 7*WORDSIZE);

    inner_hash := 
        seq(AddrMemContents(mem, r0 + 0*WORDSIZE),
            AddrMemContents(mem, r0 + 1*WORDSIZE),
            AddrMemContents(mem, r0 + 2*WORDSIZE),
            AddrMemContents(mem, r0 + 3*WORDSIZE),
            AddrMemContents(mem, r0 + 4*WORDSIZE),
            AddrMemContents(mem, r0 + 5*WORDSIZE),
            AddrMemContents(mem, r0 + 6*WORDSIZE),
            AddrMemContents(mem, r0 + 7*WORDSIZE));

    calc {
        true;
        inner_hash == SHA256(WordSeqToBytes(AddrMemContentsSeq(mem, tmp_ptr, SHA_BLOCKSIZE * (num_blocks+1))));
          { 
            lemma_AddrMemContentsSeq_framing2(prepped_mem, mem, 
                                              tmp_ptr, SHA_BLOCKSIZE * (num_blocks+1), 
                                              sp - STACKSIZE_SHA_ONE_SHOT * WORDSIZE, sp,
                                              r0, r0 + SHA_CTXSIZE * WORDSIZE);
            assert AddrMemContentsSeq(mem,         tmp_ptr, SHA_BLOCKSIZE * (num_blocks+1))
                == AddrMemContentsSeq(prepped_mem, tmp_ptr, SHA_BLOCKSIZE * (num_blocks+1));
          }
        inner_hash == SHA256(WordSeqToBytes(AddrMemContentsSeq(prepped_mem, tmp_ptr, SHA_BLOCKSIZE * (num_blocks+1))));
        inner_hash == SHA256(WordSeqToBytes(AddrMemContentsSeq(prepped_mem, tmp_ptr, (num_blocks+1) * SHA_BLOCKSIZE)));
          { assert AddrMemContentsSeq(prepped_mem, tmp_ptr, (num_blocks+1) * SHA_BLOCKSIZE) == SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)) + input; }
        inner_hash == SHA256(WordSeqToBytes(SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)) + input));
    }

    lemma_package_hash_result(mem, r0, inner_hash);
}


procedure hmac_outer_prep_key(ghost key:seq(word))
requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneState(this);
requires 
    !interrupts_enabled(this);
    mode_of_state(this) == Monitor;
requires
    let tmp_ptr := r1 in
    let key_ptr := r4 in

     // key points to reasonable memory location
        ValidMemRange(key_ptr, key_ptr + HMAC_KEYSIZE_BYTES)
     && key == AddrMemContentsSeq(mem, key_ptr, HMAC_KEYSIZE_WORDS)
     
     // tmp_ptr points to reasonable memory location with at least num_blocks+1 space
     && ValidMemRange(tmp_ptr, tmp_ptr + SHA_BLOCKSIZE * WORDSIZE)

     // Non-refined requirements
     && tmp_ptr >= StackBase() // || tmp_ptr + HMAC_KEYSIZE_BYTES <= StackLimit())
     && tmp_ptr >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() //|| tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE <= KOM_DIRECTMAP_VBASE )

     // Anti-aliasing via direct layout of  sp, ctx, input, tmp, key
     && tmp_ptr + SHA_BLOCKSIZE*WORDSIZE <= key_ptr
     ;
reads 
    r1; r4;
modifies
    mem; r5; r6; r10; 
ensures
    // Framing
    ValidAddrMemStateOpaque(old(mem)); 
    ValidAddrMemStateOpaque(mem); 

    // Memory framing:  We only touch one block in the tmp buffer
    AddrMemPreservingExcept(old(mem), mem, r1, r1 + HMAC_KEYSIZE_BYTES);
    ValidMemRange(r1, r1 + SHA_BLOCKSIZE * WORDSIZE);

    AddrMemContentsSeq(mem, r1, HMAC_KEYSIZE_WORDS) == SeqXor(key, Opad(HMAC_KEYSIZE_WORDS));

{
    ghost var tmp_ptr := r1;
    ghost var key_ptr := r4;

    // Copy key to the beginning of the tmp buffer
    MOV(r5, const(HMAC_KEYSIZE_BYTES)); 
    memcpy(r1 /* tmp_ptr */, r4 /* key_ptr */, r5, r6);
    lemma_memset_result(old(this.m), this.m, key_ptr, tmp_ptr, HMAC_KEYSIZE_WORDS);
    assert key == AddrMemContentsSeq(mem, tmp_ptr, HMAC_KEYSIZE_WORDS);

    apply_opad();
}

procedure hmac_outer_prep_ctx(
    ghost inner_hash:seq(word)
    ) 
requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneState(this);
requires 
    !interrupts_enabled(this);
    mode_of_state(this) == Monitor;
requires
    let ctx_ptr := r0 in
    let tmp_ptr := r7 in

     // Hash is reasonable
        ValidMemRange(ctx_ptr, ctx_ptr + SHA_CTXSIZE * WORDSIZE)
     && inner_hash == AddrMemContentsSeq(mem, ctx_ptr, SHA_CTXSIZE)
     
     // tmp_ptr points to reasonable memory location with at least 1 ctx of space
     && isUInt32(tmp_ptr + SHA_CTXSIZE * WORDSIZE)
     && ValidMemRange(tmp_ptr, tmp_ptr + SHA_CTXSIZE * WORDSIZE)

     // Non-refined requirements
     && tmp_ptr >= StackBase() // || tmp_ptr + HMAC_KEYSIZE_BYTES <= StackLimit())
     && tmp_ptr >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() //|| tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE <= KOM_DIRECTMAP_VBASE )

     // Anti-aliasing via direct layout of ctx, tmp
     && ctx_ptr + SHA_BLOCKSIZE*WORDSIZE <= tmp_ptr
      ;
reads
    r0; r7;
modifies
    mem; r5; r6;
ensures
    // Framing
    ValidAddrMemStateOpaque(old(mem)); 
    ValidAddrMemStateOpaque(mem); 

    // Memory framing:  We only touch the tmp buffer
    AddrMemPreservingExcept(old(mem), mem, r7, r7 + SHA_CTXSIZE * WORDSIZE);
    ValidMemRange(r7, r7 + SHA_CTXSIZE * WORDSIZE);

    AddrMemContentsSeq(mem, r7, SHA_CTXSIZE) == inner_hash;

{
    ghost var ctx_ptr := r0;
    ghost var tmp_ptr := r7;

    MOV(r6, const(SHA_CTXSIZE*WORDSIZE));
    memcpy(r7, r0, r6, r5);
    lemma_memset_result(old(this.m), this.m, ctx_ptr, tmp_ptr, SHA_CTXSIZE);
}



procedure hmac_outer_prep_hash(
    ghost key:seq(word),
    ghost inner_hash:seq(word)
    ) 
requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneState(this);
requires 
    !interrupts_enabled(this);
    mode_of_state(this) == Monitor;
requires
    let ctx_ptr := r0 in
    let tmp_ptr := r1 in
    let key_ptr := r4 in

     // Hash is reasonable
        ValidMemRange(ctx_ptr, ctx_ptr + SHA_CTXSIZE * WORDSIZE)
     && inner_hash == AddrMemContentsSeq(mem, ctx_ptr, SHA_CTXSIZE)
     
     // tmp_ptr points to reasonable memory location with at least 1 block of space
     && ValidMemRange(tmp_ptr, tmp_ptr + SHA_BLOCKSIZE * WORDSIZE)

     // Key points to reasonable memory location
     && ValidMemRange(key_ptr, key_ptr + HMAC_KEYSIZE_BYTES)
     && key == AddrMemContentsSeq(mem, key_ptr, HMAC_KEYSIZE_WORDS)
     
     // Non-refined requirements
//     && disjoint(tmp_ptr, tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE, StackBase(), StackLimit())
     && tmp_ptr >= StackBase() // || tmp_ptr + HMAC_KEYSIZE_BYTES <= StackLimit())
     && tmp_ptr >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() //|| tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE <= KOM_DIRECTMAP_VBASE )

     // Anti-aliasing via direct layout of ctx, tmp, key
     && ctx_ptr + SHA_CTXSIZE*WORDSIZE <= tmp_ptr
     && tmp_ptr + SHA_BLOCKSIZE*WORDSIZE <= key_ptr
     ;
reads
    globals; r0; r1; r4;
modifies
    mem; r2; r5; r6; r7; r10;
ensures
    // Framing
    ValidAddrMemStateOpaque(old(mem)); 
    ValidAddrMemStateOpaque(mem); 

    // Memory framing:  We only touch 1 block in the tmp buffer
    AddrMemPreservingExcept(old(mem), mem, r1, r1 + SHA_BLOCKSIZE * WORDSIZE);
    ValidMemRange(r1, r1 + SHA_BLOCKSIZE * WORDSIZE);

    r2 == 1;

    AddrMemContentsSeq(mem, r1, SHA_BLOCKSIZE) == SeqXor(key, Opad(HMAC_KEYSIZE_WORDS)) + inner_hash;
{
    ghost var ctx_ptr := r0;
    ghost var tmp_ptr := r1;
    ghost var key_ptr := r4;

    // Copy key to the beginning of the tmp buffer
    lemma_ValidMemRange_reduced(tmp_ptr, SHA_BLOCKSIZE, SHA_CTXSIZE);
    hmac_outer_prep_key(key);

    ghost var key_mem;    // Snapshot of memory after we prep the key
    key_mem := mem;

    // Copy the hash to the rest of the tmp buffer
    ADD(r7, r1, const(HMAC_KEYSIZE_BYTES));      // Skip the tmp_ptr past the key

    calc {
        ValidMemRange(tmp_ptr, tmp_ptr + SHA_BLOCKSIZE * WORDSIZE);
          { lemma_ValidMemRange_offset(tmp_ptr, SHA_BLOCKSIZE, SHA_CTXSIZE); }
        ValidMemRange(tmp_ptr + SHA_CTXSIZE * WORDSIZE, tmp_ptr + SHA_CTXSIZE * WORDSIZE);
          { assert r7 == tmp_ptr + SHA_CTXSIZE*WORDSIZE; }
        ValidMemRange(r7, r7 + SHA_CTXSIZE * WORDSIZE);
    }
    lemma_AddrMemContentsSeq_framing1(old(mem), mem, ctx_ptr, SHA_CTXSIZE, tmp_ptr, tmp_ptr + HMAC_KEYSIZE_BYTES);
    hmac_outer_prep_ctx(inner_hash);
    assert AddrMemPreservingExcept(key_mem, mem, r7, r7 + SHA_CTXSIZE * WORDSIZE);
    assert r7 == tmp_ptr + HMAC_KEYSIZE_BYTES;

    
    calc {
        AddrMemContentsSeq(mem, r1, SHA_BLOCKSIZE);
        AddrMemContentsSeq(mem, tmp_ptr, SHA_BLOCKSIZE);
          { lemma_AddrMemContentsSeq_adds(mem, tmp_ptr, SHA_BLOCKSIZE, SHA_CTXSIZE); }
        AddrMemContentsSeq(mem, tmp_ptr, SHA_CTXSIZE) + AddrMemContentsSeq(mem, tmp_ptr + SHA_CTXSIZE * WORDSIZE, SHA_CTXSIZE);
          { 
            assert AddrMemContentsSeq(mem, tmp_ptr, SHA_CTXSIZE) == SeqXor(key, Opad(HMAC_KEYSIZE_WORDS)) by {
              lemma_AddrMemContentsSeq_framing1(key_mem, mem, tmp_ptr, SHA_CTXSIZE, 
                                                tmp_ptr + HMAC_KEYSIZE_BYTES, 
                                                tmp_ptr + HMAC_KEYSIZE_BYTES + SHA_CTXSIZE * WORDSIZE);
            }
            assert AddrMemContentsSeq(mem, tmp_ptr + SHA_CTXSIZE * WORDSIZE, SHA_CTXSIZE) == inner_hash; 
          }
        SeqXor(key, Opad(HMAC_KEYSIZE_WORDS)) + inner_hash;
    }
    
    MOV(r2, 1);   // Set this up for the outer hash
}


procedure hmac_outer(
    ghost key:seq(word),
    ghost inner_hash:seq(word)
    ) returns (
    ghost outer_hash:seq(word)
    )
requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneState(this);
requires 
    !interrupts_enabled(this);
    mode_of_state(this) == Monitor;
requires
    // Stack is accessible
    sp >= STACKSIZE_SHA_ONE_SHOT * WORDSIZE; 
    ValidMemRange(sp - STACKSIZE_SHA_ONE_SHOT * WORDSIZE, sp);

    // K table is valid
    SaneShaGlobal(globals);
    lr == AddressOfGlobal(K_SHA256s());

    let ctx_ptr := r0 in
    let tmp_ptr := r1 in
    let key_ptr := r4 in

     // ctx points to a reasonable memory location
        ValidMemRange(ctx_ptr, ctx_ptr + SHA_CTXSIZE * WORDSIZE)
     && inner_hash == AddrMemContentsSeq(mem, ctx_ptr, SHA_CTXSIZE)

     // key points to reasonable memory location
     && ValidMemRange(key_ptr, key_ptr + HMAC_KEYSIZE_BYTES)
     && key == AddrMemContentsSeq(mem, key_ptr, HMAC_KEYSIZE_WORDS)
     
     // tmp_ptr points to reasonable memory location with at least 1 block of space
     && isUInt32(tmp_ptr + SHA_BLOCKSIZE * WORDSIZE)
     && ValidMemRange(tmp_ptr, tmp_ptr + SHA_BLOCKSIZE * WORDSIZE)

     // We aren't hashing too many bits
     && isUInt32(SHA_BLOCKSIZE * WORDSIZE * HMAC_KEYSIZE_WORDS)

     // Non-refined requirements
//     && disjoint(tmp_ptr, tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE, StackBase(), StackLimit())
     && tmp_ptr >= StackBase() // || tmp_ptr + HMAC_KEYSIZE_BYTES <= StackLimit())
     && tmp_ptr >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() //|| tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE <= KOM_DIRECTMAP_VBASE )

     // Anti-aliasing via direct layout of  sp, ctx, input, tmp, key
     && sp <= ctx_ptr
     && ctx_ptr + SHA_CTXSIZE*WORDSIZE < tmp_ptr
     && tmp_ptr + SHA_BLOCKSIZE * WORDSIZE <= key_ptr
      ;
reads
    globals;
modifies
    mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
ensures
    // Framing
    ValidAddrMemStateOpaque(old(mem)); 
    ValidAddrMemStateOpaque(mem); 

    // Memory framing:  We only touch the stack and 8 words pointed to by ctx_ptr
    AddrMemPreservingExcept3(old(mem), mem, 
                             sp - STACKSIZE_SHA_ONE_SHOT * WORDSIZE, sp, 
                             old(r0), old(r0) + SHA_CTXSIZE * WORDSIZE,
                             old(r1), old(r1) + SHA_BLOCKSIZE * WORDSIZE);
    ValidMemRange(r0, r0 + SHA_CTXSIZE * WORDSIZE);

    // Register framing
    r0 == old(r0);
    r1 == old(r1);
    r4 == old(r4);
    r8 == old(r8);
    r9 == old(r9);
    r11== old(r11);
    sp == old(sp);  
    lr == old(lr);
    
    // HMAC results
    outer_hash == AddrMemContentsSeq(mem, r0, SHA_CTXSIZE);
    SeqLength(WordSeqToBytes(SeqXor(key, Opad(HMAC_KEYSIZE_WORDS)) + inner_hash)) <= MaxBytesForSHA();
    outer_hash == SHA256(WordSeqToBytes(SeqXor(key, Opad(HMAC_KEYSIZE_WORDS)) + inner_hash));
{
    ghost var ctx := r0;
    ghost var tmp_ptr := r1;
    ghost var key_ptr := r4;
    
    hmac_outer_prep_hash(key, inner_hash);
    ghost var prepped_mem;
    prepped_mem := mem;

//    assert r0 == ctx;
//    assert r1 == tmp_ptr;
//    assert r2 == 1;
    sha256_one_shot();
    assert WordAligned(r0);
    WordAlignedAdd(r0, 1*WORDSIZE);
    WordAlignedAdd(r0, 2*WORDSIZE);
    WordAlignedAdd(r0, 3*WORDSIZE);
    WordAlignedAdd(r0, 4*WORDSIZE);
    WordAlignedAdd(r0, 5*WORDSIZE);
    WordAlignedAdd(r0, 6*WORDSIZE);
    WordAlignedAdd(r0, 7*WORDSIZE);

    outer_hash := 
        seq(AddrMemContents(mem, r0 + 0*WORDSIZE),
            AddrMemContents(mem, r0 + 1*WORDSIZE),
            AddrMemContents(mem, r0 + 2*WORDSIZE),
            AddrMemContents(mem, r0 + 3*WORDSIZE),
            AddrMemContents(mem, r0 + 4*WORDSIZE),
            AddrMemContents(mem, r0 + 5*WORDSIZE),
            AddrMemContents(mem, r0 + 6*WORDSIZE),
            AddrMemContents(mem, r0 + 7*WORDSIZE));

    calc {
        true;
        outer_hash == SHA256(WordSeqToBytes(AddrMemContentsSeq(mem, tmp_ptr, SHA_BLOCKSIZE)));
          { 
            lemma_AddrMemContentsSeq_framing2(prepped_mem, mem, 
                                              tmp_ptr, SHA_BLOCKSIZE,
                                              sp - STACKSIZE_SHA_ONE_SHOT * WORDSIZE, sp,
                                              r0, r0 + SHA_CTXSIZE * WORDSIZE);
            assert AddrMemContentsSeq(mem,         tmp_ptr, SHA_BLOCKSIZE)
                == AddrMemContentsSeq(prepped_mem, tmp_ptr, SHA_BLOCKSIZE);
          }
        outer_hash == SHA256(WordSeqToBytes(AddrMemContentsSeq(prepped_mem, tmp_ptr, SHA_BLOCKSIZE)));
          { assert AddrMemContentsSeq(prepped_mem, tmp_ptr, SHA_BLOCKSIZE) == SeqXor(key, Opad(HMAC_KEYSIZE_WORDS)) + inner_hash; }
        outer_hash == SHA256(WordSeqToBytes(SeqXor(key, Opad(HMAC_KEYSIZE_WORDS)) + inner_hash));
    }

    lemma_package_hash_result(mem, r0, outer_hash);
}


procedure hmac(
    ghost key:seq(word),
    ghost input:seq(word)
    ) returns (
    ghost mac:seq(word)
    )
requires/ensures
    ValidAddrMemStateOpaque(mem);
    SaneState(this);
requires 
    !interrupts_enabled(this);
    mode_of_state(this) == Monitor;
    StackBytesRemaining(this, STACKSIZE_HMAC * WORDSIZE);
requires
    // Stack is accessible
    sp >= STACKSIZE_HMAC * WORDSIZE; 
    ValidMemRange(sp - STACKSIZE_HMAC * WORDSIZE, sp);

    // K table is valid
    SaneShaGlobal(globals);
    lr == AddressOfGlobal(K_SHA256s());

    let ctx := r0 in
    let tmp_ptr := r1 in
    let num_blocks := r2 in // Number of 64-byte blocks to process
    let input_ptr := r3 in
    let key_ptr := r4 in

     // ctx points to a reasonable memory location
        ValidMemRange(ctx, ctx + SHA_CTXSIZE * WORDSIZE)

     // key points to reasonable memory location
     && ValidMemRange(key_ptr, key_ptr + HMAC_KEYSIZE_BYTES)
     && key == AddrMemContentsSeq(mem, key_ptr, HMAC_KEYSIZE_WORDS)
     
     // In-memory input is reasonable
     && isUInt32(input_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE)
     && ValidMemRange(input_ptr, input_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE)
     && input == AddrMemContentsSeq(mem, input_ptr, num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE)

     // tmp_ptr points to reasonable memory location with at least num_blocks+1 space
     && isUInt32(tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE)
     && ValidMemRange(tmp_ptr, tmp_ptr + (num_blocks + 1) * SHA_BLOCKSIZE * WORDSIZE)

     // We aren't hashing too many bits
     && isUInt32((num_blocks + 1) * (SHA_BLOCKSIZE * WORDSIZE * HMAC_KEYSIZE_WORDS))

     // Non-refined requirements
     && ctx >= StackBase() 
     && tmp_ptr >= StackBase() // || tmp_ptr + HMAC_KEYSIZE_BYTES <= StackLimit())
     && tmp_ptr >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() 

     // Anti-aliasing via direct layout of  sp, ctx, input, tmp, key
     && sp <= ctx
     && ctx + SHA_CTXSIZE * WORDSIZE <= input_ptr
     && input_ptr + (num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE) * WORDSIZE < tmp_ptr
     && tmp_ptr + (num_blocks + 1)*SHA_BLOCKSIZE*WORDSIZE <= key_ptr
      ;
reads
    globals;
modifies
    mem; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12; sp; lr;
ensures
    // Framing
    ValidAddrMemStateOpaque(old(mem)); 
    ValidAddrMemStateOpaque(mem); 

    // Memory framing:  We only touch the stack, 8 words pointed to by ctx_ptr, and the tmp buffer
    AddrMemPreservingExcept3(old(mem), mem, 
                             StackLimit(), old(sp),
                             old(r0), old(r0) + SHA_CTXSIZE * WORDSIZE,
                             old(r1), old(r1) + (old(r2) + 1) * SHA_BLOCKSIZE * WORDSIZE);
    ValidMemRange(r0, r0 + SHA_CTXSIZE * WORDSIZE);

    // Calling convention
    r4 == old(r4);
    r5 == old(r5);
    r6 == old(r6);
    r7 == old(r7);
    r8 == old(r8);
    r9 == old(r9);
    r10== old(r10);
    r11== old(r11);
    sp == old(sp);  
    //lr == old(lr);
    
    // HMAC results
    mac == AddrMemContentsSeq(mem, r0, SHA_CTXSIZE);
//    //SeqLength(WordSeqToBytes(SeqXor(key, Opad(HMAC_KEYSIZE_WORDS)) + inner_hash)) <= MaxBytesForSHA();
    mac == HMAC_SHA256(key, WordSeqToBytes(input));

{
    ghost var ctx := r0;
    ghost var tmp_ptr := r1;
    ghost var num_blocks := r2; 
    ghost var input_ptr := r3; 
    ghost var key_ptr := r4;
    ghost var s:int;
    s := stack_nonvolatiles(40);

    assert MemContents(this.m, sp + 32) == old(r4);
    assert sp == old(sp) - 40;
    assert STACKSIZE_HMAC * WORDSIZE == 40 + STACKSIZE_SHA_ONE_SHOT * WORDSIZE;
    lemma_ValidMemRange_reduced(old(sp) - STACKSIZE_HMAC * WORDSIZE, STACKSIZE_HMAC, 10); 
    assert ValidMemRange(sp - STACKSIZE_SHA_ONE_SHOT * WORDSIZE, sp);

    // Prove that stack_nonvolatiles didn't disrupt the rest of memory, especially the input or key
    lemma_ParentStackPreserving_implies_AddrMemPreservingExcept(old(this), this);
    assert AddrMemPreservingExcept(old(mem), mem, StackLimit(), old(sp));
    lemma_AddrMemContentsSeq_framing1(old(mem), mem, key_ptr, HMAC_KEYSIZE_WORDS, 
                                      StackLimit(), old(sp));
    lemma_AddrMemContentsSeq_framing1(old(mem), mem, input_ptr, num_blocks * SHA_BLOCKSIZE + SHA_CTXSIZE, 
                                      StackLimit(), old(sp));

    ghost var inner_hash; 
    ghost var outer_hash;
    ghost var pre_inner_mem;
    pre_inner_mem := mem;
    inner_hash := hmac_inner(key, input);
    
    lemma_AddrMemPreservingExcept3_hierarchy(pre_inner_mem, mem, 
                             sp - STACKSIZE_SHA_ONE_SHOT * WORDSIZE, sp, 
                             StackLimit(), old(sp),
                             old(r0), old(r0) + SHA_CTXSIZE * WORDSIZE,
                             old(r1), old(r1) + (old(r2) + 1) * SHA_BLOCKSIZE * WORDSIZE);
    assert WordAligned(sp);
    WordAlignedAdd(sp, 32);
    WordAlignedAdd(sp, 28);
    WordAlignedAdd(sp, 24);
    WordAlignedAdd(sp, 20);
    WordAlignedAdd(sp, 16);
    WordAlignedAdd(sp, 12);
    WordAlignedAdd(sp,  8);
    WordAlignedAdd(sp,  4);

    // Prove that the key is still intact
    lemma_AddrMemContentsSeq_framing3(pre_inner_mem, mem, 
                                      key_ptr, HMAC_KEYSIZE_WORDS,
                                      sp - STACKSIZE_SHA_ONE_SHOT * WORDSIZE, sp, 
                                      old(r0), old(r0) + SHA_CTXSIZE * WORDSIZE,
                                      old(r1), old(r1) + (old(r2) + 1) * SHA_BLOCKSIZE * WORDSIZE);
    assert key == AddrMemContentsSeq(mem, key_ptr, HMAC_KEYSIZE_WORDS);
    
    // Prove that we can truncate tmp_ptr range
    lemma_ValidMemRange_reduced(tmp_ptr,  (num_blocks + 1) * SHA_BLOCKSIZE, num_blocks * SHA_BLOCKSIZE);
    assert ValidMemRange(tmp_ptr, tmp_ptr + SHA_BLOCKSIZE * WORDSIZE);

    outer_hash := hmac_outer(key, inner_hash);

    assert WordAligned(r0);
    WordAlignedAdd(r0, 1*WORDSIZE);
    WordAlignedAdd(r0, 2*WORDSIZE);
    WordAlignedAdd(r0, 3*WORDSIZE);
    WordAlignedAdd(r0, 4*WORDSIZE);
    WordAlignedAdd(r0, 5*WORDSIZE);
    WordAlignedAdd(r0, 6*WORDSIZE);
    WordAlignedAdd(r0, 7*WORDSIZE);

    mac := 
        seq(AddrMemContents(mem, r0 + 0*WORDSIZE),
            AddrMemContents(mem, r0 + 1*WORDSIZE),
            AddrMemContents(mem, r0 + 2*WORDSIZE),
            AddrMemContents(mem, r0 + 3*WORDSIZE),
            AddrMemContents(mem, r0 + 4*WORDSIZE),
            AddrMemContents(mem, r0 + 5*WORDSIZE),
            AddrMemContents(mem, r0 + 6*WORDSIZE),
            AddrMemContents(mem, r0 + 7*WORDSIZE));

    lemma_package_hash_result(mem, r0, mac);
    calc {
        true;
        outer_hash == SHA256(WordSeqToBytes(SeqXor(key, Opad(HMAC_KEYSIZE_WORDS)) + inner_hash));
        outer_hash == SHA256(WordSeqToBytes(SeqXor(key, Opad(HMAC_KEYSIZE_WORDS)) 
                             + SHA256(WordSeqToBytes(SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)) + input))));
          { 
            lemma_WordSeqToBytes_adds(SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)), input);
            assert WordSeqToBytes(SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)) + input)
                == WordSeqToBytes(SeqXor(key, Ipad(HMAC_KEYSIZE_WORDS)))
                 + WordSeqToBytes(input);
          }
        outer_hash == HMAC_SHA256(key, WordSeqToBytes(input));
        mac == HMAC_SHA256(key, WordSeqToBytes(input));
    }
    ghost var pre_pop_state;
    ghost var pre_pop_sp;
    pre_pop_state := this;
    pre_pop_sp := sp;
    s := unstack_nonvolatiles_except_lr(0);
}
