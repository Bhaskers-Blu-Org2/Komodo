///////////////////////////////////////////////////
//
//  Based on sha256-armv4.pl form OpenSSL 1.0.2j
//
///////////////////////////////////////////////////


include {:verbatim} "sha256.i.dfy"
include {:verbatim} "sha256-refined-helpers.i.dfy"
include {:verbatim} "sha256-refined-invariants.i.dfy"

include "../ARMdecls.sdfy"

procedure {:refined} LDRPostInc(
    out operand dst:reg,
    inout operand src:reg)
reads
    mem;
requires {:refined false}
    !interrupts_enabled(this);
    @dst != @src;
requires
    ValidAddrMemStateOpaque(mem);
    ValidMem(src);
    isUInt32(src + WORDSIZE);
ensures
    dst == AddrMemContents(mem, old(src));
    src == old(src) + WORDSIZE;
{
    // TODO: OpenSSL does this in one instruction with a load-and-increment.
    LDR(dst, src, 0);    // Prefetch
    ADD(src, src, const(WORDSIZE));    // Advance to the next input
}

procedure {:refined} LDRglobalPostInc(
    out operand dst:reg,
    inout operand base:reg,
    ghost j:int)
reads
    globals;
requires {:refined false}
    !interrupts_enabled(this);
    @dst != @base;
requires
    SaneShaGlobal(globals);
    0 <= j < K_SHA256_WORDS;
    base == AddressOfGlobal(K_SHA256s()) + j * WORDSIZE;
ensures
    dst == K_SHA256(j);
    base == AddressOfGlobal(K_SHA256s()) + (j + 1) * WORDSIZE;
{
    reveal SaneShaGlobal;
    // TODO: OpenSSL does this in one instruction with a load-and-increment.
    LDRglobal(dst, K_SHA256s(), base, 0);
    ADD(base, base, const(WORDSIZE));
}

procedure {:refined} {:timeLimitMultiplier 2} Body_00_15(
    inline i:SHA_step,
    inline perm:perm_index,
    inline input_slot:word,
    inline i_plus_2:word,
    inline i_plus_15:word,
    ghost input_ptr:word,
    ghost trace_in:SHA256Trace,
    ghost input:seq(word),
    inout operand t0:reg,
    inout operand t1:reg,
    inout operand t2:reg,
    inout operand t3:reg,
    inout operand t4:reg,
    //inout operand inp:reg,
    inout operand a:reg,
          operand b:reg,
          operand c:reg,
    inout operand d:reg,
          operand e:reg,
          operand f:reg,
          operand g:reg,
    inout operand h:reg
    ) returns (
    ghost trace_out:SHA256Trace
    )
reads
    sp; globals;
modifies
    mem; lr;
requires {:refined false}
    !interrupts_enabled(this);
    //mode_of_state(this) == Monitor;
    @t0 == OReg(R0);
    @t1 == OReg(R2);
    @t2 == OReg(GetReg(if Even(i) then 12 else 3));
    @t3 == OReg(GetReg(if Even(i) then  3 else 12));
    @t4 == OReg(R1);
    //@inp == OReg(R1);
    @a  == OReg(GetReg(4+ApplyPerm(0, perm)));
    @b  == OReg(GetReg(4+ApplyPerm(1, perm)));
    @c  == OReg(GetReg(4+ApplyPerm(2, perm)));
    @d  == OReg(GetReg(4+ApplyPerm(3, perm)));
    @e  == OReg(GetReg(4+ApplyPerm(4, perm)));
    @f  == OReg(GetReg(4+ApplyPerm(5, perm)));
    @g  == OReg(GetReg(4+ApplyPerm(6, perm)));
    @h  == OReg(GetReg(4+ApplyPerm(7, perm)));
requires/ensures
    ValidAddrMemStateOpaque(mem);
requires
    //ValidMem(sp + input_slot);
    // Stack is accessible
    ValidMemRange(sp, sp + SHA_STACKSIZE * WORDSIZE);

    // Ghost input matches in-memory input  
    SeqLength(input) == SHA_BLOCKSIZE;
    i < SHA_BLOCKSIZE ==>
        isUInt32(input_ptr + SHA_BLOCKSIZE * WORDSIZE)
     && (input_ptr + SHA_BLOCKSIZE * WORDSIZE < sp || sp + SHA_STACKSIZE * WORDSIZE <= input_ptr)    // input_ptr doesn't alias the stack
     && ValidMemRange(input_ptr, input_ptr + SHA_BLOCKSIZE * WORDSIZE)
     && InputMatchesMemory(input, input_ptr, SHA_BLOCKSIZE, mem);

    // K table adjusted properly
    SaneShaGlobal(globals);
    //ValidGlobalAddr(K_SHA256s(), lr);
    lr == AddressOfGlobal(K_SHA256s()) + i*WORDSIZE;

    i < SHA_BLOCKSIZE ==> t4 == input_ptr + (i+1)*WORDSIZE;

    input_slot == CheapMod16(i)*WORDSIZE;

    i >= 15 ==> i_plus_2  == CheapMod16(i+ 2)*WORDSIZE && ValidMem(sp+i_plus_2);
    i >= 15 ==> i_plus_15 == CheapMod16(i+15)*WORDSIZE && ValidMem(sp+i_plus_15);

    // SHA semantics
    SeqLength(trace_in.H) > 0;
    IsSHA256TraceReadyForStep(trace_in, i);
    if i == 0 || i >= 16 then last(last(trace_in.atoh)) == atoh_c(a, b, c, d, e, f, g, h)
    else last(last(trace_in.atoh)) == atoh_c(BitwiseAdd32(a, t2), b, c, d, e, f, g, h);

    // t1 holds the current value of W
    t1 == (if (i < SHA_BLOCKSIZE) then input[i] else last(trace_in.W)[i]);

    // The first 16 values in W are the byte-swapped version of the input words
    forall j :: 0 <= j < SHA_BLOCKSIZE ==> last(trace_in.W)[j] == bswap32(input[j]);

    // All previous Ws are in memory where we expect them
    WsMatchMemory(trace_in, i, sp, mem);

    // SHA tactics
    t3 == BitwiseXor(b, c);
    i >= SHA_BLOCKSIZE ==> RotateRight(t0, Sigma1(0)) == BSIG1(e);

ensures
    sp == old(sp);
    lr == old(lr) + WORDSIZE;

    // Memory framing: We only touch the stack
    AddrMemPreservingExcept(old(mem), mem, sp, sp + SHA_STACKSIZE * WORDSIZE);
    AddrMemContents(mem, sp + 16*WORDSIZE) == AddrMemContents(old(mem), sp + 16*WORDSIZE);
    AddrMemContents(mem, sp + 18*WORDSIZE) == AddrMemContents(old(mem), sp + 18*WORDSIZE);

    i < SHA_BLOCKSIZE ==> InputMatchesMemory(input, input_ptr, SHA_BLOCKSIZE, mem);
    t2 == BitwiseXor(a, b);
    a == (if 0 < i < 16 then old(BitwiseAdd32(a, t2)) else old(a));
    i >= 15 ==> t4 == AddrMemContents(mem, sp+i_plus_15);

    // Updated input ptr
    if i < 15 then t4 == input_ptr + (i+2)*WORDSIZE              // Advanced input ptr
    else 
        t4 == AddrMemContents(mem, sp + i_plus_15)
     && (if i == 15 then AddrMemContents(mem, sp+17*WORDSIZE) == input_ptr+16*WORDSIZE   // We stored the advanced input ptr on the stack
         else AddrMemContents(mem, sp+17*WORDSIZE) == old(AddrMemContents(mem,sp+17*WORDSIZE)));               // We preserved the input ptr on the stack

    IsSHA256TraceReadyForStep(trace_out, i+1);
    trace_out.M == trace_in.M;
    trace_out.H == trace_in.H;
    trace_out.W == trace_in.W;
    // t1 holds the next value of W
    t1 == (if i + 1 < SHA_BLOCKSIZE then input[i + 1] else if i + 1 <= 64 then AddrMemContents(mem, sp + i_plus_2) else t1); //last(trace_out.W)[i + 1] else t1)
    WsMatchMemory(trace_out, i+1, sp, mem);
    // The atohs almost match the outgoing variables
    last(last(trace_out.atoh)) == atoh_c(BitwiseAdd32(h, t3), a, b, c, d, e, f, g);
{
    assert WordAligned(sp);

    inline if (i < SHA_BLOCKSIZE) {
        inline if (i == SHA_BLOCKSIZE - 1) {
            // Save a copy of the incremented input pointer, so we can free up t4
            STR(t4, sp, const(17 * WORDSIZE));
        }

        EORShift(t0, e, e, RORShift(Sigma1(1) - Sigma1(0)));
        // Optimize the first case.  This is an optimization that OpenSSL misses! 
        inline if (i != 0) {
            ADDWrap(a, a, t2);  // h += Maj(a,b,c) from the past?
        }
        EORShift(t0, t0, e, RORShift(Sigma1(2) - Sigma1(0)));   // Sigma1(e)
        REV(t1, t1);
    }

    assert if (i == SHA_BLOCKSIZE - 1)
           then mem == AddrMemUpdate(old(mem), sp + 17*WORDSIZE,
                                     AddrMemContents(mem, sp + 17*WORDSIZE))
           else mem == old(mem);

    LDRglobalPostInc(t2, lr, i);
    //lemma_mod_in_bounds2(i, AddressOfGlobal(K_SHA256s()), old(lr), lr);
    ADDWrap(h, h, t1);      //  h+=X[i]  BP: X[i] = input[i]?
    assert ValidMem(sp + input_slot);
    STR(t1, sp, input_slot);  // @ BP: Save a copy of W[i] for use in subsequent W calculations

    // Prove that stack is still valid
    assert sp == old(sp);
    // Help prove that the input is still intact
    assert ValidMem(sp + 17*WORDSIZE);
    assert mem == AddrMemUpdate(AddrMemUpdate(old(mem), sp + 17*WORDSIZE,
                                              AddrMemContents(mem, sp + 17*WORDSIZE)),
                                sp + input_slot,
                                AddrMemContents(mem, sp + input_slot));
    ghost var finalmem := mem;

    EOR(t1, f, g);
    ghost var old_h := h;
    ADDWrapShift(h, h, t0, RORShift(Sigma1(0))); // h += Sigma1(e)

    // Prove that we computed Sigma1(e) correctly:
    assert h == BitwiseAdd32(old_h, BSIG1(e))
    by {
        reveal BSIG1;
        lemma_BSIGOptimization(e, 6, 11, 25);
    }

    AND(t1, t1, e);
    ADDWrap(h, h, t2);  // h += K256(i)
    EOR(t1, t1, g);     // Ch(e,f,g)
    
    assert t1 == Ch(e, f, g) by { lemma_Ch(e, f, g, t1); }

    EORShift(t0, a, a, RORShift(Sigma0(1) - Sigma0(0)));
    ADDWrap(h, h, t1);  // h += Ch(e,f,g)

    ghost var old_t1 := if i < SHA_BLOCKSIZE then bswap32(old(t1)) else old(t1);
    assert h == BitwiseAdd32(BitwiseAdd32(BitwiseAdd32(BitwiseAdd32(old(h), old_t1), BSIG1(e)), K_SHA256(i)), Ch(e, f, g));
    lemma_BitwiseAdd32Associates5(old(h), old_t1, BSIG1(e), K_SHA256(i), Ch(e, f, g), h);

//    #if $i==31
//        and  $t2,$t2,#0xff
//        cmp  $t2,#0xf2      @ done?
//    #endif

    inline if (i < SHA_BLOCKSIZE-1) {
        assert ValidMem(t4) by { // OBSERVE
            assert t4 == old(t4) == input_ptr + (i+1)*WORDSIZE;
            assert ValidMemRange(input_ptr, input_ptr + SHA_BLOCKSIZE * WORDSIZE);
            assert i < SHA_BLOCKSIZE;
        }
        LDRPostInc(t1, t4);    // Prefetch & advance to the next input
        //lemma_mod_in_bounds(i, input_ptr, old(t4), t4);
//         assert old(t4) + 4 == input_ptr + (i+1)*4 + 4 == input_ptr + (i+2)*4;
//         assert isUInt32(input_ptr + (i+2)*4);
        //assert t4 == old(t4) + 4;
        EOR(t2, a, b);            //  a^b, b^c in next round
    } else {
        //assert ValidMem(sp+i_plus_2);  // OBSERVE
        //assert ValidMem(sp+i_plus_15); // OBSERVE
        LDR(t1, sp, i_plus_2);     // @ from future BODY_16_xx 
        EOR(t2, a, b);             //  a^b, b^c in next round
        LDR(t4, sp, i_plus_15);    // @ from future BODY_16_xx
    }
    assert t2 == BitwiseXor(a, b);
    EORShift(t0,t0,a, RORShift(Sigma0(2)-Sigma0(0))); // Sigma0(a)
    AND(t3,t3,t2);      // (b^c)&=(a^b)
    ADDWrap(d,d,h);     // d+=h
    ghost var t3' := t3;
    EOR(t3,t3,b);       // Maj(a,b,c)
    assert t3 == Maj(a,b,c) by {
        assert t2 == BitwiseXor(a, b);
        assert old(t3) == BitwiseXor(b, c);
        assert t3' == BitwiseAnd(BitwiseXor(b, c), BitwiseXor(a, b));
        assert t3 == BitwiseXor(t3', b);
        lemma_Maj(a, b, c, t3);
    }
    old_h := h;
    ADDWrapShift(h,h,t0, RORShift(Sigma0(0)));   // h+=Sigma0(a)

    // Prove we computed Sigma0(a) correctly:
    assert h == TruncateWord(old_h + BSIG0(a))
    by {
        reveal BSIG0;
        lemma_BSIGOptimization(a, 2, 13, 22);
    }

    ghost var T1 := BitwiseAdd32(BitwiseAdd32(BitwiseAdd32(BitwiseAdd32(old(h), BSIG1(e)),
                                                           Ch(e,f,g)),
                                              K_SHA256(i)),
                                 old_t1);
    assert BitwiseAdd32(h, t3) == BitwiseAdd32(T1, BitwiseAdd32(BSIG0(a), t3)) by
           { lemma_BitwiseAdd32Associates3'(T1, BSIG0(a), t3); }

    // Construct a trace_out
    ghost var old_a := if i == 0 || i >= SHA_BLOCKSIZE then old(a) else old(BitwiseAdd32(a, t2));
    ghost var old_atoh := old(atoh_c(old_a, b, c, d, e, f, g, h));
    ghost var new_atoh := atoh_c(BitwiseAdd32(h, t3), old_a, old(b), old(c), d, old(e), old(f), old(g));
    lemma_BitwiseAdd32_properties(old(a));
    assert i == 0 ==> BitwiseAdd32(old(a), 0) == old(a);   // OBSERVE
    assert old_atoh.a == a;     // OBSERVE

    ghost var new_atoh_list := last(trace_in.atoh) + seq(new_atoh);
    trace_out := trace_in.(atoh := SeqDrop(trace_in.atoh, SeqLength(trace_in.H)-1) + seq(trace_in.atoh[SeqLength(trace_in.H)-1] + seq(new_atoh)));

    // OBSERVE: Triggers galore!
    assert TBlk(SeqLength(trace_in.H)-1) && TBlk(SeqLength(trace_in.H)) && TStep(i) && TStep(i + 1);
    ghost var superfluous_state_in  := SHA256_state_c(last(trace_in.H), last(trace_in.W), old_atoh);
    ghost var superfluous_state_out := SHA256_state_c(last(trace_out.H), last(trace_out.W), new_atoh);
    lemma_SHA256TransitionOKAfterSettingAtoH(trace_in, superfluous_state_in, trace_out, superfluous_state_out, i);

    assert IsSHA256TraceReadyForStep(trace_out, i+1);

    // Prove that stack is still valid
    assert sp == old(sp);
    assert mem == finalmem;
    //lemma_ValidAddrsPreservation(old(mem), mem, sp, 19, sp + 68, sp + input_slot);

    // Help prove that the input is still intact
    //assert mem == AddrMemUpdate(AddrMemUpdate(old(mem), sp + 17*WORDSIZE,
    //                                          AddrMemContents(mem, sp + 17*WORDSIZE)),
    //                            sp + input_slot,
    //                            AddrMemContents(mem, sp + input_slot));
        // by { reveal ValidAddrMemStateOpaque; // XXX: dafny opaque bug #63 }
    ghost if (i < SHA_BLOCKSIZE) {
        lemma_InputPreservation(old(mem), mem, input, input_ptr, SHA_BLOCKSIZE, sp + 17*WORDSIZE, sp + input_slot);

        // Prove input is still valid src
        //lemma_ValidSrcAddrsPreservation(old(mem), mem, input_ptr, SHA_BLOCKSIZE, input_taint, sp + 68, sp + input_slot);
     }
   
    // Prove we updated the Ws correctly
    lemma_WsIncrement(old(mem), mem, trace_in, trace_out, sp, i, sp + 17*WORDSIZE, sp + input_slot);
    assert {:split_here}{:refined} true;
    assert ValidMem(sp + 16*WORDSIZE); // OBSERVE
    assert ValidMem(sp + 18*WORDSIZE); // OBSERVE
    assert AddrMemContents(mem, sp + 18*WORDSIZE) == AddrMemContents(old(mem), sp + 18*WORDSIZE);
}

#verbatim

predicate Body_00_15LoopStateInvariantBreakdown(
    orig_mem:memmap,
    mem:memmap,
    input_ptr:word,
    orig_trace:SHA256Trace,
    current_trace:SHA256Trace,
    i:int,
    sp:word,
    globals:globalsmap,
    lr:word,
    t1:word,
    t2:word,
    t3:word,
    t4:word,
    input:seq<word>,
    a:word, b:word, c:word, d:word, e:word, f:word, g:word, h:word
    )
{
    0 <= i <= SHA_BLOCKSIZE
 && ValidMemRange(sp, sp + SHA_STACKSIZE * WORDSIZE)
 && ValidMem(sp + CheapMod16(i)*WORDSIZE)
 && ValidMem(sp + CheapMod16(i+9)*WORDSIZE)
 && ValidAddrMemStateOpaque(orig_mem)
 && ValidAddrMemStateOpaque(mem)

    // K table adjusted properly
 && SaneShaGlobal(globals)
// && ValidGlobalAddr(K_SHA256s(), lr)
 && lr == AddressOfGlobal(K_SHA256s()) + i*WORDSIZE

    // Ghost input matches in-memory input
 && SeqLength(input) == SHA_BLOCKSIZE
 && (i < SHA_BLOCKSIZE ==>
        isUInt32(input_ptr + 16*WORDSIZE)
     && (input_ptr + 16*WORDSIZE < sp || sp + 19*WORDSIZE <= input_ptr)    // input_ptr doesn't alias the stack
     && ValidMemRange(input_ptr, input_ptr + SHA_BLOCKSIZE * WORDSIZE)
     && InputMatchesMemory(input, input_ptr, SHA_BLOCKSIZE, mem)
    )

 && ValidMem(sp + CheapMod16(i +  2)*WORDSIZE)
 && ValidMem(sp + CheapMod16(i + 15)*WORDSIZE)

 && t3 == BitwiseXor(b, c)

    // Memory framing: We only touch the stack
 && AddrMemPreservingExcept(orig_mem, mem, sp, sp + SHA_STACKSIZE * WORDSIZE)
 && AddrMemContents(mem, sp + 16*WORDSIZE) == AddrMemContents(orig_mem, sp + 16*WORDSIZE)
 && AddrMemContents(mem, sp + 18*WORDSIZE) == AddrMemContents(orig_mem, sp + 18*WORDSIZE)

    // SHA semantics
 && SeqLength(current_trace.H) > 0
 && IsSHA256TraceReadyForStep(current_trace, i)
 && current_trace.M == orig_trace.M
 && current_trace.H == orig_trace.H
 && current_trace.W == orig_trace.W
 && (last(last(current_trace.atoh)) == 
        if i == 0 then 
            atoh_c(a, b, c, d, e, f, g, h)
        else 
            atoh_c(BitwiseAdd32(a, t2), b, c, d, e, f, g, h))

    // t1 holds the current value of W
 && t1 == (if (i < 16) then input[i] else if i + 1 <= 64 then AddrMemContents(mem, sp + CheapMod16(i+1)*WORDSIZE) else last(current_trace.W)[i])

    // The first 16 values in W are the byte-swapped version of the input words
 && (forall j :: 0 <= j < 16 ==> last(current_trace.W)[j] == bswap32(input[j]))

    // All previous Ws are in memory where we expect them
 && (16 <= i < 64 ==> (forall j :: i - 16 <= j < i ==> last(current_trace.W)[j] == AddrMemContents(mem, sp + CheapMod16(j)*WORDSIZE)))
 && (i < SHA_BLOCKSIZE ==> (forall j :: 0 <= j < i ==> last(current_trace.W)[j] == AddrMemContents(mem, sp + j*WORDSIZE)))
 && (i < (SHA_BLOCKSIZE-1) ==> ValidMem(t4) && AddrMemContents(mem, t4) == input[i+1])

     // Updated input ptr
 && (if i < SHA_BLOCKSIZE then t4 == input_ptr + (i+1)*WORDSIZE         // Correctly advanced input ptr
     else AddrMemContents(mem, sp+17*WORDSIZE) == input_ptr + 16*WORDSIZE)             // We preserved the advanced input ptr on the stack

 && (i >= SHA_BLOCKSIZE ==> t4 == AddrMemContents(mem, sp + CheapMod16(i+14)*WORDSIZE))
}

#endverbatim

procedure {:refined} {:recursive} {:timeLimitMultiplier 2} Body_00_15UnrolledRecursive(
    inline n:int,
    inline i:int,
    inline perm:perm_index,
    ghost input_ptr:word,
    ghost orig_trace:SHA256Trace,
    ghost trace_in:SHA256Trace,
    ghost input:seq(word),
    inout operand t0:word,
    inout operand t1:word,
    inout operand t2:word,
    inout operand t3:word,
    inout operand t4:word,
    inout operand a:word,
    inout operand b:word,
    inout operand c:word,
    inout operand d:word,
    inout operand e:word,
    inout operand f:word,
    inout operand g:word,
    inout operand h:word
    ) returns (
    ghost trace_out:SHA256Trace
    )
  requires
    0 <= n <= SHA_BLOCKSIZE;
    n == SHA_BLOCKSIZE - i;
    perm == OpaqueMod(i, 8);
requires {:refined false}
    !interrupts_enabled(this);
    @t0 == OReg(R0);
    @t1 == OReg(R2);
    @t2 == OReg(GetReg(if Even(i) then 12 else 3));
    @t3 == OReg(GetReg(if Even(i) then  3 else 12));
    @t4 == OReg(R1);
    //@inp == OReg(R1);
    @a  == OReg(GetReg(4+ApplyPerm(0, perm)));
    @b  == OReg(GetReg(4+ApplyPerm(1, perm)));
    @c  == OReg(GetReg(4+ApplyPerm(2, perm)));
    @d  == OReg(GetReg(4+ApplyPerm(3, perm)));
    @e  == OReg(GetReg(4+ApplyPerm(4, perm)));
    @f  == OReg(GetReg(4+ApplyPerm(5, perm)));
    @g  == OReg(GetReg(4+ApplyPerm(6, perm)));
    @h  == OReg(GetReg(4+ApplyPerm(7, perm)));
  requires
    Body_00_15LoopStateInvariantBreakdown(mem, mem, input_ptr, orig_trace, trace_in, i, sp, globals, lr,
                                          t1, t2, t3, t4, input,
                                          a, b, c, d, e, f, g, h);
  reads
    sp; globals;
  modifies
    mem; lr;
  ensures
    let arr := seq8(a, b, c, d, e, f, g, h) in
        Body_00_15LoopStateInvariantBreakdown(old(mem), mem, input_ptr, orig_trace, trace_out, 16, sp, globals, lr,
                                              t1, if Even(n) then t2 else t3, if Even(n) then t3 else t2, t4, input,
                                              SelectPerm(arr, 0, perm), SelectPerm(arr, 1, perm), SelectPerm(arr, 2, perm),
                                              SelectPerm(arr, 3, perm), SelectPerm(arr, 4, perm), SelectPerm(arr, 5, perm),
                                              SelectPerm(arr, 6, perm), SelectPerm(arr, 7, perm));
{
    inline if (0 < n <= SHA_BLOCKSIZE && 0 <= i < SHA_BLOCKSIZE) {
        assert OpaqueMod(i + 1, 8) == (if perm == 7 then 0 else perm + 1) by { reveal OpaqueMod; }
        ghost var trace_mid:SHA256Trace;
        trace_mid := Body_00_15(i, perm,
                                CheapMod16(i)*WORDSIZE, CheapMod16(i+2)*WORDSIZE, CheapMod16(i+15)*WORDSIZE,
                                input_ptr, trace_in, input,
                                t0, t1, t2, t3, t4,
                                a, b, c, d, e, f, g, h);
        trace_out := Body_00_15UnrolledRecursive(n-1, i+1, if perm == 7 then 0 else perm + 1,
                                                 input_ptr, orig_trace, trace_mid, input,
                                                 t0, t1, t3, t2, t4,
                                                 h, a, b, c, d, e, f, g);
    }
    else {
        assert OpaqueMod(i, 8) == 0 by { reveal OpaqueMod; }
        trace_out := trace_in;
    }
}

procedure {:refined} Body_00_15LoopUnrolled(
    ghost input_ptr:word,
    ghost trace_in:SHA256Trace,
    ghost input:seq(word)
    ) returns (
    ghost trace_out:SHA256Trace
    )
    requires Body_00_15LoopStateInvariantBreakdown(mem, mem, input_ptr, trace_in, trace_in, 0, sp, globals, lr,
                                                   r2, r12, r3, r1, input,
                                                   r4, r5, r6, r7, r8, r9, r10, r11);
    requires {:refined false} !interrupts_enabled(this);
    reads  sp; globals;
    modifies mem; lr; r0; r1; r2; r3; r4; r5; r6; r7; r8; r9; r10; r11; r12;
    ensures  Body_00_15LoopStateInvariantBreakdown(old(mem), mem, input_ptr, trace_in, trace_out, 16, sp, globals, lr,
                                                   r2, r12, r3, r1, input,
                                                   r4, r5, r6, r7, r8, r9, r10, r11);
{
    assert OpaqueMod(0, 8) == 0 by { reveal OpaqueMod; }
    trace_out := Body_00_15UnrolledRecursive(16, 0, 0, input_ptr, trace_in, trace_in, input,
                                             r0, r2, r12, r3, r1,
                                             r4, r5, r6, r7, r8, r9, r10, r11);
}

