include {:verbatim} "kom_common.i.dfy"
include {:verbatim} "pagedb.i.dfy"
include {:verbatim} "smcapi.i.dfy"

include "ARMdecls.sdfy"
include "kom_utils.sdfy"
include "memset.sdfy"

/* Register allocation for init_addrspace paths:
 * r0 temp / err out
 * r1 addrspace_pagenr in
 * r2 l1pt_pagenr in
 * r3 temp
 * r4 addrspace_page pagedb entry offset
 * r5 l1pt_page pagedb entry offset
 * r6 addrspace monvaddr
 * r7 l1pt paddr & monvaddr
 * r12 pagedb global base
 */

#verbatim
function initAddrspaceEntry(addrspace_page:PageNr, l1pt_page:PageNr): PageDbEntry
{
    PageDbEntryTyped(addrspace_page, Addrspace(l1pt_page, 1, InitState))
}

function initL1PTEntry(addrspace_page:PageNr): PageDbEntry
{
    PageDbEntryTyped(addrspace_page, L1PTable(SeqRepeat(NR_L1PTES, Nothing)))
}
#endverbatim

procedure init_addrspace_mem(
    operand addrspace_page:reg,
    operand l1pt_page:reg,
    operand addrspace_va:reg,
    out operand tmp:reg,
    out operand tmp2:reg,
    out operand tmp3:reg)
    requires/ensures
        SaneState(this);
    requires
        @tmp != @addrspace_va && @tmp != @tmp2 && @tmp != @tmp3 && @tmp != OSP;
        @tmp2 != @l1pt_page && @tmp2 != @addrspace_va && @tmp2 != @tmp3 && @tmp2 != OSP;
        @tmp3 != @addrspace_va && @tmp3 != OSP;
        validPageNr(addrspace_page);
        validPageNr(l1pt_page);
        addrspace_page != l1pt_page;
        addrspace_va == page_monvaddr(addrspace_page);
    reads
        globals;
    modifies
        mem;
    ensures
        SmcProcedureInvariant(old(this), this);
        forall i :: ValidMem(i)
            && !(page_monvaddr(old(addrspace_page)) <= i < page_monvaddr(old(addrspace_page)) + PAGESIZE)
            && !(page_monvaddr(old(l1pt_page)) <= i < page_monvaddr(old(l1pt_page)) + PAGESIZE)
            ==> MemContents(this.m, i) == MemContents(old(this).m, i);
        pageContentsCorresponds(old(addrspace_page),
                old(initAddrspaceEntry(addrspace_page, l1pt_page)),
                extractPage(this.m, old(addrspace_page)));
        pageContentsCorresponds(old(l1pt_page), initL1PTEntry(old(addrspace_page)),
                extractPage(this.m, old(l1pt_page)));
{
    reveal pageContentsCorresponds;
    reveal pageDbAddrspaceCorresponds;

    page_paddr_impl(tmp, l1pt_page, tmp2);

    STR(tmp, addrspace_va, const(ADDRSPACE_L1PT_PHYS));
    assert MemContents(this.m, addrspace_va + ADDRSPACE_L1PT_PHYS)
        == page_paddr(old(l1pt_page));

    ADD(tmp, tmp, const(KOM_DIRECTMAP_VBASE));
    assert tmp == page_monvaddr(old(l1pt_page));
    STR(tmp, addrspace_va, const(ADDRSPACE_L1PT));
    assert MemContents(this.m, addrspace_va + ADDRSPACE_L1PT)
        == page_monvaddr(old(l1pt_page));

    tmp2 := 1;
    STR(tmp2, addrspace_va, const(ADDRSPACE_REF));
    assert MemContents(this.m, addrspace_va + ADDRSPACE_REF) == 1;

    tmp2 := const(KOM_ADDRSPACE_INIT);
    STR(tmp2, addrspace_va, const(ADDRSPACE_STATE));
    assert MemContents(this.m, addrspace_va + ADDRSPACE_STATE) == KOM_ADDRSPACE_INIT;

    tmp2 := 0;
    tmp3 := const(PAGESIZE);
    memset(tmp, tmp2, tmp3);

    ghost var l1pg := extractPage(this.m, old(l1pt_page));
    ghost var emptyptes := SeqRepeat(NR_L1PTES, Nothing);
    assert pageDbL1PTableCorresponds(old(l1pt_page), L1PTable(emptyptes), l1pg)
    by {
        reveal pageDbL1PTableCorresponds;
        forall m:addr :| addrInPage(m, old(l1pt_page)) :: l1pg[m] == 0
        {
            assert page_monvaddr(old(l1pt_page)) <= m
                    < page_monvaddr(old(l1pt_page)) + PAGESIZE;
            assert MemContents(this.m, m) == 0;
        }
    }
}

procedure init_addrspace_pagedb(
    operand addrspace_page:reg, // r1
    ghost l1pt_page:PageNr,
    operand pagedb_base:reg, // r12
    inout operand addrspace_entry:reg, // r4
    inout operand l1pt_entry:reg, // r5
    out operand addrspace_va:reg, // r6
    out operand tmp:reg) // r0
    requires/ensures
        SaneState(this);
    requires
        addrspace_page != l1pt_page;
        validPageNr(addrspace_page);
        validPageNr(l1pt_page);
        addrspace_entry == G_PAGEDB_ENTRY(addrspace_page);
        l1pt_entry == G_PAGEDB_ENTRY(l1pt_page);
        pagedb_base == AddressOfGlobal(PageDb());
        @addrspace_va != @addrspace_page && @addrspace_va != @pagedb_base
            && @addrspace_va != @addrspace_entry && @addrspace_va != @l1pt_entry
            && @addrspace_va != @tmp && @addrspace_va != OSP;
        @tmp != @addrspace_page && @tmp != @pagedb_base
            && @tmp != @addrspace_entry && @tmp != @l1pt_entry && @tmp != OSP;
        @addrspace_entry != @addrspace_page && @addrspace_entry != @pagedb_base
            && @addrspace_entry != @l1pt_entry && @addrspace_entry != OSP;
        @l1pt_entry != @pagedb_base && @l1pt_entry != @addrspace_page && @l1pt_entry != OSP;
    modifies
        globals;
    ensures
        SmcProcedureInvariant(old(this), this);
        GlobalsPreservingExcept(old(this), this, set(PageDb()));
        addrspace_va == page_monvaddr(old(addrspace_page));
        pageDbEntryCorresponds(old(initAddrspaceEntry(addrspace_page, l1pt_page)),
                               extractPageDbEntry(this.m, old(addrspace_page)));
        pageDbEntryCorresponds(old(initL1PTEntry(addrspace_page)),
                               extractPageDbEntry(this.m, l1pt_page));
        forall p :: validPageNr(p) && p != old(addrspace_page) && p != l1pt_page
            ==> extractPageDbEntry(old(this).m, p) == extractPageDbEntry(this.m, p);
{
    /* update addrspace entry in pagedb */
    page_monvaddr_impl(addrspace_va, addrspace_page, tmp);
    tmp := const(KOM_PAGE_ADDRSPACE);
    update_pagedb_entry(old(addrspace_page),
                        old(initAddrspaceEntry(addrspace_page, l1pt_page)),
                        addrspace_entry,
                        tmp,
                        addrspace_va,
                        pagedb_base);

    /* Update l1pt entry in pagedb */
    tmp := const(KOM_PAGE_L1PTABLE);
    update_pagedb_entry(l1pt_page,
                        old(initL1PTEntry(addrspace_page)),
                        l1pt_entry,
                        tmp,
                        addrspace_va,
                        pagedb_base);
}

procedure init_addrspace(
    operand addrspace_page:reg,
    operand l1pt_page:reg,
    inout operand addrspace_entry:reg, // r4
    inout operand l1pt_entry:reg, // r5
    operand pagedb_base:reg,
    out operand tmp1:reg, // r6
    out operand tmp2:reg, // r7
    out operand tmp3:reg, // r8
    out operand tmp4:reg, // r9
    ghost pagedb_in: PageDb) returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
    requires
        @addrspace_entry == OReg(R4) && @l1pt_entry == OReg(R5)
            && @tmp1 == OReg(R6) && @tmp2 == OReg(R7) && @tmp3 == OReg(R8)
            && @tmp4 == OReg(R9);
        @addrspace_page != @addrspace_entry && @addrspace_page != @l1pt_entry
            && @addrspace_page != @tmp1 && @addrspace_page != @tmp2
            && @addrspace_page != @tmp3 && @addrspace_page != @tmp4;
        @l1pt_page != @addrspace_entry && @l1pt_page != @l1pt_entry
            && @l1pt_page != @tmp1 && @l1pt_page != @tmp2 && @l1pt_page != @tmp3
            && @l1pt_page != @tmp4;
        @pagedb_base != @addrspace_entry && @pagedb_base != @l1pt_entry
            && @pagedb_base != @tmp1 && @pagedb_base != @tmp2
            && @pagedb_base != @tmp3 && @pagedb_base != @tmp4;
        addrspace_page != l1pt_page;
        validPageNr(addrspace_page);
        validPageNr(l1pt_page);
        l1pt_page % 4 == 0;
        addrspace_entry == G_PAGEDB_ENTRY(addrspace_page);
        l1pt_entry == G_PAGEDB_ENTRY(l1pt_page);
        pagedb_base == AddressOfGlobal(PageDb());
        validPageDb(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
        pageIsFree(pagedb_in, addrspace_page);
        pageIsFree(pagedb_in, l1pt_page);
    modifies
        globals; mem;
    ensures
        SmcProcedureInvariant(old(this),this);
        GlobalsPreservingExcept(old(this),this, set(PageDb()));
        old(specPageDb(smc_initAddrspace_premium(pagedb_in, addrspace_page, l1pt_page))) == pagedb;
        pageDbCorresponds(this.m, pagedb);
{
    ghost var gaddrspace_entry := initAddrspaceEntry(addrspace_page, l1pt_page);
    ghost var gl1pt_entry := initL1PTEntry(addrspace_page);
    pagedb := pagedb_in[addrspace_page := gaddrspace_entry][l1pt_page := gl1pt_entry];

    /* Update entries in PageDb */
    init_addrspace_pagedb(addrspace_page, l1pt_page, pagedb_base,
                          addrspace_entry, l1pt_entry, tmp1, tmp2);
    // tmp1 := addrspace_va
    assert pageDbEntryCorresponds(gaddrspace_entry,
                                  extractPageDbEntry(this.m, old(addrspace_page)));
    assert pageDbEntryCorresponds(gl1pt_entry,
                                  extractPageDbEntry(this.m, old(l1pt_page)));

    /* Update pages in memory */
    init_addrspace_mem(addrspace_page, l1pt_page, tmp1, tmp2, tmp3, tmp4);

    assert pageDbCorrespondsOnly(this.m, pagedb, old(addrspace_page));
    assert pageDbCorrespondsOnly(this.m, pagedb, old(l1pt_page));

    // other pages haven't changed
    assert forall p :: validPageNr(p) && p != old(addrspace_page) && p != old(l1pt_page)
        ==> extractPageDbEntry(old(this).m, p) == extractPageDbEntry(this.m, p)
            && extractPage(old(this).m, p) == extractPage(this.m, p);
    assert forall p :: validPageNr(p) && p != old(addrspace_page) && p != old(l1pt_page)
        ==> pageDbCorrespondsOnly(old(this).m, pagedb, p);

    assert old(specPageDb(smc_initAddrspace_premium(pagedb_in, addrspace_page,
                                                    l1pt_page))) == pagedb
        && pageDbCorresponds(this.m, pagedb)
        by { reveal smc_initAddrspace_premium; }
}

#verbatim
lemma lemma_mask3IsMod4(x:word)
    ensures BitwiseAnd(x, 3) == x % 4;
{
    assert pow2(2) == 4 by { reveal_pow2(); }
    calc {
        BitwiseAnd(x, 3);
        BitsAsWord(BitAnd(WordAsBits(x), WordAsBits(3)));
        { calc {
          BitmaskLow(2);
          BitAtPos(2) - 1;
          { assert BitsAsWord(BitAtPos(2)) == 4;
            reveal_BitsAsWord(); }
          4 - 1;
          3;
        } reveal_WordAsBits(); }
        BitsAsWord(BitAnd(WordAsBits(x), BitmaskLow(2)));
        { lemma_BitmaskAsWord(x, 2); }
        x % pow2(2);
    }
}
#endverbatim

procedure kom_smc_init_addrspace(
    operand addrspace_page:reg,
    operand l1pt_page:reg,
    operand pagedb_base:reg,
    out operand err:reg,
    ghost pagedb_in: PageDb) returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
    requires
        validPageDb(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
        pagedb_base == AddressOfGlobal(PageDb());
        @addrspace_page == OReg(R1);
        @l1pt_page == OReg(R2);
        @err == OReg(R0);
        @pagedb_base == OReg(R12);
    modifies
        globals; mem; r4; r5; r6; r7; r8; r9;
    ensures
        SmcProcedureInvariant(old(this), this);
        GlobalsPreservingExcept(old(this), this, set(PageDb()));
        tuple(pagedb, err)
            == old(smc_initAddrspace_premium(pagedb_in, addrspace_page, l1pt_page));
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    reveal_pageDbEntryCorresponds();
    pagedb := pagedb_in;
    reveal_smc_initAddrspace_premium();

    // check alignment of l1pt page
    AND(err, l1pt_page, 3);
    lemma_mask3IsMod4(l1pt_page);
    assert err == l1pt_page % 4;

    if (addrspace_page == l1pt_page) {
        err := const(KOM_ERR_INVALID_PAGENO);
    } else if (addrspace_page >= const(KOM_SECURE_NPAGES)) {
        err := const(KOM_ERR_INVALID_PAGENO);
    } else if (l1pt_page >= const(KOM_SECURE_NPAGES)) {
        err := const(KOM_ERR_INVALID_PAGENO);
    } else if (err != 0) {
        err := const(KOM_ERR_INVALID_PAGENO);
    } else {
        load_page_type(addrspace_page, pagedb_base, r4, err, pagedb);
        if (err == const(KOM_PAGE_FREE)) {
            assert pageIsFree(pagedb, addrspace_page);
            load_page_type(l1pt_page, pagedb_base, r5, err, pagedb);
            if (err == const(KOM_PAGE_FREE)) {
                assert pageIsFree(pagedb, l1pt_page);
                pagedb := init_addrspace(addrspace_page, l1pt_page, r4, r5,
                                         pagedb_base, r6, r7, r8, r9, pagedb);
                err := const(KOM_ERR_SUCCESS);
            } else {
                err := const(KOM_ERR_PAGEINUSE);
            }
        } else {
            err := const(KOM_ERR_PAGEINUSE);
        }
    }

    assert err == old(specErr(smc_initAddrspace(pagedb_in, addrspace_page, l1pt_page)));
}
