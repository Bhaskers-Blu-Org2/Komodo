include {:verbatim} "kom_common.i.dfy"
include {:verbatim} "pagedb.i.dfy"
include {:verbatim} "smcapi.i.dfy"
include {:verbatim} "psrbits.i.dfy"

include "ARMdecls.sdfy"
include "kom_utils.sdfy"
include "init_addrspace.sdfy"
include "init_dispatcher.sdfy"
include "init_l2ptable.sdfy"
include "map_secure.sdfy"
include "map_insecure.sdfy"
include "entry.sdfy"
include "finalise.sdfy"
include "stop.sdfy"
include "remove.sdfy"

//=============================================================================
// Top-level SMC handler
//=============================================================================

procedure {:frame false} smc_handler_inner(
    operand callno:reg,
    operand arg1:reg,
    operand arg2:reg,
    operand arg3:reg,
    operand arg4:reg,
    operand pagedb_base:addr,
    out operand err:reg,
    out operand retval:reg,
    ghost stack_bytes: int,
    ghost pagedb_in: PageDb) returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this, stack_bytes);
    requires
        @callno == OReg(R0) && @arg1 == OReg(R1) && @arg2 == OReg(R2)
            && @arg3 == OReg(R3) && @arg4 == OReg(R4);
        @err == OReg(R0) && @retval == OReg(R1);
        @pagedb_base == OReg(R12) && pagedb_base == AddressOfGlobal(PageDb());
        stack_bytes >= BANKED_FRAMESIZE + EXCEPTION_STACK_BYTES;
        validPageDb(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
        UsermodeContinuationInvariantDef();
        UsermodeContinuationPreconditionDef();
        this.conf.scr.ns == NotSecure;
    ensures
        StackPreserving(old(this), this);
        BankedRegsInvariant(old(this), this);
        SpsrsInvariant(old(this), this);
        mode_of_state(this) == mode_of_state(old(this));
        this.conf.scr.ns == old(this).conf.scr.ns;
        smchandlerRelation(old(this), pagedb_in, this, pagedb);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    // is this an enter/resume call?
    ghost var entry := callno == KOM_SMC_ENTER || callno == KOM_SMC_RESUME;
    MOV(r5, 0);
    if (callno == const(KOM_SMC_ENTER)) {
        MOV(r5, 1);
    } else if (callno == const(KOM_SMC_RESUME)) {
        MOV(r5, 1);
    }
    assert if entry then r5 == 1 else r5 == 0;

    if (r5 == 1) {
        ghost var s0 := this;
        pagedb := kom_smc_enterresume(callno, arg1, arg2, arg3, arg4, r12, err, retval,
                                      pagedb_in, stack_bytes);
        lemma_ValidEntryPre(old(this), s0, pagedb_in, this, pagedb,
                            old(arg1), old(arg2), old(arg3), old(arg4));
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb);
    } else if (callno == const(KOM_SMC_QUERY)) {
        pagedb := pagedb_in;
        MOV(retval, 0);
        MOVW(err, 0x646f);
        // TODO: use MOVT
        ADD(err, err, 0x4b000000);
        ADD(err, err, 0x6d0000);
        assert err == KOM_MAGIC; // 0x4b6d646f
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb);
    } else if (callno == const(KOM_SMC_GETPHYSPAGES)) {
        pagedb := pagedb_in;
        MOV(retval, const(KOM_SECURE_NPAGES));
        MOV(err, const(KOM_ERR_SUCCESS));
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb);
    } else if (callno == const(KOM_SMC_INIT_ADDRSPACE)) {
        pagedb := kom_smc_init_addrspace(arg1, arg2, r12, err, pagedb_in);
        MOV(retval, 0);
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb)
            by { reveal_smc_initAddrspace_premium(); }
    } else if (callno == const(KOM_SMC_INIT_DISPATCHER)) {
        pagedb := kom_smc_init_dispatcher(arg1, arg2, arg3, r12, err, r4, r5, pagedb_in);
        MOV(retval, 0);
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb)
            by { reveal_smc_initDispatcher_premium(); }
    } else if (callno == const(KOM_SMC_INIT_L2PTABLE)) {
        pagedb := kom_smc_init_l2ptable(arg1, arg2, arg3, r12, err, pagedb_in);
        MOV(retval, 0);
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb)
            by { reveal_smc_initL2PTable_premium(); }
    } else if (callno == const(KOM_SMC_MAP_SECURE)) {
        ghost if (!(arg4 == 0 || !physPageIsInsecureRam(arg4))) {
            assert contentsOfPhysPage(old(this), arg4) == contentsOfPhysPage(this, arg4)
                by { assert InsecureMemInvariant(old(this), this); }
        }
        pagedb := kom_smc_map_secure(arg1, arg2, arg3, arg4, r12, err, pagedb_in);
        MOV(retval, 0);
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb)
            by { reveal_smc_mapSecure_premium(); }
    } else if (callno == const(KOM_SMC_MAP_INSECURE)) {
        pagedb := kom_smc_map_insecure(arg1, arg2, arg3, r12, err, pagedb_in);
        MOV(retval, 0);
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb)
            by { reveal_smc_mapInsecure_premium(); }
    } else if (callno == const(KOM_SMC_REMOVE)) {
        pagedb := kom_smc_remove(arg1, r12, err, pagedb_in);
        MOV(retval, 0);
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb)
            by { reveal_smc_remove_premium(); }
    } else if (callno == const(KOM_SMC_FINALISE)) {
        pagedb := kom_smc_finalise(arg1, r12, err, pagedb_in);
        MOV(retval, 0);
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb)
            by { reveal_smc_finalise_premium(); }
    } else if (callno == const(KOM_SMC_STOP)) {
        pagedb := kom_smc_stop(arg1, r12, err, pagedb_in);
        MOV(retval, 0);
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb)
            by { reveal_smc_stop_premium(); }
    } else {
        pagedb := pagedb_in;
        MOV(err, const(KOM_ERR_INVALID));
        MOV(retval, 0);
        assert smchandlerRelation(old(this), pagedb_in, this, pagedb);
    }
}

#verbatim
const ARM_SCTLR_V:word := 0x2000; // SCTLR vectors bit (1 = "hivecs" setting)

predicate maybe_inject_interrupt_invariants(s:state, r:state)
    requires ValidState(s) && ValidState(r)
{
    reveal_ValidRegState();
    reveal_ValidSRegState();

    (forall m :: m !in {Monitor, IRQ, FIQ}
        ==> (m != User ==> s.sregs[spsr(m)] == r.sregs[spsr(m)])
                && s.regs[LR(m)] == r.regs[LR(m)])
    && forall m :: s.regs[SP(m)] == r.regs[SP(m)]
}
#endverbatim

procedure {:frame false} maybe_inject_interrupt(out operand tmp1:reg,
                                    out operand tmp2:reg, out operand tmp3:reg)
    requires/ensures
        SaneState(this);
    requires
        @tmp1 == OReg(R2) && @tmp2 == OReg(R3) && @tmp3 == OReg(R4);
    reads
        mem; sctlr; vbar;
    modifies
        // FIXME: vale-generated framing seems to be broken for updates to sregs
        globals; lr; spsr_mon; lr_fiq; lr_irq;
    ensures
        GlobalsPreservingExcept(old(this), this, set(PendingInterruptOp()));
        AddrMemInvariant(old(this), this);
        CoreRegPreservingExcept(old(this), this, set(@tmp1, @tmp2, @tmp3, OLR));
        maybe_inject_interrupt_invariants(old(this), this);
        this.conf.scr == old(this).conf.scr;
        spsr_mon == old(spsr_mon)
            || (ValidPsrWord(spsr_mon) && decode_mode(psr_mask_mode(spsr_mon)) != Monitor);
{
    LDRglobaladdr(tmp1, PendingInterruptOp());
    LDRglobal(tmp2, PendingInterruptOp(), tmp1, 0);
    if (tmp2 != 0) {
        // clear pending flag
        MOV(tmp3, 0);
        STRglobal(tmp3, PendingInterruptOp(), tmp1, 0);

        // load target CPSR and clear the mode bits
        MRS(tmp3, spsr_mon);
        assert ValidPsrWord(tmp3) by { reveal ValidSRegState; }
        LSR(tmp1, tmp3, 5);
        LSL(tmp1, tmp1, 5);

        // LR += 4 for ARM IRQ shenanigans
        ADDWrap(lr, lr, 4);

        // are we injecting an IRQ or a FIQ?
        if (tmp2 == const(7*WORDSIZE)) { // FIQ
            // update target to FIQ mode, with IRQ and FIQ both masked
            MSR(lr_fiq, lr);
            MSR(spsr_fiq, tmp3);
            //assert 0xd1 == BitwiseOr(encode_mode(FIQ),
            //                         BitwiseOr(ARM_PSR_FIQ, ARM_PSR_IRQ));
            ORR(tmp1, tmp1, 0xd1);
            lemma_psr_still_valid(spsr_mon, tmp1, 0xd1);
        } else { // IRQ
            // update target to IRQ mode, with IRQ masked
            MSR(lr_irq, lr);
            MSR(spsr_irq, tmp3);
            //assert 0x92 == BitwiseOr(encode_mode(IRQ), ARM_PSR_IRQ);
            ORR(tmp1, tmp1, 0x92);
            lemma_psr_still_valid(spsr_mon, tmp1, 0x92);
        }

        // update target CPSR
        MSR(spsr_mon, tmp1);

        // compute vector base in LR
        MRC(lr, sctlr); // read SCTLR
        if (tst_ne(lr, const(ARM_SCTLR_V))) {
           // if the HIVECS bit is set, vectors are at 0xffff0000
           MOVW(lr, 0);
           MOVT(lr, 0xffff);
       } else {
           // no HIVECS, read VBAR
           MRC(lr, vbar);
       }

        // add vector offset to determine return address
        ADDWrap(lr, lr, tmp2);
    }
}


procedure {:frame false} smc_handler(
    ghost stack_bytes: int,
    ghost pagedb_in: PageDb) returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this, stack_bytes);
    requires
        stack_bytes >= BANKED_FRAMESIZE + EXCEPTION_STACK_BYTES + 40;
        validPageDb(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
        UsermodeContinuationInvariantDef();
        UsermodeContinuationPreconditionDef();
        this.conf.scr.ns == NotSecure;
        ValidPsrWord(spsr_mon) && decode_psr(spsr_mon).m != Monitor;
    ensures
        smchandler(old(this), pagedb_in, this, pagedb);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    ghost var stack_bytes_local;
    stack_bytes_local := stack_nonvolatiles(stack_bytes);
    lemma_SameMemAndGlobalsPreservesPageDb(old(this), this, pagedb_in);

    LDRglobaladdr(r12, PageDb());

    ghost if (old(r0 == KOM_SMC_MAP_SECURE
              && !(r4 == 0 || !physPageIsInsecureRam(r4)))) {
        assert contentsOfPhysPage(old(this), old(r4)) == contentsOfPhysPage(this, old(r4))
            by { assert InsecureMemInvariant(old(this), this); }
    }

    ghost var s0 := this;
    pagedb := smc_handler_inner(r0, r1, r2, r3, r4, r12, r0, r1,
                                stack_bytes_local, pagedb_in);

    ghost if (old(r0 == KOM_SMC_ENTER || r0 == KOM_SMC_RESUME)) {
            lemma_ValidEntryPre(old(this), s0, pagedb_in, this, pagedb,
                                old(r1), old(r2), old(r3), old(r4));
    }

    ghost var prePopErr := r0;
    ghost var prePopRet := r1;
    ghost var prePopThis := this;

    unstack_lr();
    maybe_inject_interrupt(r2, r3, r4);

    stack_bytes_local := unstack_nonvolatiles_except_lr(stack_bytes_local);
    assert stack_bytes_local == stack_bytes;
    lemma_SameMemAndGlobalsPreservesPageDb(prePopThis, this, pagedb);

    // zero other volatiles to prevent information leakage
    MOV(r2, 0);
    MOV(r3, 0);

    assert prePopErr == r0;
    assert prePopRet == r1;

    ghost if (old(r0 == KOM_SMC_ENTER || r0 == KOM_SMC_RESUME)) {
        assert smchandlerInvariant(old(this), this, true);
    } else {
        assert smchandlerInvariant(old(this), this, false);
    }

    // assert smchandlerInvariant(old(this), this,
    //     old(r0 == KOM_SMC_ENTER || r0 == KOM_SMC_RESUME));

    ghost if (old(r0 == KOM_SMC_ENTER || r0 == KOM_SMC_RESUME)) {
        assert validExceptionTransition(prePopThis, pagedb,
                                        this, pagedb, old(r1))
            by { reveal validExceptionTransition; }
        lemma_ValidEntryPost(old(this), pagedb_in, prePopThis, pagedb, this,
                             old(r1), old(r2), old(r3), old(r4));
    }
}
