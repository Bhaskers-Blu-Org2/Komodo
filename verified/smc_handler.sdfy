//=============================================================================
// Top-level SMC handler
//=============================================================================

#verbatim
lemma SameMemAndGlobalsImpliesSamePageDb(s:state, s':state, pagedb:PageDb)
    requires SaneState(s) && SaneState(s')
    requires validPageDb(pagedb)
    requires pageDbCorresponds(s.m, pagedb)
    requires NonStackMemPreserving(s,s')
    requires GlobalsInvariant(s,s')
    ensures pageDbCorresponds(s'.m, pagedb)
{
    assert GlobalFullContents(s.m, PageDb()) == GlobalFullContents(s'.m, PageDb());
    assert forall p :: validPageNr(p) ==> extractPage(s.m, p) == extractPage(s'.m, p);
}
#endverbatim

procedure smc_handler(
    {:register OReg(R0)} callno:int,
    {:register OReg(R1)} arg1:int,
    {:register OReg(R2)} arg2:int,
    {:register OReg(R3)} arg3:int,
    {:register OReg(R4)} arg4:int,
    out {:register OReg(R0)} err:int,
    out {:register OReg(R1)} retval:int,
    ghost pagedb_in: PageDb) returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
        StackBytesRemaining(this,120);
    requires
        validPageDb(pagedb_in);
        // pageDbClosedRefs(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
    ensures
        NonvolatileRegPreserving(old(this),this);
        //TODO: tuple(pagedb, err, retval) == old(smchandler_premium(pagedb_in, callno, arg1, arg2, arg3, arg4));
        //TODO: smchandlerInvariant(old(this),this);
        validPageDb(pagedb);
        pageDbCorresponds(this.m, pagedb);
{
    ghost var stack_bytes := 120;
    pagedb := pagedb_in;
    retval := 0;

    fcall_prologue(stack_bytes);
    SameMemAndGlobalsImpliesSamePageDb(old(this), this, pagedb);

    if(callno == sp_op_const(KOM_SMC_QUERY())) {
        err := sp_op_const(KOM_MAGIC());
    } else if(callno == sp_op_const(KOM_SMC_GETPHYSPAGES())) {
        retval := sp_op_const(KOM_SECURE_NPAGES());
        err := sp_op_const(KOM_ERR_SUCCESS());
    } else if(callno == sp_op_const(KOM_SMC_INIT_ADDRSPACE())) {
        pagedb := kom_smc_init_addrspace(arg1, arg2, err, pagedb);
    } else if(callno == sp_op_const(KOM_SMC_INIT_DISPATCHER())) {
        pagedb := kom_smc_init_dispatcher(arg1, arg2, arg3, err, pagedb);
    } else if(callno == sp_op_const(KOM_SMC_INIT_L2PTABLE())) {
        pagedb := kom_smc_init_l2ptable(arg1, arg2, arg3, err, pagedb);
    }

    ghost var prePopThis := this;
    fcall_epilogue(stack_bytes-40);
    SameMemAndGlobalsImpliesSamePageDb(prePopThis, this, pagedb);

    // zero other volatiles to prevent information leakage
    r2 := 0;
    r3 := 0;

    // TODO: return path (movs pc, lr etc.)
}
