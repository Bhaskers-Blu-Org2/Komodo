include {:verbatim} "kom_common.i.dfy"
include "valedecls.vad"

procedure {:timeLimitMultiplier 2} memcpy_bare(operand dst:addr, operand src:addr,
                                          inout operand size:reg, out operand tmp:reg)
    modifies
        mem;
    requires/ensures
        SaneState(this);
    requires
        DistinctRegOperands(set(@dst, @src, @size, @tmp), 4);
        WordAligned(size);
        ValidMemRange(dst, dst + size);
        ValidMemRangeForRead(src, src + size);
        dst + size <= src || src + size <= dst;
    ensures
        MemPreservingExcept(old(this), this, old(dst), old(dst + size));
        forall a:addr :: old(dst) <= a < old(dst + size)
            ==> MemContents(this.m, a) == old(MemContents(this.m, WordAlignedAdd(a - dst, src)));
{
    assert @dst != @src && @dst != @size && @dst != @tmp && @src != @size
        && @src != @tmp && @size != @tmp && @size != OSP && @tmp != OSP;

    while (size > 0)
        invariant
            SaneState(this);
            //GlobalsInvariant(old(this),this);
            WordAligned(size) && 0 <= size <= old(size);
            dst == old(dst) && src == old(src);
            MemPreservingExcept(old(this), this, dst + size, dst + old(size));
            forall a:addr :: dst + size <= a < dst + old(size)
                ==> MemContents(this.m, a) == old(MemContents(this.m, WordAlignedAdd(a - dst, src)));
        decreases
            size;
    {
        ghost var prevThis := this;
        lemma_WordAlignedSub(size, WORDSIZE);
        SUB(size, size, const(WORDSIZE));
        lemma_WordAlignedAdd(src, size);
        LDR(tmp, src, size);
        assert tmp == MemContents(old(this.m), src + size);
        lemma_WordAlignedAdd(dst, size);
        STR(tmp, dst, size);
        assert MemContents(this.m, dst + size) == MemContents(old(this.m), src + size);
    }
}

procedure memcpy(operand dst:addr, operand src:addr,
                 inout operand size:reg, out operand tmp:reg)
    modifies
        mem;
    requires/ensures
        SaneState(this);
    requires
        DistinctRegOperands(set(@dst, @src, @size, @tmp), 4);
        WordAligned(size);
        ValidMemRange(dst, dst + size);
        ValidMemRangeForRead(src, src + size);
        dst + size <= src || src + size <= dst;
        dst >= StackBase() || dst + size <= StackLimit();
        // no writing to insecure mem
        dst >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() || dst + size <= KOM_DIRECTMAP_VBASE;
    ensures
        SmcProcedureInvariant(old(this),this);
        MemPreservingExcept(old(this), this, old(dst), old(dst + size));
        forall a:addr :: old(dst) <= a < old(dst + size)
            ==> MemContents(this.m, a) == old(MemContents(this.m, WordAlignedAdd(a - dst, src)));
{
    memcpy_bare(dst, src, size, tmp);
}

procedure memset(operand base:addr, operand val:word, inout operand size:reg)
    modifies
        mem;
    requires/ensures
        SaneState(this);
    requires
        DistinctRegOperands(set(@base, @val, @size), 3);
        WordAligned(size);
        isUInt32(base + size);
        ValidMemRange(base, base + size);
        base >= StackBase() || base + size <= StackLimit();
        // no writing to insecure mem
        base >= KOM_DIRECTMAP_VBASE + MonitorPhysBase() || base + size <= KOM_DIRECTMAP_VBASE;
    ensures
        ValidMemRangeExPageTable(old(this), old(base), old(base + size)) && old(this.conf.tlb_consistent) ==> this.conf.tlb_consistent;
        SmcProcedureInvariant(old(this),this);
        MemPreservingExcept(old(this), this, old(base), old(base + size));
        forall a:addr :: old(base) <= a < old(base + size)
            ==> MemContents(this.m, a) == old(val);
{
    while (size > 0)
        invariant
            SaneState(this);
            GlobalsInvariant(old(this),this);
            SmcProcedureInvariant(old(this),this);
            RegPreservingExcept(old(this), this, set(@size));
            WordAligned(size) && 0 <= size <= old(size);
            MemPreservingExcept(old(this), this, base + size, base + old(size));
            this.conf.ttbr0 == old(this.conf.ttbr0);
            ValidMemRangeExPageTable(old(this), old(base), old(base + size)) && old(this.conf.tlb_consistent) ==> this.conf.tlb_consistent;
            forall a:addr :: old(base) + size <= a < old(base + size)
                ==> MemContents(this.m, a) == val;
        decreases
            size;
    {
        ghost var prevThis := this;
        lemma_WordAlignedSub(size, WORDSIZE);
        SUB(size, size, const(WORDSIZE));
        lemma_WordAlignedAdd(base, size);
        STR(val, base, size);
        assert MemContents(this.m, WordAlignedAdd(base, size)) == val;
        assert forall p :: ValidMem(p) && p != base + size
            ==> MemContents(prevThis.m, p) == MemContents(this.m, p);
        ghost if (ValidMemRangeExPageTable(old(this), old(base), old(base + size)) && old(this.conf.tlb_consistent)) {
            lemma_AddrInPageTable_persists(old(this), prevThis, old(base), old(WordAlignedAdd(base, size)));
            lemma_AddrInPageTable_persists(prevThis, this, old(base), old(WordAlignedAdd(base, size)));
            assert prevThis.conf.tlb_consistent;
            assert !AddrInPageTable(prevThis, base + size);
            assert this.conf.tlb_consistent;
        }
    }
}
