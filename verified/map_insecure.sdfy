include {:verbatim} "kom_common.i.dfy"
include {:verbatim} "pagedb.i.dfy"
include {:verbatim} "smcapi.i.dfy"
include {:verbatim} "ptebits.i.dfy"

include "ARMdecls-unrefined.sdfy"
include "map_secure.sdfy"

procedure mkl2pte_insecure(
    inout {:register OReg(R3)} mapping:int,
    inout {:register OReg(R6)} page:int,
    ghost abs_mapping:Mapping,
    ghost l2pte:L2PTE
)
    requires/ensures
        SaneState(this);
    requires
        abs_mapping == wordToMapping(mapping);
        l2pte is InsecureMapping;
        (l2pte.insecurePage == page
            && abs_mapping.perm.w == l2pte.insecureWrite);
        validInsecurePageNr(page);
    ensures
        page == mkL2Pte(l2pte);
        nonexec_mapping(abs_mapping) == wordToMapping(mapping);
        RegPreservingExcept(old(this),this,set(@r3,@r4,@r6));
        AllMemInvariant(old(this),this);
        SmcProcedureInvariant(old(this), this);        
{
    lemma_LeftShift12(page);
    LSL(page,page,12);
    assert page == old(page) * PAGESIZE;
    assert PageAligned(page);

    // mask out X bit in mapping, so it can't construct an executable mapping
    // TODO: it would be better to elide this code from ARM_L2PTE
    lemma_nonexec_mapping(abs_mapping, mapping);
    AND(mapping,mapping,const(NOT_KOM_MAPPING_X()));
    ghost var newabs_mapping := nonexec_mapping(abs_mapping);
    assert wordToMapping(mapping) == newabs_mapping;

    assert mkL2Pte(l2pte) == ARM_L2PTE(page, l2pte.insecureWrite, false);
    ARM_L2PTE_impl(mapping,page,r4,newabs_mapping);
}

procedure phys_page_is_insecure_ram(operand phys_page:int, out operand ret:int)
    requires/ensures
        SaneState(this);
    requires
        ValidRegOperand(@phys_page);
        ValidRegOperand(@ret);
        @phys_page != @ret;
        @ret != @sp;
    ensures 
        ret == 0 <==> !physPageIsInsecureRam(phys_page);
        RegPreservingExcept(old(this), this, set(@ret));
        AllMemInvariant(old(this),this);
        SmcProcedureInvariant(old(this), this);
        ret != 0 ==> validInsecurePageNr(phys_page);
{
    LDRglobaladdr(ret, SecurePhysBaseOp());
    LDRglobal(ret, SecurePhysBaseOp(), ret, 0);
    lemma_RightShift12(ret);
    LSR(ret,ret,12);
    assert ret == SecurePhysBase() / PAGESIZE;

    if(phys_page >= ret)
    {
        assert !physPageIsInsecureRam(phys_page);
        ret := 0;
    } else {
        forall :: validInsecurePageNr(phys_page) {
            assert SecurePhysBase() < KOM_PHYSMEM_LIMIT;
            assert SecurePhysBase() / PAGESIZE <
                KOM_PHYSMEM_LIMIT / PAGESIZE;
        }
        ret := 1;
    }
}

procedure kom_smc_map_insecure(
    {:register OReg(R1)} as_page:int,
    {:register OReg(R2)} phys_page:int,
    inout {:register OReg(R3)} mapping:int,
    out {:register OReg(R0)} err:int,
    ghost pagedb_in: PageDb)
    returns (ghost pagedb: PageDb)
    requires/ensures
        SaneState(this);
    requires
        validPageDb(pagedb_in);
        pageDbCorresponds(this.m, pagedb_in);
    ensures
        GlobalsInvariant(old(this), this);
        SmcProcedureInvariant(old(this), this);
        tuple(pagedb,err) == smc_mapInsecure_premium(pagedb_in, old(as_page),
                                                old(phys_page), old(mapping));
        pageDbCorresponds(this.m, pagedb);
{
    pagedb := pagedb_in;
    ghost var specResult := smc_mapInsecure_premium(pagedb, as_page,
            phys_page, mapping);

    if (as_page >= const(KOM_SECURE_NPAGES)) {
        err := const(KOM_ERR_INVALID_ADDRSPACE);
        assert err == specErr(specResult);
    } else {
        assert validPageNr(as_page);
        LDRglobaladdr(r12, PageDb());
        lemma_LeftShift3(as_page);
        LSL(r4,as_page,const(PAGEDB_ENTRY_SHIFT));
        assert r4 == G_PAGEDB_ENTRY(as_page) + PAGEDB_ENTRY_TYPE;
        LDRglobal(r0, PageDb(), r12, r4);

        forall :: r0 == pageDbEntryTypeVal(pagedb[as_page]) {
            assert r0 == GlobalWord(this.m, PageDb(), G_PAGEDB_ENTRY(as_page) + PAGEDB_ENTRY_TYPE);
            extractPageDbToAbstract(this.m, as_page);
            reveal_pageDbEntryCorresponds();
        }

        if (r0 != const(KOM_PAGE_ADDRSPACE)) {
            assert !isAddrspace(pagedb, as_page);
            err := const(KOM_ERR_INVALID_ADDRSPACE);
            assert err == specErr(specResult);
        } else {
            r5 := as_page;
            is_valid_mapping_target(as_page,mapping,r10,err,pagedb);
            if( err != const(KOM_ERR_SUCCESS) ) {
                assert err == specErr(specResult);
            } else {
                assert as_page == old(as_page);
                phys_page_is_insecure_ram(phys_page, r12);
                if(r12 == 0) {
                    err := const(KOM_ERR_INVALID_PAGENO);
                    assert err == specErr(specResult);
                } else {
                    ghost var d' := pagedb_in;
                    ghost var entry := PageDbEntryTyped(as_page, DataPage); 
                    assert entry.addrspace == as_page;
                    assert validAddrspacePage(pagedb, entry.addrspace);
                    LDRglobaladdr(r12, PageDb());

                    assert validInsecurePageNr(phys_page);
                    ghost var abs_mapping := wordToMapping(mapping);
                    ghost var l2pte := InsecureMapping(phys_page, 
                        abs_mapping.perm.w);

                    assert validL2PTE(d', as_page, l2pte);
                    forall :: wellFormedPageDb(d') { reveal_validPageDb(); }
                    r6 := phys_page;
                    mkl2pte_insecure(mapping, r6, abs_mapping, l2pte);
                    assert r10 == mkL1Pte(d'[d'[as_page].entry.l1ptnr].entry.l1pt[abs_mapping.l1index], 0);
                    assert r10 == mkL1Pte(pagedb[pagedb[as_page].entry.l1ptnr].entry.l1pt[abs_mapping.l1index], 0);
                    // TODO: fix register allocation in update_l2pte to avoid this moves
                    r2 := as_page;
                    pagedb := update_l2pte(r2,mapping,r6,r10,d',abs_mapping,l2pte);
                    assert pagedb == updateL2Pte(d', old(as_page), abs_mapping, l2pte);
                    assert pagedb == specPageDb(specResult);
                    assert pageDbCorresponds(this.m, pagedb);
                    err := const(KOM_ERR_SUCCESS);
                    assert err == specErr(specResult);
                }
            }
        }
    }
}

