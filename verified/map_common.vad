include {:verbatim} "kom_common.i.dfy"
include {:verbatim} "pagedb.i.dfy"
include {:verbatim} "ptebits.i.dfy"

include "valedecls.vad"
include "kom_utils.vad"
include "map_utils.vad"
include "memset.vad"

#verbatim
lemma lemma_read_l2pte_zero(pte:L2PTE)
    requires PhysBase() == KOM_DIRECTMAP_VBASE
    ensures BitwiseAnd(mkL2Pte(pte), 3) == 0 <==> mkAbsPTE(pte).Nothing?
{
    assert WordAsBits(3) == 3 by { reveal WordAsBits(); }
    lemma_l2ptesmatch(pte);
}

lemma lemma_update_l2pte_helper1(s:state, s':state, as_page:word, mapping:word, ptr:word,
    l2pte:word, d:PageDb, d':PageDb, abs_mapping:Mapping,
    l1pte_abs:PageNr, l2pte_abs:L2PTE)
    requires SaneState(s)
    requires SaneState(s')
    requires wellFormedPageDb(d)
    requires abs_mapping.l1index == wordToMapping(mapping).l1index
    requires abs_mapping.l2index == wordToMapping(mapping).l2index
    requires pageDbCorresponds(s.m, d)
    requires isAddrspace(d, as_page)
    requires validMapping(abs_mapping,d,as_page)
    requires validL1PTable(d, as_page, d[d[as_page].entry.l1ptnr].entry.l1pt)
    requires !d[as_page].entry.state.StoppedState?
    requires validL2PTE(d, as_page, l2pte_abs)
    requires l1pte_abs == fromJust(d[d[as_page].entry.l1ptnr].entry.l1pt[abs_mapping.l1index])
    requires l2pte == mkL2Pte(l2pte_abs)
    requires d' == updateL2Pte(d, as_page, abs_mapping, l2pte_abs)
    requires ptr == page_monvaddr(l1pte_abs) + WordsToBytes(abs_mapping.l2index)
    requires va_get_mem(s') == AddrMemUpdate(va_get_mem(s), ptr, mkL2Pte(l2pte_abs))
    requires s.m.globals == s'.m.globals
    ensures pageDbL2PTableCorresponds(l1pte_abs, d'[l1pte_abs].entry, extractPage(s'.m, l1pte_abs))
{
    var p := l1pte_abs;

    assert pageDbL2PTableCorresponds(p, d'[p].entry, extractPage(s'.m, p))
    by {
        var base := page_monvaddr(p);
        var old_page := extractPage(s.m, p);
        var mem_page := extractPage(s'.m, p);
        assert pageDbL2PTableCorresponds(p, d[p].entry, old_page)
        by {
            reveal pageContentsCorresponds();
            assert pageDbCorrespondsOnly(s.m, d, p);
        }
        forall i | 0 <= i < NR_L2PTES && i != abs_mapping.l2index
            ensures mem_page[WordOffset(base, i)] == mkL2Pte(d'[p].entry.l2pt[i])
        {
            assert WordOffset(base, i) !=
                WordOffset(page_monvaddr(l1pte_abs), abs_mapping.l2index);
            assert mem_page[WordOffset(base, i)] == old_page[WordOffset(base, i)];
            assert mem_page[WordOffset(base, i)] == mkL2Pte(d'[p].entry.l2pt[i])
                by { reveal pageDbL2PTableCorresponds(); }
        }
        var j := abs_mapping.l2index;
        assert mem_page[WordOffset(base, j)] == mkL2Pte(d'[p].entry.l2pt[j]);
        assert pageDbL2PTableCorresponds(p, d'[p].entry, extractPage(s'.m, p)) by
            { reveal pageDbL2PTableCorresponds(); }
    }
}
#endverbatim

procedure update_l2pte(
    ghost as_page:PageNr,
    operand mapping:reg,
    operand l2pte:reg,
    operand l1pte:reg,
    //out operand tmp1:reg,
    out operand tmp2:reg,
    ghost d:PageDb,
    ghost abs_mapping:Mapping,
    ghost l2pte_abs:L2PTE
)   returns (ghost d':PageDb)
    requires/ensures
        SaneState(this);
    requires
        @l2pte == OReg(R1) || @l2pte == OReg(R2);
        @mapping == OReg(R3);
        @l1pte == OReg(R4) || @l1pte == OReg(R10);
        //@tmp1 == OReg(R8) && @tmp2 == OReg(R12);
        //@tmp1 != @mapping && @tmp1 != @l2pte && @tmp1 != @l1pte && @tmp1 != @tmp2 && @tmp1 != OSP;
        @tmp2 != @mapping && @tmp2 != @l2pte && @tmp2 != @l1pte && @tmp2 != OSP;
        validPageDb(d) && wellFormedPageDb(d);
        abs_mapping.l1index == wordToMapping(mapping).l1index;
        abs_mapping.l2index == wordToMapping(mapping).l2index;
        pageDbCorresponds(this.m, d);
        isAddrspace(d, as_page);
        validMapping(abs_mapping,d,as_page);
        validL1PTable(d, as_page, d[d[as_page].entry.l1ptnr].entry.l1pt);
        !(d[as_page].entry.state is StoppedState);
        validL2PTE(d, as_page, l2pte_abs);
        l2pte == mkL2Pte(l2pte_abs);
        l1pte == page_monvaddr(d[d[as_page].entry.l1ptnr].entry.l1pt[abs_mapping.l1index].v);
        l2pte_abs is SecureMapping ==> (
            validAndEmptyMapping(abs_mapping, d, as_page)
            && dataPageRefs(d, as_page, l2pte_abs.page) == set());
    modifies
        mem;
    ensures
        validPageDb(d');
        d' == old(updateL2Pte(d, as_page, abs_mapping, l2pte_abs));
        pageDbCorresponds(this.m, d');
        SmcProcedureInvariant(old(this), this);
        let l1pte_abs := fromJust(d[d[old(as_page)].entry.l1ptnr].entry.l1pt[abs_mapping.l1index]);
        MemPreservingExcept(old(this), this, page_monvaddr(l1pte_abs), page_monvaddr(l1pte_abs) + PAGESIZE);
{
    ghost var a := as_page;
    ghost var addrspace := d[a].entry;
    assert validAddrspace(d, a) by { reveal validPageDb; }
    ghost var l1 := d[addrspace.l1ptnr].entry;
    ghost var l1pte_abs := fromJust(l1.l1pt[abs_mapping.l1index]);
    ghost var l2pt := d[l1pte_abs].entry.l2pt;
    ghost var l2pt' := l2pt[ abs_mapping.l2index := l2pte_abs ];
    d' := updateL2Pte(d, as_page, abs_mapping, l2pte_abs);
    assert l1pte == page_monvaddr(l1pte_abs);

    LSR(tmp2, mapping, 12);
    AND(tmp2, tmp2, 0xff);
    assert tmp2 == abs_mapping.l2index
    by {
        reveal wordToMapping;
        assert tmp2 == l2indexFromMapping(mapping);
    }
    lemma_LeftShift2(tmp2);
    LSL(tmp2, tmp2, 2);
    assert tmp2 == WordsToBytes(abs_mapping.l2index);
    assert addrInPage(l1pte + tmp2, l1pte_abs);

    assert l2pte == mkL2Pte(l2pte_abs);
    STR(l2pte, l1pte, tmp2);

    assert pageDbCorrespondsOnly(this.m, d', l1pte_abs)
    by {
        lemma_update_l2pte_helper1(old(this), this, as_page, mapping, l1pte + tmp2,
            l2pte, d, d', abs_mapping, l1pte_abs, l2pte_abs);
        ghost var p := l1pte_abs;
        assert pageDbEntryCorresponds(d'[p], extractPageDbEntry(this.m, p))
            by { reveal pageDbEntryCorresponds; }
        reveal pageContentsCorresponds;
        assert pageContentsCorresponds(p, d'[p], extractPage(this.m, p));
    }

    assert d'[l1pte_abs] is PageDbEntryTyped &&
        d'[l1pte_abs].entry is L2PTable;

    assert pageDbCorrespondsExcluding(this.m, d', l1pte_abs) 
    by {
        forall i :| validPageNr(i) && i != l1pte_abs ::
            extractPage(this.m, i) == extractPage(old(this.m), i) {}
        forall i :| validPageNr(i) && i != l1pte_abs && d'[i] is PageDbEntryTyped ::
            pageContentsCorresponds(i, d'[i], extractPage(this.m, i))
        {
            reveal pageContentsCorresponds;
            assert d[i] == d'[i];
            assert extractPage(this.m, i) == extractPage(old(this.m), i);
            assert pageContentsCorresponds(i, d[i], extractPage(old(this.m),i));
            assert pageContentsCorresponds(i, d'[i], extractPage(this.m,i));
        }
    }

    lemma_updateL2PtePreservesPageDb(d, a, abs_mapping, l2pte_abs);
}

procedure fetch_l2pte(
    ghost asPg:PageNr,
    operand mapping:reg,
    inout operand l1pte:reg,
    out operand l2pte:reg,
    ghost d:PageDb)
    requires/ensures
        SaneState(this);
    requires
        @mapping != @l1pte && @mapping != @l2pte && @l1pte != @l2pte;
        @l1pte != OSP && @l2pte != OSP;
        validPageDb(d) && pageDbCorresponds(this.m, d);
        isAddrspace(d, asPg) && !(d[asPg].entry.state is StoppedState);
        0 <= l1indexFromMapping(mapping) < NR_L1PTES;
        0 <= l2indexFromMapping(mapping) < NR_L2PTES;
        let l1p := d[asPg].entry.l1ptnr;
        let abs_mapping := wordToMapping(mapping);
        d[l1p] is PageDbEntryTyped && d[l1p].entry is L1PTable;
        let l1index := l1indexFromMapping(mapping);
        let l1pt := d[l1p].entry.l1pt;
        SeqLength(l1pt) == NR_L1PTES && l1pt[l1index] is Just;
        let l1pte_abs := fromJust(l1pt[l1index]);
        l1pte == ARM_L1PTE(page_paddr(l1pte_abs));
    reads
        mem;
    ensures
        SmcProcedureInvariant(old(this), this);
        let l1p := d[asPg].entry.l1ptnr;
        let l1index := l1indexFromMapping(mapping);
        let l1pt := d[l1p].entry.l1pt;
        SeqLength(l1pt) == NR_L1PTES && 0 <= l1index < NR_L1PTES && l1pt[l1index] is Just;
        let l1pte_abs := fromJust(l1pt[l1index]);
        d[l1pte_abs] is PageDbEntryTyped && d[l1pte_abs].entry is L2PTable;
        l1pte == page_monvaddr(l1pte_abs);
        let l2pt := d[l1pte_abs].entry.l2pt;
        l2pte == mkL2Pte(l2pt[l2indexFromMapping(old(mapping))]);
{
    ghost var abs_mapping := wordToMapping(mapping);
    ghost var l1p := d[asPg].entry.l1ptnr;
    ghost var l1pt := d[l1p].entry.l1pt;
    assert validL1PTable(d, asPg, l1pt) by { reveal validPageDb; }
    assert abs_mapping.l1index == l1indexFromMapping(mapping)
        by { reveal wordToMapping; }
    ghost var l1pte_abs := fromJust(l1pt[abs_mapping.l1index]);
    ghost var l2pt := d[l1pte_abs].entry.l2pt;
    ghost var l2index := l2indexFromMapping(old(mapping));
    lemma_ARM_L1PTE_Dual(page_paddr(l1pte_abs));
    SUB(l1pte, l1pte, 1);
    assert l1pte == page_paddr(l1pte_abs);
    ADD(l1pte, l1pte, const(KOM_DIRECTMAP_VBASE));
    assert l1pte == page_monvaddr(l1pte_abs);

    assert mapping == old(mapping);
    LSR(l2pte, mapping, 12);
    AND(l2pte, l2pte, 0xff);
    assert l2pte == abs_mapping.l2index by {
        reveal wordToMapping;
        assert l2pte == l2indexFromMapping(mapping);
    }
    lemma_LeftShift2(l2pte);
    LSL(l2pte, l2pte, 2);
    assert l2pte == WordsToBytes(abs_mapping.l2index);
    assert addrInPage(l1pte + l2pte, l1pte_abs);
    LDR(l2pte, l1pte, l2pte);
    ghost var l2pte_abs := l2pt[l2index];
    assert l2pte == mkL2Pte(l2pte_abs) by {
        assert pageDbCorresponds(this.m, d);
        assert pageContentsCorresponds(l1pte_abs, d[l1pte_abs],
                                       extractPage(this.m, l1pte_abs));
        assert pageDbL2PTableCorresponds(l1pte_abs, d[l1pte_abs].entry,
                                        extractPage(this.m, l1pte_abs))
            by { reveal pageContentsCorresponds; }
        assert d[l1pte_abs].entry.l2pt[l2index] == l2pte_abs;
        reveal pageDbL2PTableCorresponds;
    }
}

procedure is_valid_mapping_target'_finish(
    ghost addr:PageNr,
    operand mapping:reg,
    out operand l1pte:reg,
    out operand err:reg,
    ghost d:PageDb)
    requires/ensures
        SaneState(this);
    requires
        @mapping == OReg(R3) && @err == OReg(R0);
        @l1pte == OReg(R4) || @l1pte == OReg(R10);
        validPageDb(d);
        pageDbCorresponds(this.m, d);
        isAddrspace(d, addr);
        !(d[addr].entry.state is StoppedState);
        permFromMapping(mapping).r;
        0 <= l1indexFromMapping(mapping) < NR_L1PTES;
        0 <= l2indexFromMapping(mapping) < NR_L2PTES;
        let l1p := d[addr].entry.l1ptnr;
        let abs_mapping:Mapping := wordToMapping(mapping);
        d[l1p] is PageDbEntryTyped;
        d[l1p].entry is L1PTable;
        let l1index:word := l1indexFromMapping(mapping);
        let l1pt:seq(Maybe(PageNr)) := d[l1p].entry.l1pt;
        0 <= l1index < SeqLength(l1pt);
        l1pt[l1index] is Just;
        let l1pte_abs := fromJust(l1pt[l1index]);
        l1pte == ARM_L1PTE(page_paddr(l1pte_abs));
    reads
        mem; globals;
    modifies
        r6; r7; r8;
    ensures
        SmcProcedureInvariant(old(this), this);
        err == old(isValidMappingTarget'(d, addr, mapping));
        err == KOM_ERR_SUCCESS ==>(
            validAddrspacePage(d, old(addr)) && 
            l1pte == page_monvaddr(fromJust(d[d[old(addr)].entry.l1ptnr].entry.l1pt[
                wordToMapping(old(mapping)).l1index])) );
{
    ghost var l1p := d[addr].entry.l1ptnr;
    assert wordToMapping(mapping).l1index == l1indexFromMapping(mapping)
        by { reveal wordToMapping; }
    ghost var l1pt := d[l1p].entry.l1pt;
    ghost var l1pte_abs := fromJust(l1pt[wordToMapping(mapping).l1index]);
    fetch_l2pte(addr, mapping, l1pte, r7, d);
    ghost var l2pt := d[l1pte_abs].entry.l2pt;
    ghost var l2index := l2indexFromMapping(old(mapping));
    ghost var l2pte_abs := l2pt[l2index];
    AND(r7, r7, 3);
    lemma_read_l2pte_zero(l2pte_abs);
    if( r7 != 0 ) {
        MOV(err, const(KOM_ERR_INVALID_MAPPING));
    } else {
        MOV(err, const(KOM_ERR_SUCCESS));
    }
}

procedure{:timeLimitMultiplier 2} is_valid_mapping_target'(
    operand asva:reg,
    operand mapping:reg,
    out operand l1pte:reg,
    out operand err:reg,
    ghost asnr:PageNr,
    ghost d:PageDb)
    requires/ensures
        SaneState(this);
    requires
        @asva == OReg(R5) && @mapping == OReg(R3) && @err == OReg(R0);
        @l1pte == OReg(R4) || @l1pte == OReg(R10);
        validPageDb(d);
        pageDbCorresponds(this.m, d);
        isAddrspace(d, asnr);
        asva == page_monvaddr(asnr);
    reads
        mem; globals;
    modifies
        r6; r7; r8;
    ensures
        SmcProcedureInvariant(old(this), this);
        err == old(isValidMappingTarget'(d, asnr, mapping));
        err == KOM_ERR_SUCCESS ==>(
            validAddrspacePage(d, asnr) && 
            l1pte == page_monvaddr(d[d[asnr].entry.l1ptnr].entry.l1pt[
                wordToMapping(old(mapping)).l1index].v) );
{
    ghost var specResult := isValidMappingTarget'(d, asnr, mapping);

    LDR(r8, asva, const(ADDRSPACE_STATE));
    assert r8 == pageDbAddrspaceStateVal(d[asnr].entry.state)
    by {
        reveal pageContentsCorresponds;
        reveal pageDbAddrspaceCorresponds;
    }

    if (r8 == const(KOM_ADDRSPACE_STOPPED)) {
        MOV(err, const(KOM_ERR_STOPPED));
    } else {
        ghost var abs_mapping := wordToMapping(mapping);
        reveal wordToMapping;
        LSR(r7,mapping,20); 
        assert r7 == abs_mapping.l1index by { reveal wordToMapping; }
        LSR(r8,mapping,12);
        AND(r8,r8,0xff);
        assert r8 == abs_mapping.l2index
        by {
            reveal wordToMapping;
            assert r8 == l2indexFromMapping(mapping);
        }
        //if(!perm.r) then KOM_ERR_INVALID_MAPPING
        AND(r6,mapping,const(KOM_MAPPING_R));
        assert r6 == 0 <==> !abs_mapping.perm.r
        by {
            reveal wordToMapping;
            assert r6 != 0 <==> permFromMapping(mapping).r;
        }
        if(r6 == 0){
            MOV(err, const(KOM_ERR_INVALID_MAPPING));
            assert err == specResult;
        } else {
            if(r7 >= const(NR_L1PTES)){
                MOV(err, const(KOM_ERR_INVALID_MAPPING));
                assert err == specResult;
            } else if (r8 >= const(NR_L2PTES)) {
                MOV(err, const(KOM_ERR_INVALID_MAPPING));
                assert err == specResult;
            } else {
                LDR(r6, asva, const(ADDRSPACE_L1PT));

                ghost var l1p := d[asnr].entry.l1ptnr;
                assert validL1PTPage(d,l1p) by { reveal validPageDb; }
                assert r6 == page_monvaddr(l1p)
                by {
                    assert pageDbCorrespondsOnly(this.m, d, asnr);
                    assert validAddrspacePage(d, asnr);
                    reveal pageContentsCorresponds;
                    assert pageContentsCorresponds(asnr, d[asnr],
                        extractPage(this.m, asnr));
                    reveal pageDbAddrspaceCorresponds;
                }

                assert r7 == abs_mapping.l1index;
                ghost var l1index := r7;
                fetch_l1pte(r6,r7,r8,l1pte,d,l1p);
                assert l1pte == 0 <==> d[l1p].entry.l1pt[l1index] == Nothing;

                if( l1pte == 0 ) {
                    MOV(err, const(KOM_ERR_INVALID_MAPPING));
                } else {
                    is_valid_mapping_target'_finish(asnr, mapping, l1pte, err, d);
                }
            }
        }
    }
}

procedure is_valid_mapping_target(
    operand addr:reg,
    operand mapping:reg,
    out operand l1pte:reg,
    out operand err:reg,
    ghost d:PageDb)
    requires/ensures
        SaneState(this);
    requires
        (@addr == OReg(R1) || @addr == OReg(R2)) && @mapping == OReg(R3)
            && @err == OReg(R0);
        @l1pte == OReg(R4) || @l1pte == OReg(R10);
        validPageDb(d);
        pageDbCorresponds(this.m, d);
        isAddrspace(d, addr);
    reads
        mem; globals;
    modifies
        r5; r6; r7; r8;
    ensures
        SmcProcedureInvariant(old(this), this);
        err == old(isValidMappingTarget(d, addr, mapping));
        err == KOM_ERR_SUCCESS ==>(
            validAddrspacePage(d, old(addr)) && 
            l1pte == page_monvaddr(d[d[old(addr)].entry.l1ptnr].entry.l1pt[
                wordToMapping(old(mapping)).l1index].v));
{
    page_monvaddr_impl(r5,addr,r8);
    LDR(r8,r5,const(ADDRSPACE_STATE));
    assert r8 == pageDbAddrspaceStateVal(d[addr].entry.state)
    by {
        reveal pageContentsCorresponds;
        reveal pageDbAddrspaceCorresponds;
    }
    if (r8 != const(KOM_ADDRSPACE_INIT)) {
        MOV(err, const(KOM_ERR_ALREADY_FINAL));
    } else {
        assert d[addr].entry.state is InitState;
        is_valid_mapping_target'(r5, mapping, l1pte, err, old(addr), d);
    }
}

procedure insecure_phys_to_virt(
    inout operand phys_page:reg,
    out operand ret:reg)
    requires/ensures
        SaneState(this);
    requires
        @phys_page != @ret && @phys_page != OSP && @ret != OSP;
    reads
        globals;
    ensures
        SmcProcedureInvariant(old(this), this);
        if old(phys_page == 0 || physPageIsInsecureRam(phys_page))
            then ret == 1 && (
                if old(phys_page) == 0
                then phys_page == 0
                else phys_page == old(phys_page) * PAGESIZE + KOM_DIRECTMAP_VBASE)
            else ret == 0;
{
    LDRglobaladdr(ret, MonitorPhysBaseOp());
    LDRglobal(ret, MonitorPhysBaseOp(), ret, 0);
    reveal PageAligned;
    lemma_RightShift12(ret);
    LSR(ret, ret, 12);

    if (phys_page >= ret) {
        MOV(phys_page, 0);
        MOV(ret, 0);
    } else {
        MOV(ret, 1);
    }

    if (phys_page != 0) {
        lemma_LeftShift12(phys_page);
        LSL(phys_page, phys_page, 12);
        assert phys_page == old(phys_page) * PAGESIZE;
        ADD(phys_page, phys_page, const(KOM_DIRECTMAP_VBASE));
    }
}

procedure init_secure_page(
    operand page:reg,
    operand insecure:reg,
    ghost insecure_phys:word,
    ghost entry:PageDbEntryTyped)
    requires/ensures
        SaneState(this);
    requires
        @page != OReg(R11);
        @insecure != OReg(R9) && @insecure != OReg(R11) && @insecure != OReg(R12) && @insecure != OSP;
        validPageNr(page);
        if insecure == 0 then entry == DataPage(SeqRepeat(PAGESIZE/WORDSIZE, 0))
        else physPageIsInsecureRam(insecure_phys)
            && insecure == insecure_phys * PAGESIZE + KOM_DIRECTMAP_VBASE
            && entry == DataPage(contentsOfPhysPage(this, insecure_phys));
    reads
        globals;
    modifies
        mem; r9; r11; r12;
    ensures
        SmcProcedureInvariant(old(this), this);
        MemPreservingExcept(old(this), this, old(page_monvaddr(page)),
                            old(page_monvaddr(page)) + PAGESIZE);
        pageDbDataCorresponds(old(page), entry, extractPage(this.m, old(page)));
{
    page_monvaddr_impl(r12, page, r11);
    MOV(r9, const(PAGESIZE));
    if (insecure == 0) {
        MOV(r11, 0);
        memset(r12, r11, r9);
    } else {
        memcpy(r12, insecure, r9, r11);
    }

    assert pageDbDataCorresponds(old(page), entry, extractPage(this.m, old(page)))
        by { reveal pageDbDataCorresponds; }
}

#verbatim
function method L2PTE_CONST_WORD():word
    { (ARM_L2PTE_CONST_BITS | 0x2) as word }

lemma lemma_extract_kom_mapping_w(mapping:word, res:word)
    requires res == BitwiseXor(BitwiseAnd(mapping,KOM_MAPPING_W),KOM_MAPPING_W)
    ensures res == KOM_MAPPING_W || res == 0
    ensures res == 0 <==> wordToMapping(mapping).perm.w
{
    assert WordAsBits(KOM_MAPPING_W) == 2 by { reveal WordAsBits(); }
    lemma_WordBitEquiv(KOM_MAPPING_W, 2);

    var tmp := BitwiseAnd(mapping,KOM_MAPPING_W);
    assert (tmp == KOM_MAPPING_W || tmp == 0)
        by { reveal BitAnd(); }
    assert wordToMapping(mapping).perm.w <==> tmp != 0
        by { reveal wordToMapping(); }

    assert res == if tmp == 0 then KOM_MAPPING_W else 0
        by { reveal BitXor(); }
}

lemma lemma_extract_kom_mapping_x(mapping:word, res:word)
    requires res == BitwiseXor(BitwiseAnd(mapping,KOM_MAPPING_X),KOM_MAPPING_X)
    ensures res == KOM_MAPPING_X || res == 0
    ensures res == 0 <==> wordToMapping(mapping).perm.x
{
    assert WordAsBits(KOM_MAPPING_X) == 4 by { reveal WordAsBits(); }
    lemma_WordBitEquiv(KOM_MAPPING_X, 4);

    var tmp := BitwiseAnd(mapping,KOM_MAPPING_X);
    assert (tmp == KOM_MAPPING_X || tmp == 0)
        by { reveal BitAnd(); }
    assert wordToMapping(mapping).perm.x <==> tmp != 0
        by { reveal wordToMapping(); }

    assert res == if tmp == 0 then KOM_MAPPING_X else 0
        by { reveal BitXor(); }
}

lemma lemma_shift_robit()
    ensures LeftShift(0, 8) == 0;
    ensures LeftShift(KOM_MAPPING_W, 8) == BitsAsWord(ARM_L2PTE_RO_BIT);
{
    assert WordAsBits(KOM_MAPPING_W) == 2 by { reveal WordAsBits(); }
    assert BitsAsWord(ARM_L2PTE_RO_BIT) == 0x200 by { reveal BitsAsWord(); }
    reveal BitShiftLeft();
}

lemma lemma_shift_nxbit()
    ensures RightShift(0, 2) == 0;
    ensures RightShift(KOM_MAPPING_X, 2) == BitsAsWord(ARM_L2PTE_NX_BIT)
{
    assert WordAsBits(KOM_MAPPING_X) == 4 by { reveal WordAsBits(); }
    assert BitsAsWord(ARM_L2PTE_NX_BIT) == 1 by { reveal BitsAsWord(); }
    reveal BitShiftRight();
}

lemma lemma_ARM_L2PTE_impl(pa: word, w: bool, x:bool, ptew: word)
    requires PageAligned(pa)
    requires ptew == BitwiseOr(BitwiseOr(BitwiseOr(pa, L2PTE_CONST_WORD()),
                        if x then 0 else BitsAsWord(ARM_L2PTE_NX_BIT)),
                        if w then 0 else BitsAsWord(ARM_L2PTE_RO_BIT))
    ensures ptew == ARM_L2PTE(pa, w, x)
{
    var constbits := ARM_L2PTE_CONST_BITS | 0x2;
    assert L2PTE_CONST_WORD() == BitsAsWord(constbits) by { reveal BitsAsWord(); }
    lemma_WordBitEquiv(L2PTE_CONST_WORD(), constbits);
    var nxbit := if x then 0 else ARM_L2PTE_NX_BIT;
    var nxword := BitsAsWord(nxbit);
    lemma_WordBitEquiv(nxword, nxbit);
    var robit := if w then 0 else ARM_L2PTE_RO_BIT;
    var roword := BitsAsWord(robit);
    lemma_WordBitEquiv(roword, robit);

    calc {
         ptew;
         BitwiseOr(BitwiseOr(BitwiseOr(pa,L2PTE_CONST_WORD()), nxword), roword);
         { lemma_BitwiseOrAssociative(pa, L2PTE_CONST_WORD(), nxword); }
         BitwiseOr(BitwiseOr(pa,BitwiseOr(L2PTE_CONST_WORD(), nxword)), roword);
         { lemma_BitwiseOrAssociative(pa, BitwiseOr(L2PTE_CONST_WORD(), nxword), roword); }
         BitwiseOr(pa,BitwiseOr(BitwiseOr(L2PTE_CONST_WORD(), nxword), roword));
         { lemma_ExpandBitwiseOr(L2PTE_CONST_WORD(), nxword, roword); }
         BitwiseOr(pa, BitsAsWord(BitOr(BitOr(constbits, nxbit), robit)));
         { lemma_BitsAsWordAsBits(BitOr(BitOr(constbits, nxbit), robit)); }
         BitsAsWord(BitOr(WordAsBits(pa), BitOr(BitOr(constbits, nxbit), robit)));
         ARM_L2PTE(pa, w, x);
     }
}
#endverbatim

procedure {:bridge}{:refined} ARM_L2PTE_impl(
    operand mapping:reg,
    inout operand pte:reg, // paddr at input time; pte at return
    out operand tmp:reg,
    ghost abs_mapping:Mapping
)
    requires {:refined false}
        SaneState(this);
        @mapping != @pte && @mapping != @tmp;
        @pte != @tmp && @pte != OSP && @tmp != OSP;
        //@mapping == OReg(R3) && (@pte == OReg(R1) || @pte == OReg(R2)) && @tmp == OReg(R0);
    requires
        PageAligned(pte);
        abs_mapping == wordToMapping(mapping);
    ensures
        pte == ARM_L2PTE(old(pte), abs_mapping.perm.w, abs_mapping.perm.x);
    ensures {:refined false}
        this.ok ==> SaneState(this) && SmcProcedureInvariant(old(this), this);
{
    ghost var pa := pte;

    MOVW(tmp, 0xd76);
    assert tmp == L2PTE_CONST_WORD();

    // OR in const bits
    ORR(pte, pte, tmp);
    assert pte == BitwiseOr(pa, L2PTE_CONST_WORD());

    // compute nxbit
    ghost var nxbit := if abs_mapping.perm.x then 0 else BitsAsWord(ARM_L2PTE_NX_BIT);
    AND(tmp, mapping, const(KOM_MAPPING_X));
    EOR(tmp, tmp, const(KOM_MAPPING_X));
    lemma_extract_kom_mapping_x(mapping, tmp);
    assert (tmp == 0 || tmp == KOM_MAPPING_X)
           && (tmp == 0 <==> abs_mapping.perm.x);
    LSR(tmp, tmp, 2);
    lemma_shift_nxbit();
    assert (tmp == 0 || tmp == BitsAsWord(ARM_L2PTE_NX_BIT))
           && (tmp == 0 <==> abs_mapping.perm.x);
    assert tmp == nxbit;
    ORR(pte, pte, tmp);
    assert pte == BitwiseOr(BitwiseOr(pa, L2PTE_CONST_WORD()), nxbit);

    // compute robit
    ghost var robit := if abs_mapping.perm.w then 0 else BitsAsWord(ARM_L2PTE_RO_BIT);
    AND(tmp, mapping, const(KOM_MAPPING_W));
    EOR(tmp, tmp, const(KOM_MAPPING_W));
    lemma_extract_kom_mapping_w(mapping, tmp);
    assert (tmp == 0 || tmp == KOM_MAPPING_W)
           && (tmp == 0 <==> abs_mapping.perm.w);
    LSL(tmp, tmp, 8);
    lemma_shift_robit();
    assert (tmp == 0 || tmp == BitsAsWord(ARM_L2PTE_RO_BIT))
           && (tmp == 0 <==> abs_mapping.perm.w);
    assert tmp == robit;
    ORR(pte, pte, tmp);
    assert pte == BitwiseOr(BitwiseOr(BitwiseOr(pa, L2PTE_CONST_WORD()), nxbit), robit);

    // prove that we did the right thing
    lemma_ARM_L2PTE_impl(pa, abs_mapping.perm.w, abs_mapping.perm.x, pte);

    // help prove framing
    //assert mapping == old(mapping) && this.m == old(this).m;
    assert {:split_here}{:refined} true;
}

procedure mkL2Pte_secure(
    operand mapping:reg,
    inout operand pagepte:reg,
    out operand tmp:reg,
    ghost abs_mapping:Mapping,
    ghost l2pte:L2PTE
)
    requires/ensures
        SaneState(this);
    requires
        // @mapping == OReg(R3) && @pagepte == OReg(R1);
        @mapping != @pagepte && @mapping != @tmp && @pagepte != @tmp;
        @pagepte != OSP && @tmp != OSP;
        abs_mapping == wordToMapping(mapping);
        l2pte is SecureMapping;
        (l2pte.page == pagepte
            && abs_mapping.perm.x == l2pte.exec
            && abs_mapping.perm.w == l2pte.write);
    reads
        globals;
    ensures
        pagepte == mkL2Pte(l2pte);
        SmcProcedureInvariant(old(this), this);
{
    page_paddr_impl(pagepte, pagepte, tmp);
    ARM_L2PTE_impl(mapping, pagepte, tmp, abs_mapping);
}
