procedure page_paddr_impl(out {:operand} phys:int, {:operand} pagenr:int, out {:operand} tmp:int)
    requires/ensures
        SaneState(this);
    requires
        ValidRegOperand(@phys);
        ValidRegOperand(@pagenr);
        ValidRegOperand(@tmp);
        // NB: @phys == @pagenr is supported
        @phys != @tmp;
        @pagenr != @tmp;
        @phys != OSP;
        @tmp != OSP;
        @pagenr != OSP;
        @phys != OLR;
        @tmp != OLR;
        @pagenr != OLR;
        validPageNr(pagenr);
    ensures
        GlobalsInvariant(old(this),this);
        AllMemInvariant(old(this),this);
        RegPreservingExcept(old(this), this, set(@phys, @tmp));
        bankedRegsPreserved(old(this), this);
        phys == page_paddr(old(pagenr));
        isUInt32(phys);
{
    tmp := sp_op_const(PAGESIZE());
    MUL(phys,pagenr,tmp);
    // LSL(phys, pagenr, sp_op_const(PAGE_SHIFT()));
    assert phys == old(pagenr) * PAGESIZE();

    LDRglobaladdr(tmp, SecurePhysBaseOp());
    LDRglobal(tmp, SecurePhysBaseOp(), tmp, 0);
    assert WordAligned(tmp);
    ADD(phys, phys, tmp);
}

procedure paddr_page_impl(out {:operand} pagenr:int, {:operand} phys:int, out {:operand} tmp:int)
    requires/ensures
        SaneState(this);
    requires
        ValidRegOperand(@phys);
        ValidRegOperand(@pagenr);
        ValidRegOperand(@tmp);
        // NB: @phys == @pagenr is supported
        @phys != @tmp;
        @pagenr != @tmp;
        @phys != OSP;
        @tmp != OSP;
        @pagenr != OSP;
        @phys != OLR;
        @tmp != OLR;
        @pagenr != OLR;
        isUInt32(phys);
        PageAligned(phys);
        SecurePhysBase() <= phys < SecurePhysBase() + KOM_SECURE_RESERVE();
    ensures
        GlobalsInvariant(old(this),this);
        AllMemInvariant(old(this),this);
        RegPreservingExcept(old(this), this, set(@pagenr, @tmp));
        bankedRegsPreserved(old(this), this);
        pagenr == paddr_page(old(phys));
        validPageNr(pagenr);
{
    LDRglobaladdr(tmp, SecurePhysBaseOp());
    LDRglobal(tmp, SecurePhysBaseOp(), tmp, 0);
    assert WordAligned(tmp);
    SUB(pagenr,phys,tmp);
    
    tmp := sp_op_const(PAGESIZE());
    UDIV(pagenr,pagenr,tmp);
}

procedure page_monvaddr_impl(out {:operand} virt:int, {:operand} pagenr:int, out {:operand} tmp:int)
    requires/ensures
        SaneState(this);
    requires
        ValidRegOperand(@virt);
        ValidRegOperand(@pagenr);
        ValidRegOperand(@tmp);
        // NB: @pagenr == @virt is supported
        @pagenr != @tmp;
        @virt != @tmp;
        @virt != OSP;
        @tmp != OSP;
        @pagenr != OSP;
        @virt != OLR;
        @tmp != OLR;
        @pagenr != OLR;
        validPageNr(pagenr);
    ensures
        GlobalsInvariant(old(this),this);
        AllMemInvariant(old(this),this);
        RegPreservingExcept(old(this), this, set(@virt, @tmp));
        bankedRegsPreserved(old(this), this);
        virt == page_monvaddr(old(pagenr));
        isUInt32(virt);
{
    page_paddr_impl(virt, pagenr, tmp);
    ADD(virt, virt, sp_op_const(KOM_DIRECTMAP_VBASE()));
}


procedure memset(inout {:operand} base:int, {:operand} val:int, inout {:operand} size:int)
    requires/ensures
        SaneState(this);
    requires
        DistinctRegOperands(set(@base, @val, @size), 3);
        WordAligned(base);
        WordAligned(size);
        isUInt32(val);
        isUInt32(base + size);
        ValidMemRange(base, base + size);
        base >= StackBase() || base + size <= StackLimit();
    ensures
        GlobalsInvariant(old(this),this);
        StackPreserving(old(this),this);
        RegPreservingExcept(old(this), this, set(@base,@size));
        MemPreservingExcept(old(this), this, old(base), old(base + size));
        forall i :: old(base) <= i < old(base + size) && WordAligned(i)
            ==> MemContents(this.m,i) == old(val);
{
    ghost var lower := base;
    ghost var limit := base + size;

    // beyond this point, "base" is where we're up to, and "size" is the limit
    ADD(size, size, base);

    while (base < size)
        invariant
            SaneState(this);
            GlobalsInvariant(old(this),this);
            StackPreserving(old(this),this);
            WordAligned(base);
            size == limit;
            lower <= base <= limit;
            lower >= StackBase() || limit <= StackLimit();
            forall i :: (lower <= i < base) && WordAligned(i)
                ==> MemContents(this.m,i) == old(val);
            MemPreservingExcept(old(this), this, lower, limit);
            RegPreservingExcept(old(this), this, set(@base, @size));
            val == old(val);
        decreases
            size - base;
    {
        ghost var prevThis := this;
        STR(val, base, 0);
        assert forall p :: ValidMem(p) && p != base
            ==> MemContents(prevThis.m, p) == MemContents(this.m, p);
        ADD(base, base, 4);
    }
}

procedure fcall_prologue(ghost stack_bytes:int)
    requires/ensures
        SaneState(this);
    requires
        stack_bytes >= 40; 
        StackBytesRemaining(this,stack_bytes);
    ensures
        sp == old(sp-40);
        
        //preserves function call argument registers 
        r0 == old(r0);
        r1 == old(r1);
        r2 == old(r2);
        r3 == old(r3);

        // pushes r4-r11, sp, lr
        MemContents(this.m, sp)    == old(r12);
        MemContents(this.m, sp+4)  == old(r11);
        MemContents(this.m, sp+8)  == old(r10);
        MemContents(this.m, sp+12) == old(r9);
        MemContents(this.m, sp+16) == old(r8);
        MemContents(this.m, sp+20) == old(r7);
        MemContents(this.m, sp+24) == old(r6);
        MemContents(this.m, sp+28) == old(r5);
        MemContents(this.m, sp+32) == old(r4);
        MemContents(this.m, sp+36) == old(lr);

        GlobalsInvariant(old(this),this);
        NonStackMemPreserving(old(this),this);
        ParentStackPreserving(old(this),this);
        StackBytesRemaining(this,stack_bytes-40);
{
    SUB(sp, sp, 40);

    //push link register onto stack
    STR(lr, sp, 36);

    //push r4-r11 onto stack
    STR(r4,  sp, 32);
    STR(r5,  sp, 28);
    STR(r6,  sp, 24);
    STR(r7,  sp, 20);
    STR(r8,  sp, 16);
    STR(r9,  sp, 12);
    STR(r10, sp, 8);
    STR(r11, sp, 4);
    STR(r12, sp, 0);
}

procedure fcall_epilogue(ghost stack_bytes_left:int)
    requires/ensures
        SaneState(this);
    requires
        isUInt32(sp + 40);
        sp + 40 <= StackBase();
        StackBytesRemaining(this,stack_bytes_left);
    ensures
        sp == old(sp+40);
       
        // fcall argument regs preserved. 
        r0 == old(r0);
        r1 == old(r1);
        r2 == old(r2);
        r3 == old(r3);

        // pop lr, r4-r11 from stack.
        lr  == old(MemContents(this.m, sp+36));
        r4  == old(MemContents(this.m, sp+32));
        r5  == old(MemContents(this.m, sp+28));
        r6  == old(MemContents(this.m, sp+24));
        r7  == old(MemContents(this.m, sp+20));
        r8  == old(MemContents(this.m, sp+16));
        r9  == old(MemContents(this.m, sp+12));
        r10 == old(MemContents(this.m, sp+8));
        r11 == old(MemContents(this.m, sp+4));
        r12 == old(MemContents(this.m, sp));

        AllMemInvariant(old(this),this);
        StackBytesRemaining(this,stack_bytes_left+40);
{
    //pop r12 down to r4 from stack
    LDR(r12, sp, 0);
    LDR(r11, sp, 4);
    LDR(r10, sp, 8);
    LDR(r9,  sp, 12);
    LDR(r8,  sp, 16);
    LDR(r7,  sp, 20);
    LDR(r6,  sp, 24);
    LDR(r5,  sp, 28);
    LDR(r4,  sp, 32);

    //pop link register from stack
    LDR(lr, sp, 36);
    ADD(sp, sp, 40);
}
